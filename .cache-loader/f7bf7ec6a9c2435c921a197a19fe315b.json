{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/percent.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/percent.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\nvar forIn = require('@antv/util/lib/each');\nvar isArray = require('@antv/util/lib/type/is-array');\nvar isString = require('@antv/util/lib/type/is-string');\nvar sum = require('simple-statistics').sum;\nvar partition = require('../util/partition');\nvar registerTransform = require('../data-set').registerTransform;\nvar getField = require('../util/option-parser').getField;\nvar DEFAULT_OPTIONS = {\n    groupBy: [],\n    as: '_percent'\n};\nfunction transform(dataView, options) {\n    if (options === void 0) { options = {}; }\n    options = assign({}, DEFAULT_OPTIONS, options);\n    var field = getField(options);\n    var dimension = options.dimension;\n    var groupBy = options.groupBy;\n    var as = options.as;\n    if (!isString(dimension)) {\n        throw new TypeError('Invalid dimension: must be a string!');\n    }\n    if (isArray(as)) {\n        console.warn('Invalid as: must be a string, will use the first element of the array specified.');\n        as = as[0];\n    }\n    if (!isString(as)) {\n        throw new TypeError('Invalid as: must be a string!');\n    }\n    var rows = dataView.rows;\n    var result = [];\n    var groups = partition(rows, groupBy);\n    forIn(groups, function (group) {\n        var totalSum = sum(group.map(function (row) { return row[field]; }));\n        if (totalSum === 0) {\n            console.warn(\"Invalid data: total sum of field \" + field + \" is 0!\");\n        }\n        var innerGroups = partition(group, [dimension]);\n        forIn(innerGroups, function (innerGroup) {\n            var innerSum = sum(innerGroup.map(function (row) { return row[field]; }));\n            var resultRow = innerGroup[0];\n            var dimensionValue = resultRow[dimension];\n            resultRow[field] = innerSum;\n            resultRow[dimension] = dimensionValue;\n            if (totalSum === 0) {\n                resultRow[as] = 0;\n            }\n            else {\n                resultRow[as] = innerSum / totalSum;\n            }\n            result.push(resultRow);\n        });\n    });\n    dataView.rows = result;\n}\nregisterTransform('percent', transform);\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/percent.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/percent.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,KAAK,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC7C,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAExD,IAAA,GAAG,GACD,OAAO,CAAC,mBAAmB,CAAC,IAD3B,CAC4B;AACjC,IAAM,SAAS,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAE7C,IAAA,iBAAiB,GACf,OAAO,CAAC,aAAa,CAAC,kBADP,CACQ;AAEzB,IAAA,QAAQ,GACN,OAAO,CAAC,uBAAuB,CAAC,SAD1B,CAC2B;AAErC,IAAM,eAAe,GAAG;IAGtB,OAAO,EAAE,EAAE;IACX,EAAE,EAAE,UAAU;CACf,CAAC;AAEF,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAY;IAAZ,wBAAA,EAAA,YAAY;IACvC,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChC,IAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IACpC,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAChC,IAAI,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACpB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACxB,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC;KAC7D;IACD,IAAI,OAAO,CAAC,EAAE,CAAC,EAAE;QACf,OAAO,CAAC,IAAI,CAAC,kFAAkF,CAAC,CAAC;QACjG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KACZ;IACD,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;QACjB,MAAM,IAAI,SAAS,CAAC,+BAA+B,CAAC,CAAC;KACtD;IACD,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3B,IAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAM,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,KAAK,CAAC,MAAM,EAAE,UAAA,KAAK;QACjB,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,CAAC,EAAV,CAAU,CAAC,CAAC,CAAC;QACnD,IAAI,QAAQ,KAAK,CAAC,EAAE;YAClB,OAAO,CAAC,IAAI,CAAC,sCAAoC,KAAK,WAAQ,CAAC,CAAC;SACjE;QACD,IAAM,WAAW,GAAG,SAAS,CAAC,KAAK,EAAE,CAAE,SAAS,CAAE,CAAC,CAAC;QACpD,KAAK,CAAC,WAAW,EAAE,UAAA,UAAU;YAC3B,IAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,CAAC,EAAV,CAAU,CAAC,CAAC,CAAC;YAExD,IAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAEhC,IAAM,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;YAC5C,SAAS,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;YAC5B,SAAS,CAAC,SAAS,CAAC,GAAG,cAAc,CAAC;YACtC,IAAI,QAAQ,KAAK,CAAC,EAAE;gBAClB,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;aACnB;iBAAM;gBACL,SAAS,CAAC,EAAE,CAAC,GAAG,QAAQ,GAAG,QAAQ,CAAC;aACrC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC;AACzB,CAAC;AAED,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst forIn = require('@antv/util/lib/each');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  sum\n} = require('simple-statistics');\nconst partition = require('../util/partition');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  getField\n} = require('../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  // field: 'y', // required\n  // dimension: 'x', // required\n  groupBy: [], // optional\n  as: '_percent'\n};\n\nfunction transform(dataView, options = {}) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const field = getField(options);\n  const dimension = options.dimension;\n  const groupBy = options.groupBy;\n  let as = options.as;\n  if (!isString(dimension)) {\n    throw new TypeError('Invalid dimension: must be a string!');\n  }\n  if (isArray(as)) {\n    console.warn('Invalid as: must be a string, will use the first element of the array specified.');\n    as = as[0];\n  }\n  if (!isString(as)) {\n    throw new TypeError('Invalid as: must be a string!');\n  }\n  const rows = dataView.rows;\n  const result = [];\n  const groups = partition(rows, groupBy);\n  forIn(groups, group => {\n    const totalSum = sum(group.map(row => row[field]));\n    if (totalSum === 0) {\n      console.warn(`Invalid data: total sum of field ${field} is 0!`);\n    }\n    const innerGroups = partition(group, [ dimension ]);\n    forIn(innerGroups, innerGroup => {\n      const innerSum = sum(innerGroup.map(row => row[field]));\n      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));\n      const resultRow = innerGroup[0];\n      // FIXME in case dimension and field is the same\n      const dimensionValue = resultRow[dimension];\n      resultRow[field] = innerSum;\n      resultRow[dimension] = dimensionValue;\n      if (totalSum === 0) {\n        resultRow[as] = 0;\n      } else {\n        resultRow[as] = innerSum / totalSum;\n      }\n      result.push(resultRow);\n    });\n  });\n  dataView.rows = result;\n}\n\nregisterTransform('percent', transform);\n"]}]}