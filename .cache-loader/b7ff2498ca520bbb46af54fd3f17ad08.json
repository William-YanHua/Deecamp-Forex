{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/util/option-parser.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/util/option-parser.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var isArray = require('@antv/util/lib/type/is-array');\nvar isString = require('@antv/util/lib/type/is-string');\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nvar INVALID_FIELDS_ERR_MSG = 'Invalid fields: it must be an array!';\nmodule.exports = {\n    getField: function (options, defaultField) {\n        var field = options.field, fields = options.fields;\n        if (isString(field)) {\n            return field;\n        }\n        if (isArray(field)) {\n            console.warn(INVALID_FIELD_ERR_MSG);\n            return field[0];\n        }\n        console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n        if (isString(fields)) {\n            return fields;\n        }\n        if (isArray(fields) && fields.length) {\n            return fields[0];\n        }\n        if (defaultField) {\n            return defaultField;\n        }\n        throw new TypeError(INVALID_FIELD_ERR_MSG);\n    },\n    getFields: function (options, defaultFields) {\n        var field = options.field, fields = options.fields;\n        if (isArray(fields)) {\n            return fields;\n        }\n        if (isString(fields)) {\n            console.warn(INVALID_FIELDS_ERR_MSG);\n            return [fields];\n        }\n        console.warn(INVALID_FIELDS_ERR_MSG + \" will try to get field instead.\");\n        if (isString(field)) {\n            console.warn(INVALID_FIELDS_ERR_MSG);\n            return [field];\n        }\n        if (isArray(field) && field.length) {\n            console.warn(INVALID_FIELDS_ERR_MSG);\n            return field;\n        }\n        if (defaultFields) {\n            return defaultFields;\n        }\n        throw new TypeError(INVALID_FIELDS_ERR_MSG);\n    }\n};\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/util/option-parser.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/util/option-parser.js"],"names":[],"mappings":"AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAE1D,IAAM,qBAAqB,GAAG,qCAAqC,CAAC;AACpE,IAAM,sBAAsB,GAAG,sCAAsC,CAAC;AAEtE,MAAM,CAAC,OAAO,GAAG;IACf,QAAQ,YAAC,OAAO,EAAE,YAAY;QACpB,IAAA,KAAK,GAAa,OAAO,MAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;QAClC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACnB,OAAO,KAAK,CAAC;SACd;QACD,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;YAClB,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACpC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;SACjB;QACD,OAAO,CAAC,IAAI,CAAI,qBAAqB,qCAAkC,CAAC,CAAC;QACzE,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YACpB,OAAO,MAAM,CAAC;SACf;QACD,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,EAAE;YACpC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB;QACD,IAAI,YAAY,EAAE;YAChB,OAAO,YAAY,CAAC;SACrB;QACD,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;IAC7C,CAAC;IACD,SAAS,YAAC,OAAO,EAAE,aAAa;QACtB,IAAA,KAAK,GAAa,OAAO,MAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;QAClC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;YACnB,OAAO,MAAM,CAAC;SACf;QACD,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YACpB,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrC,OAAO,CAAE,MAAM,CAAE,CAAC;SACnB;QACD,OAAO,CAAC,IAAI,CAAI,sBAAsB,oCAAiC,CAAC,CAAC;QACzE,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACnB,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrC,OAAO,CAAE,KAAK,CAAE,CAAC;SAClB;QACD,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;YAClC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACrC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,aAAa,EAAE;YACjB,OAAO,aAAa,CAAC;SACtB;QACD,MAAM,IAAI,SAAS,CAAC,sBAAsB,CAAC,CAAC;IAC9C,CAAC;CACF,CAAC","sourcesContent":["const isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nconst INVALID_FIELDS_ERR_MSG = 'Invalid fields: it must be an array!';\n\nmodule.exports = {\n  getField(options, defaultField) {\n    const { field, fields } = options;\n    if (isString(field)) {\n      return field;\n    }\n    if (isArray(field)) {\n      console.warn(INVALID_FIELD_ERR_MSG);\n      return field[0];\n    }\n    console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n    if (isString(fields)) {\n      return fields;\n    }\n    if (isArray(fields) && fields.length) {\n      return fields[0];\n    }\n    if (defaultField) {\n      return defaultField;\n    }\n    throw new TypeError(INVALID_FIELD_ERR_MSG);\n  },\n  getFields(options, defaultFields) {\n    const { field, fields } = options;\n    if (isArray(fields)) {\n      return fields;\n    }\n    if (isString(fields)) {\n      console.warn(INVALID_FIELDS_ERR_MSG);\n      return [ fields ];\n    }\n    console.warn(`${INVALID_FIELDS_ERR_MSG} will try to get field instead.`);\n    if (isString(field)) {\n      console.warn(INVALID_FIELDS_ERR_MSG);\n      return [ field ];\n    }\n    if (isArray(field) && field.length) {\n      console.warn(INVALID_FIELDS_ERR_MSG);\n      return field;\n    }\n    if (defaultFields) {\n      return defaultFields;\n    }\n    throw new TypeError(INVALID_FIELDS_ERR_MSG);\n  }\n};\n"]}]}