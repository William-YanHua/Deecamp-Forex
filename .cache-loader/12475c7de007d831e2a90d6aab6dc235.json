{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/subset.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/subset.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var registerTransform = require('../data-set').registerTransform;\nvar getFields = require('../util/option-parser').getFields;\nregisterTransform('subset', function (dataView, options) {\n    if (options === void 0) { options = {}; }\n    var startIndex = options.startRowIndex || 0;\n    var endIndex = options.endRowIndex || dataView.rows.length - 1;\n    var columns = getFields(options, dataView.getColumnNames());\n    dataView.rows = dataView.getSubset(startIndex, endIndex, columns);\n});\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/subset.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/subset.js"],"names":[],"mappings":"AACE,IAAA,iBAAiB,GACf,OAAO,CAAC,aAAa,CAAC,kBADP,CACQ;AAEzB,IAAA,SAAS,GACP,OAAO,CAAC,uBAAuB,CAAC,UADzB,CAC0B;AAWrC,iBAAiB,CAAC,QAAQ,EAAE,UAAC,QAAQ,EAAE,OAAY;IAAZ,wBAAA,EAAA,YAAY;IACjD,IAAM,UAAU,GAAG,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC;IAC9C,IAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACjE,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;IAC9D,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC","sourcesContent":["const {\n  registerTransform\n} = require('../data-set');\nconst {\n  getFields\n} = require('../util/option-parser');\n\n/*\n * options: {\n *   type: 'subset',\n *   startRowIndex: 0,\n *   endRowIndex: 1,\n *   fields: [],\n * }\n */\n\nregisterTransform('subset', (dataView, options = {}) => {\n  const startIndex = options.startRowIndex || 0;\n  const endIndex = options.endRowIndex || dataView.rows.length - 1;\n  const columns = getFields(options, dataView.getColumnNames());\n  dataView.rows = dataView.getSubset(startIndex, endIndex, columns);\n});\n"]}]}