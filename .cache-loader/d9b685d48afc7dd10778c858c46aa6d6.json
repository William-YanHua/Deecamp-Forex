{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\get-line-intersect.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\get-line-intersect.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var isBetween = function (value, min, max) { return value >= min && value <= max; };\r\nexport default function getLineIntersect(p0, p1, p2, p3) {\r\n    var tolerance = 0.001;\r\n    var E = {\r\n        x: p2.x - p0.x,\r\n        y: p2.y - p0.y,\r\n    };\r\n    var D0 = {\r\n        x: p1.x - p0.x,\r\n        y: p1.y - p0.y,\r\n    };\r\n    var D1 = {\r\n        x: p3.x - p2.x,\r\n        y: p3.y - p2.y,\r\n    };\r\n    var kross = D0.x * D1.y - D0.y * D1.x;\r\n    var sqrKross = kross * kross;\r\n    var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\r\n    var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\r\n    var point = null;\r\n    if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\r\n        var s = (E.x * D1.y - E.y * D1.x) / kross;\r\n        var t = (E.x * D0.y - E.y * D0.x) / kross;\r\n        if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\r\n            point = {\r\n                x: p0.x + s * D0.x,\r\n                y: p0.y + s * D0.y,\r\n            };\r\n        }\r\n    }\r\n    return point;\r\n}\r\n;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\get-line-intersect.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\get-line-intersect.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE,GAAG,IAAI,OAAO,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;AACpF,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;IACnD,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,GAAG;QACJ,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACd,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KACjB,CAAC;IACF,IAAI,EAAE,GAAG;QACL,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACd,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KACjB,CAAC;IACF,IAAI,EAAE,GAAG;QACL,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACd,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;KACjB,CAAC;IACF,IAAI,KAAK,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACtC,IAAI,QAAQ,GAAG,KAAK,GAAG,KAAK,CAAC;IAC7B,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACxC,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACxC,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,IAAI,QAAQ,GAAG,SAAS,GAAG,OAAO,GAAG,OAAO,EAAE;QAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;QAC1C,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;QAC1C,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;YAC1C,KAAK,GAAG;gBACJ,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;gBAClB,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;aACrB,CAAC;SACL;KACJ;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AACD,CAAC","sourcesContent":["var isBetween = function (value, min, max) { return value >= min && value <= max; };\nexport default function getLineIntersect(p0, p1, p2, p3) {\n    var tolerance = 0.001;\n    var E = {\n        x: p2.x - p0.x,\n        y: p2.y - p0.y,\n    };\n    var D0 = {\n        x: p1.x - p0.x,\n        y: p1.y - p0.y,\n    };\n    var D1 = {\n        x: p3.x - p2.x,\n        y: p3.y - p2.y,\n    };\n    var kross = D0.x * D1.y - D0.y * D1.x;\n    var sqrKross = kross * kross;\n    var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n    var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n    var point = null;\n    if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n        var s = (E.x * D1.y - E.y * D1.x) / kross;\n        var t = (E.x * D0.y - E.y * D0.x) / kross;\n        if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n            point = {\n                x: p0.x + s * D0.x,\n                y: p0.y + s * D0.y,\n            };\n        }\n    }\n    return point;\n}\n;\n//# sourceMappingURL=get-line-intersect.js.map"]}]}