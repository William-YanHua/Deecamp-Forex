{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g-math\\lib\\line.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g-math\\lib\\line.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"./util\");\r\nvar vec2 = require(\"gl-matrix/vec2\");\r\nexports.default = {\r\n    box: function (x1, y1, x2, y2) {\r\n        return util_1.getBBoxByArray([x1, x2], [y1, y2]);\r\n    },\r\n    length: function (x1, y1, x2, y2) {\r\n        return util_1.distance(x1, y1, x2, y2);\r\n    },\r\n    pointAt: function (x1, y1, x2, y2, t) {\r\n        return {\r\n            x: (1 - t) * x1 + t * x2,\r\n            y: (1 - t) * y1 + t * y2,\r\n        };\r\n    },\r\n    pointDistance: function (x1, y1, x2, y2, x, y) {\r\n        var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\r\n        if (cross < 0) {\r\n            return util_1.distance(x1, y1, x, y);\r\n        }\r\n        var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\r\n        if (cross > lengthSquare) {\r\n            return util_1.distance(x2, y2, x, y);\r\n        }\r\n        return this.pointToLine(x1, y1, x2, y2, x, y);\r\n    },\r\n    pointToLine: function (x1, y1, x2, y2, x, y) {\r\n        var d = [x2 - x1, y2 - y1];\r\n        if (vec2.exactEquals(d, [0, 0])) {\r\n            return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\r\n        }\r\n        var u = [-d[1], d[0]];\r\n        vec2.normalize(u, u);\r\n        var a = [x - x1, y - y1];\r\n        return Math.abs(vec2.dot(a, u));\r\n    },\r\n    tangentAngle: function (x1, y1, x2, y2) {\r\n        return Math.atan2(y2 - y1, x2 - x1);\r\n    },\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g-math\\lib\\line.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g-math\\lib\\line.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util\");\nvar vec2 = require(\"gl-matrix/vec2\");\nexports.default = {\n    /**\n     * 计算线段的包围盒\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {object} 包围盒对象\n     */\n    box: function (x1, y1, x2, y2) {\n        return util_1.getBBoxByArray([x1, x2], [y1, y2]);\n    },\n    /**\n     * 线段的长度\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {number} 距离\n     */\n    length: function (x1, y1, x2, y2) {\n        return util_1.distance(x1, y1, x2, y2);\n    },\n    /**\n     * 根据比例获取点\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} t 指定比例\n     * @return {object} 包含 x, y 的点\n     */\n    pointAt: function (x1, y1, x2, y2, t) {\n        return {\n            x: (1 - t) * x1 + t * x2,\n            y: (1 - t) * y1 + t * y2,\n        };\n    },\n    /**\n     * 点到线段的距离\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} x  测试点 x\n     * @param {number} y  测试点 y\n     * @return {number} 距离\n     */\n    pointDistance: function (x1, y1, x2, y2, x, y) {\n        // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n        // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n        var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n        if (cross < 0) {\n            return util_1.distance(x1, y1, x, y);\n        }\n        var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n        if (cross > lengthSquare) {\n            return util_1.distance(x2, y2, x, y);\n        }\n        return this.pointToLine(x1, y1, x2, y2, x, y);\n    },\n    /**\n     * 点到直线的距离，而不是点到线段的距离\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} x  测试点 x\n     * @param {number} y  测试点 y\n     * @return {number} 距离\n     */\n    pointToLine: function (x1, y1, x2, y2, x, y) {\n        var d = [x2 - x1, y2 - y1];\n        // 如果端点相等，则判定点到点的距离\n        if (vec2.exactEquals(d, [0, 0])) {\n            return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n        }\n        var u = [-d[1], d[0]];\n        vec2.normalize(u, u);\n        var a = [x - x1, y - y1];\n        return Math.abs(vec2.dot(a, u));\n    },\n    /**\n     * 线段的角度\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {number} 导数\n     */\n    tangentAngle: function (x1, y1, x2, y2) {\n        return Math.atan2(y2 - y1, x2 - x1);\n    },\n};\n//# sourceMappingURL=line.js.map"]}]}