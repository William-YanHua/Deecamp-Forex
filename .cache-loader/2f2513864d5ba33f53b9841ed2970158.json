{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\voronoi.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\voronoi.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar d3Voronoi = require('d3-voronoi');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar registerTransform = require('../../data-set').registerTransform;\r\nvar getFields = require('../../util/option-parser').getFields;\r\nvar DEFAULT_OPTIONS = {\r\n    as: ['_x', '_y']\r\n};\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var as = options.as;\r\n    if (!isArray(as) || as.length !== 2) {\r\n        throw new TypeError('Invalid as: must be an array with two strings!');\r\n    }\r\n    var xField = as[0];\r\n    var yField = as[1];\r\n    var fields = getFields(options);\r\n    if (!isArray(fields) && fields.length !== 2) {\r\n        throw new TypeError('Invalid fields: must be an array with two strings!');\r\n    }\r\n    var x = fields[0];\r\n    var y = fields[1];\r\n    var rows = dataView.rows;\r\n    var data = rows.map(function (row) { return [row[x], row[y]]; });\r\n    var voronoi = d3Voronoi.voronoi();\r\n    if (options.extend) {\r\n        voronoi.extent(options.extend);\r\n    }\r\n    if (options.size) {\r\n        voronoi.size(options.size);\r\n    }\r\n    var polygons = voronoi(data).polygons();\r\n    rows.forEach(function (row, i) {\r\n        var polygon = polygons[i].filter(function (point) { return !!point; });\r\n        row[xField] = polygon.map(function (point) { return point[0]; });\r\n        row[yField] = polygon.map(function (point) { return point[1]; });\r\n    });\r\n}\r\nregisterTransform('diagram.voronoi', transform);\r\nregisterTransform('voronoi', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\voronoi.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\voronoi.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACxC,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAEtD,IAAA,+DAAiB,CACW;AAE5B,IAAA,yDAAS,CAC6B;AAExC,IAAM,eAAe,GAAG;IAItB,EAAE,EAAE,CAAE,IAAI,EAAE,IAAI,CAAE;CACnB,CAAC;AAEF,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO;IAClC,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAE/C,IAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACnC,MAAM,IAAI,SAAS,CAAC,gDAAgD,CAAC,CAAC;KACvE;IACD,IAAM,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACrB,IAAM,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAErB,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3C,MAAM,IAAI,SAAS,CAAC,oDAAoD,CAAC,CAAC;KAC3E;IACD,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACpB,IAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAEpB,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAE,EAAlB,CAAkB,CAAC,CAAC;IACjD,IAAM,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;IACpC,IAAI,OAAO,CAAC,MAAM,EAAE;QAClB,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;KAChC;IACD,IAAI,OAAO,CAAC,IAAI,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAC5B;IACD,IAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC1C,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,CAAC;QAClB,IAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,CAAC,KAAK,EAAP,CAAO,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAC;QAC7C,GAAG,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,CAAC,CAAC,EAAR,CAAQ,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;AACL,CAAC;AAED,iBAAiB,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;AAChD,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst d3Voronoi = require('d3-voronoi');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst {\n  getFields\n} = require('../../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  // fields: [ 'x', 'y' ] // field x and field y, required\n  // extend: [[x0, y0], [x1, y1]], // optional\n  // size: [width, height], // optional\n  as: [ '_x', '_y' ]\n};\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: must be an array with two strings!');\n  }\n  const xField = as[0];\n  const yField = as[1];\n\n  const fields = getFields(options);\n  if (!isArray(fields) && fields.length !== 2) {\n    throw new TypeError('Invalid fields: must be an array with two strings!');\n  }\n  const x = fields[0];\n  const y = fields[1];\n\n  const rows = dataView.rows;\n  const data = rows.map(row => [ row[x], row[y] ]);\n  const voronoi = d3Voronoi.voronoi();\n  if (options.extend) {\n    voronoi.extent(options.extend);\n  }\n  if (options.size) {\n    voronoi.size(options.size);\n  }\n  const polygons = voronoi(data).polygons();\n  rows.forEach((row, i) => {\n    const polygon = polygons[i].filter(point => !!point); // some points are null\n    row[xField] = polygon.map(point => point[0]);\n    row[yField] = polygon.map(point => point[1]);\n  });\n}\n\nregisterTransform('diagram.voronoi', transform);\nregisterTransform('voronoi', transform);\n"]}]}