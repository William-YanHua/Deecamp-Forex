{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\hammer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\hammer.js","mtime":1467599198000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\r\nimport { asin, cos, sin } from \"./math\";\r\nexport function hammerRaw(A, B) {\r\n    if (arguments.length < 2)\r\n        B = A;\r\n    if (B === 1)\r\n        return azimuthalEqualAreaRaw;\r\n    if (B === Infinity)\r\n        return hammerQuarticAuthalicRaw;\r\n    function forward(lambda, phi) {\r\n        var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\r\n        coordinates[0] *= A;\r\n        return coordinates;\r\n    }\r\n    forward.invert = function (x, y) {\r\n        var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\r\n        coordinates[0] *= B;\r\n        return coordinates;\r\n    };\r\n    return forward;\r\n}\r\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\r\n    return [\r\n        lambda * cos(phi) / cos(phi /= 2),\r\n        2 * sin(phi)\r\n    ];\r\n}\r\nhammerQuarticAuthalicRaw.invert = function (x, y) {\r\n    var phi = 2 * asin(y / 2);\r\n    return [\r\n        x * cos(phi / 2) / cos(phi),\r\n        phi\r\n    ];\r\n};\r\nexport default function () {\r\n    var B = 2, m = projectionMutator(hammerRaw), p = m(B);\r\n    p.coefficient = function (_) {\r\n        if (!arguments.length)\r\n            return B;\r\n        return m(B = +_);\r\n    };\r\n    return p\r\n        .scale(169.529);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\hammer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\hammer.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,wBAAwB,IAAI,qBAAqB,EAAE,oBAAoB,IAAI,iBAAiB,EAAC,MAAM,QAAQ,CAAC;AACpH,OAAO,EAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAC,MAAM,QAAQ,CAAC;AAEtC,MAAM,UAAU,SAAS,CAAC,CAAC,EAAE,CAAC;IAC5B,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC;QAAE,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC,KAAK,CAAC;QAAE,OAAO,qBAAqB,CAAC;IAC1C,IAAI,CAAC,KAAK,QAAQ;QAAE,OAAO,wBAAwB,CAAC;IAEpD,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG;QAC1B,IAAI,WAAW,GAAG,qBAAqB,CAAC,MAAM,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;QACzD,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;QAC5B,IAAI,WAAW,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACzD,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpB,OAAO,WAAW,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,wBAAwB,CAAC,MAAM,EAAE,GAAG;IAC3C,OAAO;QACL,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;QACjC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;KACb,CAAC;AACJ,CAAC;AAED,wBAAwB,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IAC7C,IAAI,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1B,OAAO;QACL,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;QAC3B,GAAG;KACJ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,IAAI,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,iBAAiB,CAAC,SAAS,CAAC,EAChC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEb,CAAC,CAAC,WAAW,GAAG,UAAS,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,MAAM;YAAE,OAAO,CAAC,CAAC;QAChC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC;SACL,KAAK,CAAC,OAAO,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n"]}]}