{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layer.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layer.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport squarify from './layout/squarify';\nimport { INTERACTION_MAP } from './interaction';\nimport * as EventParser from './event';\nimport TreemapLabel from './components/label';\nvar PARENT_NODE_OFFSET = 4;\nvar BLOCK_MARGIN = 4;\nvar TreemapLayer = (function (_super) {\n    __extends(TreemapLayer, _super);\n    function TreemapLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'treemap';\n        return _this;\n    }\n    TreemapLayer.getDefaultOptions = function () {\n        return deepMix({}, _super.getDefaultOptions.call(this), {\n            maxLevel: 2,\n            padding: [0, 0, 0, 0],\n            tooltip: {\n                visible: false,\n                showTitle: false,\n                showCrosshairs: false,\n                showMarkers: false,\n                shared: false,\n            },\n            legend: {\n                visible: false,\n            },\n            xAxis: {\n                visible: false,\n            },\n            yAxis: {\n                visible: false,\n            },\n            xField: 'x',\n            yField: 'y',\n            label: {\n                visible: true,\n                adjustPosition: true,\n                style: {\n                    stroke: 'rgba(0,0,0,0)',\n                    lineWidth: 0,\n                    fontSize: 12,\n                },\n            },\n            meta: {\n                x: {\n                    nice: false,\n                },\n                y: {\n                    nice: false,\n                },\n            },\n            interactions: [{ type: 'tooltip' }],\n        });\n    };\n    TreemapLayer.prototype.beforeInit = function () {\n        var _this = this;\n        _super.prototype.beforeInit.call(this);\n        var interactions = this.options.interactions;\n        if (interactions) {\n            each(interactions, function (interaction) {\n                if (interaction.type === 'drilldown') {\n                    _this.isDrilldown = true;\n                    _this.options.maxLevel = 1;\n                }\n            });\n        }\n        var data = this.options.data;\n        var treemapData = this.getTreemapData(data);\n        this.rootData = treemapData;\n    };\n    TreemapLayer.prototype.afterRender = function () {\n        _super.prototype.afterRender.call(this);\n        if (this.options.label && this.options.label.visible) {\n            var label = new TreemapLabel(__assign({ view: this.view, plot: this }, this.options.label));\n            label.render();\n        }\n    };\n    TreemapLayer.prototype.geometryParser = function () {\n        return 'polygon';\n    };\n    TreemapLayer.prototype.getTreemapData = function (data, level) {\n        var viewRange = this.getViewRange();\n        var root = squarify(data, viewRange.x, viewRange.y, viewRange.width, viewRange.height);\n        this.recursive(root, 1);\n        var treemapData = [];\n        this.getAllNodes(root, treemapData, level);\n        treemapData.sort(function (a, b) {\n            return a.depth - b.depth;\n        });\n        this.options.xField = 'x';\n        this.options.yField = 'y';\n        return treemapData;\n    };\n    TreemapLayer.prototype.processData = function () {\n        return this.rootData;\n    };\n    TreemapLayer.prototype.coord = function () {\n        return;\n    };\n    TreemapLayer.prototype.addGeometry = function () {\n        var _this = this;\n        var _a = this.options, data = _a.data, colorField = _a.colorField, color = _a.color;\n        var treemapData = this.getTreemapData(data);\n        this.rootData = treemapData;\n        var isNested = this.isNested(treemapData);\n        this.rect = {\n            type: 'polygon',\n            position: {\n                fields: ['x', 'y'],\n            },\n            color: {\n                fields: [colorField],\n                values: color,\n            },\n            style: {\n                fields: ['depth'],\n                callback: function (d) {\n                    var defaultStyle = _this.adjustStyleByDepth(d, isNested);\n                    return deepMix({}, defaultStyle, _this.options.rectStyle);\n                },\n            },\n            tooltip: {\n                fields: ['name', 'value'],\n            },\n        };\n        if (this.options.tooltip && this.options.tooltip.formatter) {\n            this.rect.tooltip.callback = this.options.tooltip.formatter;\n        }\n        this.setConfig('geometry', this.rect);\n    };\n    TreemapLayer.prototype.applyInteractions = function () {\n        var _this = this;\n        var interactionCfg = this.options.interactions;\n        var interactions = this.view.interactions;\n        each(interactionCfg, function (inter) {\n            var Ctr = INTERACTION_MAP[inter.type];\n            if (Ctr) {\n                var interaction = new Ctr(deepMix({}, {\n                    view: _this.view,\n                    plot: _this,\n                    startEvent: 'polygon:click',\n                }, inter.cfg, Ctr.getInteractionRange(_this.layerBBox, inter.cfg)));\n                interactions[inter.type] = interaction;\n            }\n        });\n    };\n    TreemapLayer.prototype.animation = function () {\n        _super.prototype.animation.call(this);\n        if (this.isDrilldown) {\n            this.rect.animate = false;\n        }\n    };\n    TreemapLayer.prototype.parseEvents = function () {\n        _super.prototype.parseEvents.call(this, EventParser);\n    };\n    TreemapLayer.prototype.recursive = function (rows, depth) {\n        var _this = this;\n        var colorField = this.options.colorField;\n        each(rows, function (r) {\n            each(r.children, function (c) {\n                c.depth = depth;\n                if (depth > 1)\n                    c.parent = r;\n                if (!hasKey(c, colorField)) {\n                    c[colorField] = r[colorField];\n                }\n                c.showLabel = true;\n                var leaf = _this.isLeaf(c);\n                if (!leaf) {\n                    var cliperHeight = Math.abs(c.y1 - c.y0);\n                    var labelHeight = _this.getLabelHeight();\n                    var parentLabelOffset = cliperHeight / 2 > labelHeight ? labelHeight : BLOCK_MARGIN;\n                    c.showLabel = parentLabelOffset === BLOCK_MARGIN ? false : true;\n                    var c_rows = squarify(c, c.x0 + BLOCK_MARGIN, c.y0 + parentLabelOffset, c.x1 - BLOCK_MARGIN, c.y1 - BLOCK_MARGIN);\n                    _this.fillColorField(c_rows, colorField, c[colorField]);\n                    _this.recursive(c_rows, c.depth + 1);\n                }\n            });\n        });\n    };\n    TreemapLayer.prototype.getAllNodes = function (data, nodes, level) {\n        var _this = this;\n        var max = level ? level : this.options.maxLevel;\n        var viewRange = this.getViewRange();\n        each(data, function (d) {\n            if (hasKey(d, 'x0') && d.depth <= max) {\n                nodes.push(__assign(__assign({}, d), { x: [d.x0, d.x1, d.x1, d.x0], y: [viewRange.height - d.y1, viewRange.height - d.y1, viewRange.height - d.y0, viewRange.height - d.y0] }));\n            }\n            if (hasKey(d, 'children')) {\n                _this.getAllNodes(d.children, nodes);\n            }\n        });\n    };\n    TreemapLayer.prototype.fillColorField = function (rows, fieldName, value) {\n        each(rows, function (r) {\n            if (!hasKey(r, fieldName)) {\n                r[fieldName] = value;\n            }\n        });\n    };\n    TreemapLayer.prototype.getLabelHeight = function () {\n        var label = this.options.label;\n        var fontSize = this.getPlotTheme().label.style.fontSize;\n        var size = 0;\n        if (label && label.visible) {\n            var labelStyle = label.style;\n            size = labelStyle && labelStyle.fontSize ? labelStyle.fontSize : fontSize;\n        }\n        return size + PARENT_NODE_OFFSET * 2;\n    };\n    TreemapLayer.prototype.isLeaf = function (data) {\n        return !data.children || data.children.length === 0;\n    };\n    TreemapLayer.prototype.isNested = function (data) {\n        var maxLevel = this.options.maxLevel;\n        if (maxLevel === 1) {\n            return false;\n        }\n        var nested = false;\n        for (var i = 0; i < data.length; i++) {\n            if (data[i].children) {\n                nested = true;\n                break;\n            }\n        }\n        return nested;\n    };\n    TreemapLayer.prototype.adjustStyleByDepth = function (depth, isNested) {\n        var maxLevel = this.options.maxLevel;\n        if (!isNested) {\n            return {\n                lineWidth: 1,\n                stroke: 'rgba(0,0,0,0.9)',\n                opacity: 0.9,\n            };\n        }\n        else if (depth === 1) {\n            return {\n                lineWidth: 1,\n                stroke: 'black',\n                opacity: depth / maxLevel,\n            };\n        }\n        else {\n            return {\n                lineWidth: 1,\n                stroke: 'rgba(0,0,0,0.3)',\n                opacity: depth / maxLevel,\n            };\n        }\n    };\n    return TreemapLayer;\n}(ViewLayer));\nexport default TreemapLayer;\nregisterPlotType('treemap', TreemapLayer);\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layer.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport squarify from './layout/squarify';\nimport { INTERACTION_MAP } from './interaction';\nimport * as EventParser from './event';\nimport TreemapLabel from './components/label';\nvar PARENT_NODE_OFFSET = 4;\nvar BLOCK_MARGIN = 4;\nvar TreemapLayer = /** @class */ (function (_super) {\n    __extends(TreemapLayer, _super);\n    function TreemapLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'treemap';\n        return _this;\n    }\n    TreemapLayer.getDefaultOptions = function () {\n        return deepMix({}, _super.getDefaultOptions.call(this), {\n            maxLevel: 2,\n            padding: [0, 0, 0, 0],\n            tooltip: {\n                visible: false,\n                showTitle: false,\n                showCrosshairs: false,\n                showMarkers: false,\n                shared: false,\n            },\n            legend: {\n                visible: false,\n            },\n            xAxis: {\n                visible: false,\n            },\n            yAxis: {\n                visible: false,\n            },\n            xField: 'x',\n            yField: 'y',\n            label: {\n                visible: true,\n                adjustPosition: true,\n                style: {\n                    stroke: 'rgba(0,0,0,0)',\n                    lineWidth: 0,\n                    fontSize: 12,\n                },\n            },\n            meta: {\n                x: {\n                    nice: false,\n                },\n                y: {\n                    nice: false,\n                },\n            },\n            interactions: [{ type: 'tooltip' }],\n        });\n    };\n    TreemapLayer.prototype.beforeInit = function () {\n        var _this = this;\n        _super.prototype.beforeInit.call(this);\n        var interactions = this.options.interactions;\n        if (interactions) {\n            each(interactions, function (interaction) {\n                if (interaction.type === 'drilldown') {\n                    _this.isDrilldown = true;\n                    _this.options.maxLevel = 1;\n                }\n            });\n        }\n        var data = this.options.data;\n        var treemapData = this.getTreemapData(data);\n        this.rootData = treemapData;\n    };\n    TreemapLayer.prototype.afterRender = function () {\n        _super.prototype.afterRender.call(this);\n        if (this.options.label && this.options.label.visible) {\n            var label = new TreemapLabel(__assign({ view: this.view, plot: this }, this.options.label));\n            label.render();\n        }\n    };\n    TreemapLayer.prototype.geometryParser = function () {\n        return 'polygon';\n    };\n    TreemapLayer.prototype.getTreemapData = function (data, level) {\n        var viewRange = this.getViewRange();\n        var root = squarify(data, viewRange.x, viewRange.y, viewRange.width, viewRange.height);\n        this.recursive(root, 1);\n        var treemapData = [];\n        this.getAllNodes(root, treemapData, level);\n        treemapData.sort(function (a, b) {\n            return a.depth - b.depth;\n        });\n        this.options.xField = 'x';\n        this.options.yField = 'y';\n        return treemapData;\n    };\n    TreemapLayer.prototype.processData = function () {\n        return this.rootData;\n    };\n    TreemapLayer.prototype.coord = function () {\n        return;\n    };\n    TreemapLayer.prototype.addGeometry = function () {\n        var _this = this;\n        var _a = this.options, data = _a.data, colorField = _a.colorField, color = _a.color;\n        var treemapData = this.getTreemapData(data);\n        this.rootData = treemapData;\n        var isNested = this.isNested(treemapData);\n        this.rect = {\n            type: 'polygon',\n            position: {\n                fields: ['x', 'y'],\n            },\n            color: {\n                fields: [colorField],\n                values: color,\n            },\n            style: {\n                fields: ['depth'],\n                callback: function (d) {\n                    var defaultStyle = _this.adjustStyleByDepth(d, isNested);\n                    return deepMix({}, defaultStyle, _this.options.rectStyle);\n                },\n            },\n            tooltip: {\n                fields: ['name', 'value'],\n            },\n        };\n        if (this.options.tooltip && this.options.tooltip.formatter) {\n            this.rect.tooltip.callback = this.options.tooltip.formatter;\n        }\n        this.setConfig('geometry', this.rect);\n    };\n    TreemapLayer.prototype.applyInteractions = function () {\n        var _this = this;\n        var interactionCfg = this.options.interactions;\n        var interactions = this.view.interactions;\n        each(interactionCfg, function (inter) {\n            var Ctr = INTERACTION_MAP[inter.type];\n            if (Ctr) {\n                var interaction = new Ctr(deepMix({}, {\n                    view: _this.view,\n                    plot: _this,\n                    startEvent: 'polygon:click',\n                }, inter.cfg, Ctr.getInteractionRange(_this.layerBBox, inter.cfg)));\n                interactions[inter.type] = interaction;\n            }\n        });\n    };\n    TreemapLayer.prototype.animation = function () {\n        _super.prototype.animation.call(this);\n        if (this.isDrilldown) {\n            this.rect.animate = false;\n        }\n    };\n    TreemapLayer.prototype.parseEvents = function () {\n        _super.prototype.parseEvents.call(this, EventParser);\n    };\n    TreemapLayer.prototype.recursive = function (rows, depth) {\n        var _this = this;\n        var colorField = this.options.colorField;\n        each(rows, function (r) {\n            each(r.children, function (c) {\n                c.depth = depth;\n                if (depth > 1)\n                    c.parent = r;\n                if (!hasKey(c, colorField)) {\n                    c[colorField] = r[colorField];\n                }\n                c.showLabel = true;\n                var leaf = _this.isLeaf(c);\n                if (!leaf) {\n                    var cliperHeight = Math.abs(c.y1 - c.y0);\n                    var labelHeight = _this.getLabelHeight();\n                    var parentLabelOffset = cliperHeight / 2 > labelHeight ? labelHeight : BLOCK_MARGIN;\n                    c.showLabel = parentLabelOffset === BLOCK_MARGIN ? false : true;\n                    var c_rows = squarify(c, c.x0 + BLOCK_MARGIN, c.y0 + parentLabelOffset, c.x1 - BLOCK_MARGIN, c.y1 - BLOCK_MARGIN);\n                    _this.fillColorField(c_rows, colorField, c[colorField]);\n                    _this.recursive(c_rows, c.depth + 1);\n                }\n            });\n        });\n    };\n    TreemapLayer.prototype.getAllNodes = function (data, nodes, level) {\n        var _this = this;\n        var max = level ? level : this.options.maxLevel;\n        var viewRange = this.getViewRange();\n        each(data, function (d) {\n            if (hasKey(d, 'x0') && d.depth <= max) {\n                nodes.push(__assign(__assign({}, d), { x: [d.x0, d.x1, d.x1, d.x0], y: [viewRange.height - d.y1, viewRange.height - d.y1, viewRange.height - d.y0, viewRange.height - d.y0] }));\n            }\n            if (hasKey(d, 'children')) {\n                _this.getAllNodes(d.children, nodes);\n            }\n        });\n    };\n    TreemapLayer.prototype.fillColorField = function (rows, fieldName, value) {\n        each(rows, function (r) {\n            if (!hasKey(r, fieldName)) {\n                r[fieldName] = value;\n            }\n        });\n    };\n    TreemapLayer.prototype.getLabelHeight = function () {\n        var label = this.options.label;\n        var fontSize = this.getPlotTheme().label.style.fontSize;\n        var size = 0;\n        if (label && label.visible) {\n            var labelStyle = label.style;\n            size = labelStyle && labelStyle.fontSize ? labelStyle.fontSize : fontSize;\n        }\n        return size + PARENT_NODE_OFFSET * 2;\n    };\n    TreemapLayer.prototype.isLeaf = function (data) {\n        return !data.children || data.children.length === 0;\n    };\n    TreemapLayer.prototype.isNested = function (data) {\n        var maxLevel = this.options.maxLevel;\n        if (maxLevel === 1) {\n            return false;\n        }\n        var nested = false;\n        for (var i = 0; i < data.length; i++) {\n            if (data[i].children) {\n                nested = true;\n                break;\n            }\n        }\n        return nested;\n    };\n    TreemapLayer.prototype.adjustStyleByDepth = function (depth, isNested) {\n        var maxLevel = this.options.maxLevel;\n        if (!isNested) {\n            return {\n                lineWidth: 1,\n                stroke: 'rgba(0,0,0,0.9)',\n                opacity: 0.9,\n            };\n        }\n        else if (depth === 1) {\n            return {\n                lineWidth: 1,\n                stroke: 'black',\n                opacity: depth / maxLevel,\n            };\n        }\n        else {\n            return {\n                lineWidth: 1,\n                stroke: 'rgba(0,0,0,0.3)',\n                opacity: depth / maxLevel,\n            };\n        }\n    };\n    return TreemapLayer;\n}(ViewLayer));\nexport default TreemapLayer;\nregisterPlotType('treemap', TreemapLayer);\n//# sourceMappingURL=layer.js.map"]}]}