{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\histogram\\layer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\histogram\\layer.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { clone, sortBy, valuesOfKey, getRange, each, hasKey } from '@antv/util';\r\nimport { registerPlotType } from '../../base/global';\r\nimport { sturges } from '../../util/math';\r\nimport Column from '../column/layer';\r\nvar HistogramLayer = (function (_super) {\r\n    __extends(HistogramLayer, _super);\r\n    function HistogramLayer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = 'histogram';\r\n        return _this;\r\n    }\r\n    HistogramLayer.prototype.init = function () {\r\n        this.options.xField = 'range';\r\n        this.options.yField = 'count';\r\n        _super.prototype.init.call(this);\r\n    };\r\n    HistogramLayer.prototype.processData = function (originData) {\r\n        var _this = this;\r\n        var _a = this.options, binField = _a.binField, binWidth = _a.binWidth, binNumber = _a.binNumber;\r\n        var originData_copy = clone(originData);\r\n        sortBy(originData_copy, binField);\r\n        var values = valuesOfKey(originData_copy, binField);\r\n        var range = getRange(values);\r\n        var rangeWidth = range.max - range.min;\r\n        var _binWidth = binWidth;\r\n        if (!binWidth && binNumber) {\r\n            _binWidth = rangeWidth / binNumber;\r\n        }\r\n        if (!binWidth && !binNumber) {\r\n            var _defaultBinNumber = sturges(values);\r\n            _binWidth = rangeWidth / _defaultBinNumber;\r\n        }\r\n        var bins = {};\r\n        each(originData_copy, function (data) {\r\n            var value = data[binField];\r\n            var bin = _this.getBin(value, _binWidth);\r\n            var binName = bin[0] + \"-\" + bin[1];\r\n            if (!hasKey(bins, binName)) {\r\n                bins[binName] = { name: binName, range: bin, count: 0, data: [] };\r\n            }\r\n            bins[binName].data.push(data);\r\n            bins[binName].count += 1;\r\n        });\r\n        var plotData = [];\r\n        each(bins, function (bin) {\r\n            plotData.push(bin);\r\n        });\r\n        return plotData;\r\n    };\r\n    HistogramLayer.prototype.scale = function () {\r\n        _super.prototype.scale.call(this);\r\n        var range = this.config.scales.range;\r\n        range.nice = false;\r\n        range.type = 'linear';\r\n    };\r\n    HistogramLayer.prototype.getBin = function (value, binWidth) {\r\n        var index = Math.floor(value / binWidth);\r\n        return [binWidth * index, binWidth * (index + 1)];\r\n    };\r\n    return HistogramLayer;\r\n}(Column));\r\nexport default HistogramLayer;\r\nregisterPlotType('histogram', HistogramLayer);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\histogram\\layer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\histogram\\layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { clone, sortBy, valuesOfKey, getRange, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { sturges } from '../../util/math';\nimport Column from '../column/layer';\nvar HistogramLayer = /** @class */ (function (_super) {\n    __extends(HistogramLayer, _super);\n    function HistogramLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'histogram';\n        return _this;\n    }\n    HistogramLayer.prototype.init = function () {\n        this.options.xField = 'range';\n        this.options.yField = 'count';\n        _super.prototype.init.call(this);\n    };\n    HistogramLayer.prototype.processData = function (originData) {\n        var _this = this;\n        var _a = this.options, binField = _a.binField, binWidth = _a.binWidth, binNumber = _a.binNumber;\n        var originData_copy = clone(originData);\n        // 根据binField value对源数据进行排序\n        sortBy(originData_copy, binField);\n        // 获取源数据binField values的range\n        var values = valuesOfKey(originData_copy, binField);\n        var range = getRange(values);\n        var rangeWidth = range.max - range.min;\n        // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n        var _binWidth = binWidth;\n        if (!binWidth && binNumber) {\n            _binWidth = rangeWidth / binNumber;\n        }\n        // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n        if (!binWidth && !binNumber) {\n            var _defaultBinNumber = sturges(values);\n            _binWidth = rangeWidth / _defaultBinNumber;\n        }\n        var bins = {};\n        each(originData_copy, function (data) {\n            var value = data[binField];\n            var bin = _this.getBin(value, _binWidth);\n            var binName = bin[0] + \"-\" + bin[1];\n            if (!hasKey(bins, binName)) {\n                bins[binName] = { name: binName, range: bin, count: 0, data: [] };\n            }\n            bins[binName].data.push(data);\n            bins[binName].count += 1;\n        });\n        // 将分箱数据转换为plotData\n        var plotData = [];\n        each(bins, function (bin) {\n            plotData.push(bin);\n        });\n        return plotData;\n    };\n    HistogramLayer.prototype.scale = function () {\n        _super.prototype.scale.call(this);\n        // fixme: 类型定义\n        var range = this.config.scales.range;\n        range.nice = false;\n        range.type = 'linear';\n    };\n    HistogramLayer.prototype.getBin = function (value, binWidth) {\n        var index = Math.floor(value / binWidth);\n        return [binWidth * index, binWidth * (index + 1)];\n    };\n    return HistogramLayer;\n}(Column));\nexport default HistogramLayer;\nregisterPlotType('histogram', HistogramLayer);\n//# sourceMappingURL=layer.js.map"]}]}