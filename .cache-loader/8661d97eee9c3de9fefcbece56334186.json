{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/fill-path-by-diff.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/fill-path-by-diff.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var isEqual = require('./is-segment-equal');\nfunction getMinDiff(del, add, modify) {\n    var type = null;\n    var min = modify;\n    if (add < min) {\n        min = add;\n        type = 'add';\n    }\n    if (del < min) {\n        min = del;\n        type = 'del';\n    }\n    return {\n        type: type,\n        min: min\n    };\n}\nvar levenshteinDistance = function levenshteinDistance(source, target) {\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var sourceSegment = void 0, targetSegment = void 0;\n    var temp = 0;\n    if (sourceLen === 0 || targetLen === 0) {\n        return null;\n    }\n    var dist = [];\n    for (var i = 0; i <= sourceLen; i++) {\n        dist[i] = [];\n        dist[i][0] = { min: i };\n    }\n    for (var j = 0; j <= targetLen; j++) {\n        dist[0][j] = { min: j };\n    }\n    for (var _i = 1; _i <= sourceLen; _i++) {\n        sourceSegment = source[_i - 1];\n        for (var _j = 1; _j <= targetLen; _j++) {\n            targetSegment = target[_j - 1];\n            if (isEqual(sourceSegment, targetSegment)) {\n                temp = 0;\n            }\n            else {\n                temp = 1;\n            }\n            var del = dist[_i - 1][_j].min + 1;\n            var add = dist[_i][_j - 1].min + 1;\n            var modify = dist[_i - 1][_j - 1].min + temp;\n            dist[_i][_j] = getMinDiff(del, add, modify);\n        }\n    }\n    return dist;\n};\nmodule.exports = function fillPathByDiff(source, target) {\n    var diffMatrix = levenshteinDistance(source, target);\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var changes = [];\n    var index = 1;\n    var minPos = 1;\n    if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n        for (var i = 1; i <= sourceLen; i++) {\n            var min = diffMatrix[i][i].min;\n            minPos = i;\n            for (var j = index; j <= targetLen; j++) {\n                if (diffMatrix[i][j].min < min) {\n                    min = diffMatrix[i][j].min;\n                    minPos = j;\n                }\n            }\n            index = minPos;\n            if (diffMatrix[i][index].type) {\n                changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n            }\n        }\n        for (var _i2 = changes.length - 1; _i2 >= 0; _i2--) {\n            index = changes[_i2].index;\n            if (changes[_i2].type === 'add') {\n                source.splice(index, 0, [].concat(source[index]));\n            }\n            else {\n                source.splice(index, 1);\n            }\n        }\n    }\n    sourceLen = source.length;\n    if (sourceLen < targetLen) {\n        for (var _i3 = 0; _i3 < targetLen - sourceLen; _i3++) {\n            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n            }\n            else {\n                source.push(source[sourceLen - 1]);\n            }\n        }\n    }\n    return source;\n};\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/fill-path-by-diff.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/fill-path-by-diff.js"],"names":[],"mappings":"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","sourcesContent":["var isEqual = require('./is-segment-equal');\n\nfunction getMinDiff(del, add, modify) {\n  var type = null;\n  var min = modify;\n  if (add < min) {\n    min = add;\n    type = 'add';\n  }\n  if (del < min) {\n    min = del;\n    type = 'del';\n  }\n  return {\n    type: type,\n    min: min\n  };\n}\n\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nvar levenshteinDistance = function levenshteinDistance(source, target) {\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var sourceSegment = void 0,\n      targetSegment = void 0;\n  var temp = 0;\n  if (sourceLen === 0 || targetLen === 0) {\n    return null;\n  }\n  var dist = [];\n  for (var i = 0; i <= sourceLen; i++) {\n    dist[i] = [];\n    dist[i][0] = { min: i };\n  }\n  for (var j = 0; j <= targetLen; j++) {\n    dist[0][j] = { min: j };\n  }\n\n  for (var _i = 1; _i <= sourceLen; _i++) {\n    sourceSegment = source[_i - 1];\n    for (var _j = 1; _j <= targetLen; _j++) {\n      targetSegment = target[_j - 1];\n      if (isEqual(sourceSegment, targetSegment)) {\n        temp = 0;\n      } else {\n        temp = 1;\n      }\n      var del = dist[_i - 1][_j].min + 1;\n      var add = dist[_i][_j - 1].min + 1;\n      var modify = dist[_i - 1][_j - 1].min + temp;\n      dist[_i][_j] = getMinDiff(del, add, modify);\n    }\n  }\n  return dist;\n};\n\nmodule.exports = function fillPathByDiff(source, target) {\n  var diffMatrix = levenshteinDistance(source, target);\n  var sourceLen = source.length;\n  var targetLen = target.length;\n  var changes = [];\n  var index = 1;\n  var minPos = 1;\n  // 如果source和target不是完全不相等\n  if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n    // 获取从source到target所需改动\n    for (var i = 1; i <= sourceLen; i++) {\n      var min = diffMatrix[i][i].min;\n      minPos = i;\n      for (var j = index; j <= targetLen; j++) {\n        if (diffMatrix[i][j].min < min) {\n          min = diffMatrix[i][j].min;\n          minPos = j;\n        }\n      }\n      index = minPos;\n      if (diffMatrix[i][index].type) {\n        changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n      }\n    }\n    // 对source进行增删path\n    for (var _i2 = changes.length - 1; _i2 >= 0; _i2--) {\n      index = changes[_i2].index;\n      if (changes[_i2].type === 'add') {\n        source.splice(index, 0, [].concat(source[index]));\n      } else {\n        source.splice(index, 1);\n      }\n    }\n  }\n\n  // source尾部补齐\n  sourceLen = source.length;\n  if (sourceLen < targetLen) {\n    for (var _i3 = 0; _i3 < targetLen - sourceLen; _i3++) {\n      if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n        source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n      } else {\n        source.push(source[sourceLen - 1]);\n      }\n    }\n  }\n  return source;\n};"]}]}