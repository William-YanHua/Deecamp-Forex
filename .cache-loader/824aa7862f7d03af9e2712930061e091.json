{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/path-util/esm/fill-path-by-diff.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/path-util/esm/fill-path-by-diff.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import isEqual from '@antv/util/lib/is-equal';\nfunction getMinDiff(del, add, modify) {\n    var type = null;\n    var min = modify;\n    if (add < min) {\n        min = add;\n        type = 'add';\n    }\n    if (del < min) {\n        min = del;\n        type = 'del';\n    }\n    return {\n        type: type,\n        min: min,\n    };\n}\nvar levenshteinDistance = function (source, target) {\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var sourceSegment, targetSegment;\n    var temp = 0;\n    if (sourceLen === 0 || targetLen === 0) {\n        return null;\n    }\n    var dist = [];\n    for (var i = 0; i <= sourceLen; i++) {\n        dist[i] = [];\n        dist[i][0] = { min: i };\n    }\n    for (var j = 0; j <= targetLen; j++) {\n        dist[0][j] = { min: j };\n    }\n    for (var i = 1; i <= sourceLen; i++) {\n        sourceSegment = source[i - 1];\n        for (var j = 1; j <= targetLen; j++) {\n            targetSegment = target[j - 1];\n            if (isEqual(sourceSegment, targetSegment)) {\n                temp = 0;\n            }\n            else {\n                temp = 1;\n            }\n            var del = dist[i - 1][j].min + 1;\n            var add = dist[i][j - 1].min + 1;\n            var modify = dist[i - 1][j - 1].min + temp;\n            dist[i][j] = getMinDiff(del, add, modify);\n        }\n    }\n    return dist;\n};\nexport default function fillPathByDiff(source, target) {\n    var diffMatrix = levenshteinDistance(source, target);\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var changes = [];\n    var index = 1;\n    var minPos = 1;\n    if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n        for (var i = 1; i <= sourceLen; i++) {\n            var min = diffMatrix[i][i].min;\n            minPos = i;\n            for (var j = index; j <= targetLen; j++) {\n                if (diffMatrix[i][j].min < min) {\n                    min = diffMatrix[i][j].min;\n                    minPos = j;\n                }\n            }\n            index = minPos;\n            if (diffMatrix[i][index].type) {\n                changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n            }\n        }\n        for (var i = changes.length - 1; i >= 0; i--) {\n            index = changes[i].index;\n            if (changes[i].type === 'add') {\n                source.splice(index, 0, [].concat(source[index]));\n            }\n            else {\n                source.splice(index, 1);\n            }\n        }\n    }\n    sourceLen = source.length;\n    if (sourceLen < targetLen) {\n        for (var i = 0; i < (targetLen - sourceLen); i++) {\n            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n            }\n            else {\n                source.push(source[sourceLen - 1]);\n            }\n        }\n    }\n    return source;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/path-util/esm/fill-path-by-diff.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/path-util/esm/fill-path-by-diff.js"],"names":[],"mappings":"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","sourcesContent":["import isEqual from '@antv/util/lib/is-equal';\nfunction getMinDiff(del, add, modify) {\n    var type = null;\n    var min = modify;\n    if (add < min) {\n        min = add;\n        type = 'add';\n    }\n    if (del < min) {\n        min = del;\n        type = 'del';\n    }\n    return {\n        type: type,\n        min: min,\n    };\n}\n/*\n * https://en.wikipedia.org/wiki/Levenshtein_distance\n * 计算两条path的编辑距离\n */\nvar levenshteinDistance = function (source, target) {\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var sourceSegment, targetSegment;\n    var temp = 0;\n    if (sourceLen === 0 || targetLen === 0) {\n        return null;\n    }\n    var dist = [];\n    for (var i = 0; i <= sourceLen; i++) {\n        dist[i] = [];\n        dist[i][0] = { min: i };\n    }\n    for (var j = 0; j <= targetLen; j++) {\n        dist[0][j] = { min: j };\n    }\n    for (var i = 1; i <= sourceLen; i++) {\n        sourceSegment = source[i - 1];\n        for (var j = 1; j <= targetLen; j++) {\n            targetSegment = target[j - 1];\n            if (isEqual(sourceSegment, targetSegment)) {\n                temp = 0;\n            }\n            else {\n                temp = 1;\n            }\n            var del = dist[i - 1][j].min + 1;\n            var add = dist[i][j - 1].min + 1;\n            var modify = dist[i - 1][j - 1].min + temp;\n            dist[i][j] = getMinDiff(del, add, modify);\n        }\n    }\n    return dist;\n};\nexport default function fillPathByDiff(source, target) {\n    var diffMatrix = levenshteinDistance(source, target);\n    var sourceLen = source.length;\n    var targetLen = target.length;\n    var changes = [];\n    var index = 1;\n    var minPos = 1;\n    // 如果source和target不是完全不相等\n    // @ts-ignore\n    if (diffMatrix[sourceLen][targetLen] !== sourceLen) {\n        // 获取从source到target所需改动\n        for (var i = 1; i <= sourceLen; i++) {\n            var min = diffMatrix[i][i].min;\n            minPos = i;\n            for (var j = index; j <= targetLen; j++) {\n                if (diffMatrix[i][j].min < min) {\n                    min = diffMatrix[i][j].min;\n                    minPos = j;\n                }\n            }\n            index = minPos;\n            if (diffMatrix[i][index].type) {\n                changes.push({ index: i - 1, type: diffMatrix[i][index].type });\n            }\n        }\n        // 对source进行增删path\n        for (var i = changes.length - 1; i >= 0; i--) {\n            index = changes[i].index;\n            if (changes[i].type === 'add') {\n                // @ts-ignore\n                source.splice(index, 0, [].concat(source[index]));\n            }\n            else {\n                // @ts-ignore\n                source.splice(index, 1);\n            }\n        }\n    }\n    // source尾部补齐\n    sourceLen = source.length;\n    if (sourceLen < targetLen) {\n        for (var i = 0; i < (targetLen - sourceLen); i++) {\n            if (source[sourceLen - 1][0] === 'z' || source[sourceLen - 1][0] === 'Z') {\n                // @ts-ignore\n                source.splice(sourceLen - 2, 0, source[sourceLen - 2]);\n            }\n            else {\n                // @ts-ignore\n                source.push(source[sourceLen - 1]);\n            }\n        }\n    }\n    return source;\n}\n//# sourceMappingURL=fill-path-by-diff.js.map"]}]}