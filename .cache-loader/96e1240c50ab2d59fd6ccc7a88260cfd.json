{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\lib\\chart\\controller\\axis.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\lib\\chart\\controller\\axis.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var Util = require('../../util');\r\nvar _require = require('@antv/component/lib'), Axis = _require.Axis;\r\nvar vec2 = Util.MatrixUtil.vec2;\r\nfunction formatTicks(ticks) {\r\n    var tmp = [];\r\n    if (ticks.length > 0) {\r\n        tmp = ticks.slice(0);\r\n        var first = tmp[0];\r\n        var last = tmp[tmp.length - 1];\r\n        if (first.value !== 0) {\r\n            tmp.unshift({\r\n                value: 0\r\n            });\r\n        }\r\n        if (last.value !== 1) {\r\n            tmp.push({\r\n                value: 1\r\n            });\r\n        }\r\n    }\r\n    return tmp;\r\n}\r\nfunction fillAxisTicks(ticks, isLinear, gridCentering) {\r\n    var result = [];\r\n    if (ticks.length < 1)\r\n        return result;\r\n    if (ticks.length >= 2 && isLinear && gridCentering) {\r\n        result.push({\r\n            text: '',\r\n            tickValue: '',\r\n            value: 0\r\n        });\r\n    }\r\n    if (ticks[0].value !== 0) {\r\n        result.push({\r\n            text: '',\r\n            tickValue: '',\r\n            value: 0\r\n        });\r\n    }\r\n    result = result.concat(ticks);\r\n    if (result[result.length - 1].value !== 1) {\r\n        result.push({\r\n            text: '',\r\n            tickValue: '',\r\n            value: 1\r\n        });\r\n    }\r\n    return result;\r\n}\r\nvar AxisController = function () {\r\n    function AxisController(cfg) {\r\n        this.visible = true;\r\n        this.canvas = null;\r\n        this.container = null;\r\n        this.coord = null;\r\n        this.options = null;\r\n        this.axes = [];\r\n        Util.mix(this, cfg);\r\n    }\r\n    var _proto = AxisController.prototype;\r\n    _proto._isHide = function _isHide(field) {\r\n        var options = this.options;\r\n        if (options && options[field] === false) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    _proto._getMiddleValue = function _getMiddleValue(curValue, ticks, index, isLinear) {\r\n        if (curValue === 0 && !isLinear) {\r\n            return 0;\r\n        }\r\n        if (curValue === 1) {\r\n            return 1;\r\n        }\r\n        var nextValue = ticks[index + 1].value;\r\n        if (!isLinear && nextValue === 1) {\r\n            return 1;\r\n        }\r\n        return (curValue + nextValue) / 2;\r\n    };\r\n    _proto._getLineRange = function _getLineRange(coord, scale, dimType, index) {\r\n        var start;\r\n        var end;\r\n        var isVertical;\r\n        var field = scale.field;\r\n        var options = this.options;\r\n        var position = '';\r\n        if (options[field] && options[field].position) {\r\n            position = options[field].position;\r\n        }\r\n        if (dimType === 'x') {\r\n            start = {\r\n                x: 0,\r\n                y: position === 'top' ? 1 : 0\r\n            };\r\n            end = {\r\n                x: 1,\r\n                y: position === 'top' ? 1 : 0\r\n            };\r\n            isVertical = false;\r\n        }\r\n        else {\r\n            if (index) {\r\n                start = {\r\n                    x: position === 'left' ? 0 : 1,\r\n                    y: 0\r\n                };\r\n                end = {\r\n                    x: position === 'left' ? 0 : 1,\r\n                    y: 1\r\n                };\r\n            }\r\n            else {\r\n                start = {\r\n                    x: position === 'right' ? 1 : 0,\r\n                    y: 0\r\n                };\r\n                end = {\r\n                    x: position === 'right' ? 1 : 0,\r\n                    y: 1\r\n                };\r\n            }\r\n            isVertical = true;\r\n        }\r\n        start = coord.convert(start);\r\n        end = coord.convert(end);\r\n        return {\r\n            start: start,\r\n            end: end,\r\n            isVertical: isVertical\r\n        };\r\n    };\r\n    _proto._getLineCfg = function _getLineCfg(coord, scale, dimType, index) {\r\n        var factor;\r\n        var range = this._getLineRange(coord, scale, dimType, index);\r\n        var isVertical = range.isVertical;\r\n        var start = range.start;\r\n        var end = range.end;\r\n        var center = coord.center;\r\n        if (coord.isTransposed) {\r\n            isVertical = !isVertical;\r\n        }\r\n        if (isVertical && start.x > center.x || !isVertical && start.y > center.y) {\r\n            factor = 1;\r\n        }\r\n        else {\r\n            factor = -1;\r\n        }\r\n        return {\r\n            isVertical: isVertical,\r\n            factor: factor,\r\n            start: start,\r\n            end: end\r\n        };\r\n    };\r\n    _proto._getCircleCfg = function _getCircleCfg(coord) {\r\n        var circleCfg = {};\r\n        var rangeX = coord.x;\r\n        var rangeY = coord.y;\r\n        var isReflectY = rangeY.start > rangeY.end;\r\n        var start;\r\n        if (coord.isTransposed) {\r\n            start = {\r\n                x: isReflectY ? 0 : 1,\r\n                y: 0\r\n            };\r\n        }\r\n        else {\r\n            start = {\r\n                x: 0,\r\n                y: isReflectY ? 0 : 1\r\n            };\r\n        }\r\n        start = coord.convert(start);\r\n        var center = coord.circleCentre;\r\n        var startVector = [start.x - center.x, start.y - center.y];\r\n        var normalVector = [1, 0];\r\n        var startAngle;\r\n        if (start.y > center.y) {\r\n            startAngle = vec2.angle(startVector, normalVector);\r\n        }\r\n        else {\r\n            startAngle = vec2.angle(startVector, normalVector) * -1;\r\n        }\r\n        var endAngle = startAngle + (rangeX.end - rangeX.start);\r\n        circleCfg.startAngle = startAngle;\r\n        circleCfg.endAngle = endAngle;\r\n        circleCfg.center = center;\r\n        circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));\r\n        circleCfg.inner = coord.innerRadius || 0;\r\n        return circleCfg;\r\n    };\r\n    _proto._getRadiusCfg = function _getRadiusCfg(coord) {\r\n        var startAngle = coord.x.start;\r\n        var factor = startAngle < 0 ? -1 : 1;\r\n        var start;\r\n        var end;\r\n        if (coord.isTransposed) {\r\n            start = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n            end = {\r\n                x: 1,\r\n                y: 0\r\n            };\r\n        }\r\n        else {\r\n            start = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n            end = {\r\n                x: 0,\r\n                y: 1\r\n            };\r\n        }\r\n        return {\r\n            factor: factor,\r\n            start: coord.convert(start),\r\n            end: coord.convert(end)\r\n        };\r\n    };\r\n    _proto._getAxisPosition = function _getAxisPosition(coord, dimType, index, field) {\r\n        var position = '';\r\n        var options = this.options;\r\n        if (options[field] && options[field].position) {\r\n            position = options[field].position;\r\n        }\r\n        else {\r\n            var coordType = coord.type;\r\n            if (coord.isRect) {\r\n                if (dimType === 'x') {\r\n                    position = 'bottom';\r\n                }\r\n                else if (dimType === 'y') {\r\n                    if (index) {\r\n                        position = 'right';\r\n                    }\r\n                    else {\r\n                        position = 'left';\r\n                    }\r\n                }\r\n            }\r\n            else if (coordType === 'helix') {\r\n                position = 'helix';\r\n            }\r\n            else if (dimType === 'x') {\r\n                position = coord.isTransposed ? 'radius' : 'circle';\r\n            }\r\n            else {\r\n                position = coord.isTransposed ? 'circle' : 'radius';\r\n            }\r\n        }\r\n        return position;\r\n    };\r\n    _proto._getAxisDefaultCfg = function _getAxisDefaultCfg(coord, scale, type, position) {\r\n        var self = this;\r\n        var viewTheme = self.viewTheme;\r\n        var cfg = {};\r\n        var options = self.options;\r\n        var field = scale.field;\r\n        cfg = Util.deepMix({}, viewTheme.axis[position], cfg, options[field]);\r\n        cfg.viewTheme = viewTheme;\r\n        if (cfg.title) {\r\n            var title = Util.isPlainObject(cfg.title) ? cfg.title : {};\r\n            title.text = title.text || scale.alias || field;\r\n            Util.deepMix(cfg, {\r\n                title: title\r\n            });\r\n        }\r\n        cfg.ticks = scale.getTicks();\r\n        if (coord.isPolar && !scale.isCategory) {\r\n            if (type === 'x' && Math.abs(coord.endAngle - coord.startAngle) === Math.PI * 2) {\r\n                cfg.ticks.pop();\r\n            }\r\n        }\r\n        cfg.coord = coord;\r\n        if (cfg.label && Util.isNil(cfg.label.autoRotate)) {\r\n            cfg.label.autoRotate = true;\r\n        }\r\n        if (options.hasOwnProperty('xField') && options.xField.hasOwnProperty('grid')) {\r\n            if (cfg.position === 'left') {\r\n                Util.deepMix(cfg, options.xField);\r\n            }\r\n        }\r\n        return cfg;\r\n    };\r\n    _proto._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType, index, viewId) {\r\n        if (index === void 0) {\r\n            index = '';\r\n        }\r\n        var self = this;\r\n        var position = self._getAxisPosition(coord, dimType, index, scale.field);\r\n        var cfg = self._getAxisDefaultCfg(coord, scale, dimType, position);\r\n        if (!Util.isEmpty(cfg.grid) && verticalScale) {\r\n            var gridPoints = [];\r\n            var tickValues = [];\r\n            var verticalTicks = formatTicks(verticalScale.getTicks());\r\n            if (verticalTicks.length) {\r\n                var ticks = fillAxisTicks(cfg.ticks, scale.isLinear, cfg.grid.align === 'center');\r\n                Util.each(ticks, function (tick, idx) {\r\n                    tickValues.push(tick.tickValue);\r\n                    var subPoints = [];\r\n                    var value = tick.value;\r\n                    if (cfg.grid.align === 'center') {\r\n                        value = self._getMiddleValue(value, ticks, idx, scale.isLinear);\r\n                    }\r\n                    if (!Util.isNil(value)) {\r\n                        var rangeX = coord.x;\r\n                        var rangeY = coord.y;\r\n                        Util.each(verticalTicks, function (verticalTick) {\r\n                            var x = dimType === 'x' ? value : verticalTick.value;\r\n                            var y = dimType === 'x' ? verticalTick.value : value;\r\n                            var point = coord.convert({\r\n                                x: x,\r\n                                y: y\r\n                            });\r\n                            if (coord.isPolar) {\r\n                                var center = coord.circleCentre;\r\n                                if (rangeY.start > rangeY.end) {\r\n                                    y = 1 - y;\r\n                                }\r\n                                point.flag = rangeX.start > rangeX.end ? 0 : 1;\r\n                                point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));\r\n                            }\r\n                            subPoints.push(point);\r\n                        });\r\n                        gridPoints.push({\r\n                            _id: viewId + '-' + dimType + index + '-grid-' + tick.tickValue,\r\n                            points: subPoints\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            cfg.grid.items = gridPoints;\r\n            cfg.grid.tickValues = tickValues;\r\n        }\r\n        cfg.type = scale.type;\r\n        return cfg;\r\n    };\r\n    _proto._getHelixCfg = function _getHelixCfg(coord) {\r\n        var helixCfg = {};\r\n        var a = coord.a;\r\n        var startAngle = coord.startAngle;\r\n        var endAngle = coord.endAngle;\r\n        var index = 100;\r\n        var crp = [];\r\n        for (var i = 0; i <= index; i++) {\r\n            var point = coord.convert({\r\n                x: i / 100,\r\n                y: 0\r\n            });\r\n            crp.push(point.x);\r\n            crp.push(point.y);\r\n        }\r\n        var axisStart = coord.convert({\r\n            x: 0,\r\n            y: 0\r\n        });\r\n        helixCfg.a = a;\r\n        helixCfg.startAngle = startAngle;\r\n        helixCfg.endAngle = endAngle;\r\n        helixCfg.crp = crp;\r\n        helixCfg.axisStart = axisStart;\r\n        helixCfg.center = coord.center;\r\n        helixCfg.inner = coord.y.start;\r\n        return helixCfg;\r\n    };\r\n    _proto._drawAxis = function _drawAxis(coord, scale, verticalScale, dimType, viewId, xAxis, index) {\r\n        var container = this.container;\r\n        var canvas = this.canvas;\r\n        var C;\r\n        var appendCfg;\r\n        if (coord.type === 'cartesian') {\r\n            C = Axis.Line;\r\n            appendCfg = this._getLineCfg(coord, scale, dimType, index);\r\n        }\r\n        else if (coord.type === 'helix' && dimType === 'x') {\r\n            C = Axis.Helix;\r\n            appendCfg = this._getHelixCfg(coord);\r\n        }\r\n        else if (dimType === 'x') {\r\n            C = Axis.Circle;\r\n            appendCfg = this._getCircleCfg(coord);\r\n        }\r\n        else {\r\n            C = Axis.Line;\r\n            appendCfg = this._getRadiusCfg(coord);\r\n        }\r\n        var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index, viewId);\r\n        cfg = Util.mix({}, cfg, appendCfg);\r\n        if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {\r\n            cfg.circle = xAxis;\r\n        }\r\n        cfg._id = viewId + '-' + dimType;\r\n        if (!Util.isNil(index)) {\r\n            cfg._id = viewId + '-' + dimType + index;\r\n        }\r\n        Util.mix(cfg, {\r\n            canvas: canvas,\r\n            group: container\r\n        });\r\n        var axis = new C(cfg);\r\n        axis.render();\r\n        this.axes.push(axis);\r\n        return axis;\r\n    };\r\n    _proto.createAxis = function createAxis(xScale, yScales, viewId) {\r\n        var self = this;\r\n        var coord = this.coord;\r\n        var coordType = coord.type;\r\n        if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {\r\n            var xAxis;\r\n            if (xScale && !self._isHide(xScale.field)) {\r\n                xAxis = self._drawAxis(coord, xScale, yScales[0], 'x', viewId);\r\n            }\r\n            if (!Util.isEmpty(yScales) && coordType !== 'helix') {\r\n                Util.each(yScales, function (yScale, index) {\r\n                    if (!self._isHide(yScale.field)) {\r\n                        self._drawAxis(coord, yScale, xScale, 'y', viewId, xAxis, index);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n    _proto.changeVisible = function changeVisible(visible) {\r\n        var axes = this.axes;\r\n        Util.each(axes, function (axis) {\r\n            axis.set('visible', visible);\r\n        });\r\n    };\r\n    _proto.clear = function clear() {\r\n        var self = this;\r\n        var axes = self.axes;\r\n        Util.each(axes, function (axis) {\r\n            axis.clear();\r\n        });\r\n        self.axes = [];\r\n    };\r\n    return AxisController;\r\n}();\r\nmodule.exports = AxisController;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\lib\\chart\\controller\\axis.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\lib\\chart\\controller\\axis.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview The controller of axis\n * @author sima.zhang\n */\nvar Util = require('../../util');\n\nvar _require = require('@antv/component/lib'),\n    Axis = _require.Axis;\n\nvar vec2 = Util.MatrixUtil.vec2;\n\nfunction formatTicks(ticks) {\n  var tmp = [];\n\n  if (ticks.length > 0) {\n    tmp = ticks.slice(0);\n    var first = tmp[0];\n    var last = tmp[tmp.length - 1];\n\n    if (first.value !== 0) {\n      tmp.unshift({\n        value: 0\n      });\n    }\n\n    if (last.value !== 1) {\n      tmp.push({\n        value: 1\n      });\n    }\n  }\n\n  return tmp;\n}\n\nfunction fillAxisTicks(ticks, isLinear, gridCentering) {\n  var result = [];\n  if (ticks.length < 1) return result;\n\n  if (ticks.length >= 2 && isLinear && gridCentering) {\n    result.push({\n      text: '',\n      tickValue: '',\n      value: 0\n    });\n  }\n\n  if (ticks[0].value !== 0) {\n    result.push({\n      text: '',\n      tickValue: '',\n      value: 0\n    });\n  }\n\n  result = result.concat(ticks);\n\n  if (result[result.length - 1].value !== 1) {\n    result.push({\n      text: '',\n      tickValue: '',\n      value: 1\n    });\n  }\n\n  return result;\n}\n\nvar AxisController =\n/*#__PURE__*/\nfunction () {\n  function AxisController(cfg) {\n    this.visible = true;\n    this.canvas = null;\n    this.container = null;\n    this.coord = null;\n    this.options = null;\n    this.axes = [];\n    Util.mix(this, cfg);\n  }\n\n  var _proto = AxisController.prototype;\n\n  _proto._isHide = function _isHide(field) {\n    // 对应的坐标轴是否隐藏\n    var options = this.options;\n\n    if (options && options[field] === false) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _proto._getMiddleValue = function _getMiddleValue(curValue, ticks, index, isLinear) {\n    if (curValue === 0 && !isLinear) {\n      return 0;\n    }\n\n    if (curValue === 1) {\n      return 1;\n    }\n\n    var nextValue = ticks[index + 1].value;\n\n    if (!isLinear && nextValue === 1) {\n      return 1;\n    }\n\n    return (curValue + nextValue) / 2;\n  };\n\n  _proto._getLineRange = function _getLineRange(coord, scale, dimType, index) {\n    var start;\n    var end;\n    var isVertical;\n    var field = scale.field;\n    var options = this.options;\n    var position = '';\n\n    if (options[field] && options[field].position) {\n      position = options[field].position;\n    }\n\n    if (dimType === 'x') {\n      // x轴的坐标轴,底部的横坐标\n      start = {\n        x: 0,\n        y: position === 'top' ? 1 : 0\n      };\n      end = {\n        x: 1,\n        y: position === 'top' ? 1 : 0\n      };\n      isVertical = false;\n    } else {\n      // y轴坐标轴\n      if (index) {\n        // 多轴的情况\n        start = {\n          x: position === 'left' ? 0 : 1,\n          y: 0\n        };\n        end = {\n          x: position === 'left' ? 0 : 1,\n          y: 1\n        };\n      } else {\n        // 单个y轴，或者第一个y轴\n        start = {\n          x: position === 'right' ? 1 : 0,\n          y: 0\n        };\n        end = {\n          x: position === 'right' ? 1 : 0,\n          y: 1\n        };\n      }\n\n      isVertical = true;\n    }\n\n    start = coord.convert(start);\n    end = coord.convert(end);\n    return {\n      start: start,\n      end: end,\n      isVertical: isVertical\n    };\n  };\n\n  _proto._getLineCfg = function _getLineCfg(coord, scale, dimType, index) {\n    var factor;\n\n    var range = this._getLineRange(coord, scale, dimType, index);\n\n    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标\n\n    var start = range.start;\n    var end = range.end;\n    var center = coord.center;\n\n    if (coord.isTransposed) {\n      isVertical = !isVertical;\n    }\n\n    if (isVertical && start.x > center.x || !isVertical && start.y > center.y) {\n      factor = 1;\n    } else {\n      factor = -1;\n    }\n\n    return {\n      isVertical: isVertical,\n      factor: factor,\n      start: start,\n      end: end\n    };\n  }; // 获取圆弧坐标轴配置项信息\n\n\n  _proto._getCircleCfg = function _getCircleCfg(coord) {\n    var circleCfg = {};\n    var rangeX = coord.x;\n    var rangeY = coord.y;\n    var isReflectY = rangeY.start > rangeY.end;\n    var start;\n\n    if (coord.isTransposed) {\n      start = {\n        x: isReflectY ? 0 : 1,\n        y: 0\n      };\n    } else {\n      start = {\n        x: 0,\n        y: isReflectY ? 0 : 1\n      };\n    }\n\n    start = coord.convert(start);\n    var center = coord.circleCentre;\n    var startVector = [start.x - center.x, start.y - center.y];\n    var normalVector = [1, 0];\n    var startAngle;\n\n    if (start.y > center.y) {\n      startAngle = vec2.angle(startVector, normalVector);\n    } else {\n      startAngle = vec2.angle(startVector, normalVector) * -1;\n    }\n\n    var endAngle = startAngle + (rangeX.end - rangeX.start);\n    circleCfg.startAngle = startAngle;\n    circleCfg.endAngle = endAngle;\n    circleCfg.center = center;\n    circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));\n    circleCfg.inner = coord.innerRadius || 0;\n    return circleCfg;\n  };\n\n  _proto._getRadiusCfg = function _getRadiusCfg(coord) {\n    var startAngle = coord.x.start;\n    var factor = startAngle < 0 ? -1 : 1;\n    var start;\n    var end;\n\n    if (coord.isTransposed) {\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 1,\n        y: 0\n      };\n    } else {\n      start = {\n        x: 0,\n        y: 0\n      };\n      end = {\n        x: 0,\n        y: 1\n      };\n    }\n\n    return {\n      factor: factor,\n      start: coord.convert(start),\n      end: coord.convert(end)\n    };\n  }; // 确定坐标轴的位置\n\n\n  _proto._getAxisPosition = function _getAxisPosition(coord, dimType, index, field) {\n    var position = ''; // 用户自己定义了 position\n\n    var options = this.options;\n\n    if (options[field] && options[field].position) {\n      position = options[field].position;\n    } else {\n      var coordType = coord.type;\n\n      if (coord.isRect) {\n        if (dimType === 'x') {\n          position = 'bottom';\n        } else if (dimType === 'y') {\n          if (index) {\n            position = 'right';\n          } else {\n            position = 'left';\n          }\n        }\n      } else if (coordType === 'helix') {\n        position = 'helix';\n      } else if (dimType === 'x') {\n        position = coord.isTransposed ? 'radius' : 'circle';\n      } else {\n        position = coord.isTransposed ? 'circle' : 'radius';\n      }\n    }\n\n    return position;\n  }; // 获取坐标轴构成的配置信息\n\n\n  _proto._getAxisDefaultCfg = function _getAxisDefaultCfg(coord, scale, type, position) {\n    var self = this;\n    var viewTheme = self.viewTheme;\n    var cfg = {};\n    var options = self.options;\n    var field = scale.field;\n    cfg = Util.deepMix({}, viewTheme.axis[position], cfg, options[field]);\n    cfg.viewTheme = viewTheme;\n\n    if (cfg.title) {\n      var title = Util.isPlainObject(cfg.title) ? cfg.title : {};\n      title.text = title.text || scale.alias || field;\n      Util.deepMix(cfg, {\n        title: title\n      });\n    }\n\n    cfg.ticks = scale.getTicks();\n\n    if (coord.isPolar && !scale.isCategory) {\n      if (type === 'x' && Math.abs(coord.endAngle - coord.startAngle) === Math.PI * 2) {\n        cfg.ticks.pop();\n      }\n    }\n\n    cfg.coord = coord;\n\n    if (cfg.label && Util.isNil(cfg.label.autoRotate)) {\n      cfg.label.autoRotate = true; // 允许自动旋转，避免重叠\n    }\n\n    if (options.hasOwnProperty('xField') && options.xField.hasOwnProperty('grid')) {\n      if (cfg.position === 'left') {\n        Util.deepMix(cfg, options.xField);\n      }\n    }\n\n    return cfg;\n  }; // 确定坐标轴的配置信息\n\n\n  _proto._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType, index, viewId) {\n    if (index === void 0) {\n      index = '';\n    }\n\n    var self = this;\n\n    var position = self._getAxisPosition(coord, dimType, index, scale.field);\n\n    var cfg = self._getAxisDefaultCfg(coord, scale, dimType, position);\n\n    if (!Util.isEmpty(cfg.grid) && verticalScale) {\n      // 生成 gridPoints\n      var gridPoints = [];\n      var tickValues = [];\n      var verticalTicks = formatTicks(verticalScale.getTicks()); // 没有垂直的坐标点时不会只栅格\n\n      if (verticalTicks.length) {\n        var ticks = fillAxisTicks(cfg.ticks, scale.isLinear, cfg.grid.align === 'center');\n        Util.each(ticks, function (tick, idx) {\n          tickValues.push(tick.tickValue);\n          var subPoints = [];\n          var value = tick.value;\n\n          if (cfg.grid.align === 'center') {\n            value = self._getMiddleValue(value, ticks, idx, scale.isLinear);\n          }\n\n          if (!Util.isNil(value)) {\n            var rangeX = coord.x;\n            var rangeY = coord.y;\n            Util.each(verticalTicks, function (verticalTick) {\n              var x = dimType === 'x' ? value : verticalTick.value;\n              var y = dimType === 'x' ? verticalTick.value : value;\n              var point = coord.convert({\n                x: x,\n                y: y\n              });\n\n              if (coord.isPolar) {\n                var center = coord.circleCentre;\n\n                if (rangeY.start > rangeY.end) {\n                  y = 1 - y;\n                }\n\n                point.flag = rangeX.start > rangeX.end ? 0 : 1;\n                point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));\n              }\n\n              subPoints.push(point);\n            });\n            gridPoints.push({\n              _id: viewId + '-' + dimType + index + '-grid-' + tick.tickValue,\n              points: subPoints\n            });\n          }\n        });\n      }\n\n      cfg.grid.items = gridPoints;\n      cfg.grid.tickValues = tickValues;\n    }\n\n    cfg.type = scale.type;\n    return cfg;\n  };\n\n  _proto._getHelixCfg = function _getHelixCfg(coord) {\n    var helixCfg = {};\n    var a = coord.a;\n    var startAngle = coord.startAngle;\n    var endAngle = coord.endAngle;\n    var index = 100;\n    var crp = [];\n\n    for (var i = 0; i <= index; i++) {\n      var point = coord.convert({\n        x: i / 100,\n        y: 0\n      });\n      crp.push(point.x);\n      crp.push(point.y);\n    }\n\n    var axisStart = coord.convert({\n      x: 0,\n      y: 0\n    });\n    helixCfg.a = a;\n    helixCfg.startAngle = startAngle;\n    helixCfg.endAngle = endAngle;\n    helixCfg.crp = crp;\n    helixCfg.axisStart = axisStart;\n    helixCfg.center = coord.center;\n    helixCfg.inner = coord.y.start; // 内半径\n\n    return helixCfg;\n  };\n\n  _proto._drawAxis = function _drawAxis(coord, scale, verticalScale, dimType, viewId, xAxis, index) {\n    var container = this.container;\n    var canvas = this.canvas;\n    var C; // 坐标轴类\n\n    var appendCfg; // 每个坐标轴 start end 等绘制边界的信息\n\n    if (coord.type === 'cartesian') {\n      C = Axis.Line;\n      appendCfg = this._getLineCfg(coord, scale, dimType, index);\n    } else if (coord.type === 'helix' && dimType === 'x') {\n      C = Axis.Helix;\n      appendCfg = this._getHelixCfg(coord);\n    } else if (dimType === 'x') {\n      C = Axis.Circle;\n      appendCfg = this._getCircleCfg(coord);\n    } else {\n      C = Axis.Line;\n      appendCfg = this._getRadiusCfg(coord);\n    }\n\n    var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index, viewId);\n\n    cfg = Util.mix({}, cfg, appendCfg);\n\n    if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {\n      cfg.circle = xAxis;\n    }\n\n    cfg._id = viewId + '-' + dimType;\n\n    if (!Util.isNil(index)) {\n      cfg._id = viewId + '-' + dimType + index;\n    }\n\n    Util.mix(cfg, {\n      canvas: canvas,\n      group: container\n    });\n    var axis = new C(cfg);\n    axis.render();\n    this.axes.push(axis);\n    return axis;\n  };\n\n  _proto.createAxis = function createAxis(xScale, yScales, viewId) {\n    var self = this;\n    var coord = this.coord;\n    var coordType = coord.type; // theta坐标系默认不绘制坐标轴\n\n    if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {\n      var xAxis;\n\n      if (xScale && !self._isHide(xScale.field)) {\n        xAxis = self._drawAxis(coord, xScale, yScales[0], 'x', viewId); // 绘制 x 轴\n      }\n\n      if (!Util.isEmpty(yScales) && coordType !== 'helix') {\n        Util.each(yScales, function (yScale, index) {\n          if (!self._isHide(yScale.field)) {\n            self._drawAxis(coord, yScale, xScale, 'y', viewId, xAxis, index);\n          }\n        });\n      }\n    }\n  };\n\n  _proto.changeVisible = function changeVisible(visible) {\n    var axes = this.axes;\n    Util.each(axes, function (axis) {\n      axis.set('visible', visible);\n    });\n  };\n\n  _proto.clear = function clear() {\n    var self = this;\n    var axes = self.axes;\n    Util.each(axes, function (axis) {\n      axis.clear();\n    });\n    self.axes = [];\n  };\n\n  return AxisController;\n}();\n\nmodule.exports = AxisController;"]}]}