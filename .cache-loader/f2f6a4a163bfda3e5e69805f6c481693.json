{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/transform.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/transform.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var arrayEach = require('./_arrayEach'), baseCreate = require('./_baseCreate'), baseForOwn = require('./_baseForOwn'), baseIteratee = require('./_baseIteratee'), getPrototype = require('./_getPrototype'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isFunction = require('./isFunction'), isObject = require('./isObject'), isTypedArray = require('./isTypedArray');\nfunction transform(object, iteratee, accumulator) {\n    var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n    iteratee = baseIteratee(iteratee, 4);\n    if (accumulator == null) {\n        var Ctor = object && object.constructor;\n        if (isArrLike) {\n            accumulator = isArr ? new Ctor : [];\n        }\n        else if (isObject(object)) {\n            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n        }\n        else {\n            accumulator = {};\n        }\n    }\n    (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {\n        return iteratee(accumulator, value, index, object);\n    });\n    return accumulator;\n}\nmodule.exports = transform;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/transform.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/transform.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,EACnC,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,EACrC,UAAU,GAAG,OAAO,CAAC,eAAe,CAAC,EACrC,YAAY,GAAG,OAAO,CAAC,iBAAiB,CAAC,EACzC,YAAY,GAAG,OAAO,CAAC,iBAAiB,CAAC,EACzC,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,EAC9B,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,EAChC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,EACpC,QAAQ,GAAG,OAAO,CAAC,YAAY,CAAC,EAChC,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAgC7C,SAAS,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW;IAC9C,IAAI,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,EACvB,SAAS,GAAG,KAAK,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IAElE,QAAQ,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrC,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,IAAI,IAAI,GAAG,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC;QACxC,IAAI,SAAS,EAAE;YACb,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;SACrC;aACI,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzB,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SACxE;aACI;YACH,WAAW,GAAG,EAAE,CAAC;SAClB;KACF;IACD,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE,KAAK,EAAE,MAAM;QACxE,OAAO,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACrB,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","sourcesContent":["var arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n"]}]}