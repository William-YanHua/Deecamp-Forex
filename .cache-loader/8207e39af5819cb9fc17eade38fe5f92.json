{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\attr\\esm\\attributes\\base.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\attr\\esm\\attributes\\base.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { isArray, isNil, isString } from '@antv/util';\r\nvar toScaleString = function (scale, value) {\r\n    if (isString(value)) {\r\n        return value;\r\n    }\r\n    return scale.invert(scale.scale(value));\r\n};\r\nvar Attribute = (function () {\r\n    function Attribute(cfg) {\r\n        this.names = [];\r\n        this.scales = [];\r\n        this.linear = false;\r\n        this.values = [];\r\n        this.callback = function () { return []; };\r\n        this._parseCfg(cfg);\r\n    }\r\n    Attribute.prototype.mapping = function () {\r\n        var _this = this;\r\n        var params = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            params[_i] = arguments[_i];\r\n        }\r\n        var values = params.map(function (param, idx) {\r\n            return _this._toOriginParam(param, _this.scales[idx]);\r\n        });\r\n        return this.callback.apply(this, values);\r\n    };\r\n    Attribute.prototype.getLinearValue = function (percent) {\r\n        var steps = this.values.length - 1;\r\n        var step = Math.floor(steps * percent);\r\n        var leftPercent = steps * percent - step;\r\n        var start = this.values[step];\r\n        var end = step === steps ? start : this.values[step + 1];\r\n        return start + (end - start) * leftPercent;\r\n    };\r\n    Attribute.prototype.getNames = function () {\r\n        var scales = this.scales;\r\n        var names = this.names;\r\n        var length = Math.min(scales.length, names.length);\r\n        var rst = [];\r\n        for (var i = 0; i < length; i += 1) {\r\n            rst.push(names[i]);\r\n        }\r\n        return rst;\r\n    };\r\n    Attribute.prototype.getFields = function () {\r\n        return this.scales.map(function (scale) { return scale.field; });\r\n    };\r\n    Attribute.prototype.getScale = function (name) {\r\n        return this.scales[this.names.indexOf(name)];\r\n    };\r\n    Attribute.prototype.defaultCallback = function () {\r\n        var _this = this;\r\n        var params = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            params[_i] = arguments[_i];\r\n        }\r\n        if (params.length === 0) {\r\n            return this.values;\r\n        }\r\n        return params.map(function (param, idx) {\r\n            var scale = _this.scales[idx];\r\n            return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\r\n        });\r\n    };\r\n    Attribute.prototype._parseCfg = function (cfg) {\r\n        var _this = this;\r\n        var _a = cfg.type, type = _a === void 0 ? 'base' : _a, _b = cfg.names, names = _b === void 0 ? [] : _b, _c = cfg.scales, scales = _c === void 0 ? [] : _c, _d = cfg.values, values = _d === void 0 ? [] : _d, callback = cfg.callback;\r\n        this.type = type;\r\n        this.scales = scales;\r\n        this.values = values;\r\n        this.names = names;\r\n        this.callback = function () {\r\n            var params = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                params[_i] = arguments[_i];\r\n            }\r\n            if (callback) {\r\n                var ret = callback.apply(void 0, params);\r\n                if (!isNil(ret)) {\r\n                    return [ret];\r\n                }\r\n            }\r\n            return _this.defaultCallback.apply(_this, params);\r\n        };\r\n    };\r\n    Attribute.prototype._getAttributeValue = function (scale, value) {\r\n        if (scale.isCategory && !this.linear) {\r\n            var idx = scale.translate(value);\r\n            return this.values[idx % this.values.length];\r\n        }\r\n        var percent = scale.scale(value);\r\n        return this.getLinearValue(percent);\r\n    };\r\n    Attribute.prototype._toOriginParam = function (param, scale) {\r\n        return !scale.isLinear\r\n            ? isArray(param)\r\n                ? param.map(function (p) { return toScaleString(scale, p); })\r\n                : toScaleString(scale, param)\r\n            : param;\r\n    };\r\n    return Attribute;\r\n}());\r\nexport default Attribute;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\attr\\esm\\attributes\\base.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\attr\\esm\\attributes\\base.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtD,IAAI,aAAa,GAAG,UAAU,KAAK,EAAE,KAAK;IACtC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,KAAK,CAAC;KAChB;IACD,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5C,CAAC,CAAC;AAKF,IAAI,SAAS,GAAiB,CAAC;IAC3B,SAAS,SAAS,CAAC,GAAG;QAClB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,cAAc,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;QAE3C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAKD,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;YAC1C,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;SAC9B;QACD,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE,GAAG;YACxC,OAAO,KAAK,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU,OAAO;QAElD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC;QACvC,IAAI,WAAW,GAAG,KAAK,GAAG,OAAO,GAAG,IAAI,CAAC;QAEzC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,GAAG,GAAG,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAEzD,OAAO,KAAK,GAAG,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,WAAW,CAAC;IAC/C,CAAC,CAAC;IAIF,SAAS,CAAC,SAAS,CAAC,QAAQ,GAAG;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAChC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;QACD,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IAIF,SAAS,CAAC,SAAS,CAAC,SAAS,GAAG;QAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,KAAK,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,IAAI;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,eAAe,GAAG;QAClC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;YAC1C,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;SAC9B;QAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,OAAO,IAAI,CAAC,MAAM,CAAC;SACtB;QACD,OAAO,MAAM,CAAC,GAAG,CAAC,UAAU,KAAK,EAAE,GAAG;YAClC,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC9B,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAChG,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,SAAS,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,GAAG;QACzC,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;QACtO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG;YACZ,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;gBAC1C,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;aAC9B;YAID,IAAI,QAAQ,EAAE;gBAEV,IAAI,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;gBACzC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;oBACb,OAAO,CAAC,GAAG,CAAC,CAAC;iBAChB;aACJ;YAED,OAAO,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACtD,CAAC,CAAC;IACN,CAAC,CAAC;IAEF,SAAS,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,KAAK,EAAE,KAAK;QAE3D,IAAI,KAAK,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAElC,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAChD;QAED,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC,CAAC;IAOF,SAAS,CAAC,SAAS,CAAC,cAAc,GAAG,UAAU,KAAK,EAAE,KAAK;QAGvD,OAAO,CAAC,KAAK,CAAC,QAAQ;YAClB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;gBACZ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,OAAO,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7D,CAAC,CAAC,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC;YACjC,CAAC,CAAC,KAAK,CAAC;IAChB,CAAC,CAAC;IACF,OAAO,SAAS,CAAC;AACrB,CAAC,EAAE,CAAC,CAAC;AACL,eAAe,SAAS,CAAC","sourcesContent":["import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n    if (isString(value)) {\n        return value;\n    }\n    return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */ (function () {\n    function Attribute(cfg) {\n        this.names = [];\n        this.scales = [];\n        this.linear = false;\n        this.values = [];\n        this.callback = function () { return []; };\n        // 解析配置\n        this._parseCfg(cfg);\n    }\n    /**\n     * 映射的值组成的数组\n     * @param params 对应 scale 顺序的值传入\n     */\n    Attribute.prototype.mapping = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        var values = params.map(function (param, idx) {\n            return _this._toOriginParam(param, _this.scales[idx]);\n        });\n        return this.callback.apply(this, values);\n    };\n    /**\n     * 如果进行线性映射，返回对应的映射值\n     * @param percent\n     */\n    Attribute.prototype.getLinearValue = function (percent) {\n        // 分段数量\n        var steps = this.values.length - 1;\n        var step = Math.floor(steps * percent);\n        var leftPercent = steps * percent - step;\n        // todo 不懂这个逻辑\n        var start = this.values[step];\n        var end = step === steps ? start : this.values[step + 1];\n        // 线性方程\n        return start + (end - start) * leftPercent;\n    };\n    /**\n     * 根据度量获取属性名\n     */\n    Attribute.prototype.getNames = function () {\n        var scales = this.scales;\n        var names = this.names;\n        var length = Math.min(scales.length, names.length);\n        var rst = [];\n        for (var i = 0; i < length; i += 1) {\n            rst.push(names[i]);\n        }\n        return rst;\n    };\n    /**\n     * 获取所有的维度名\n     */\n    Attribute.prototype.getFields = function () {\n        return this.scales.map(function (scale) { return scale.field; });\n    };\n    /**\n     * 根据名称获取度量\n     * @param name\n     */\n    Attribute.prototype.getScale = function (name) {\n        return this.scales[this.names.indexOf(name)];\n    };\n    /**\n     * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n     * @param params\n     */\n    Attribute.prototype.defaultCallback = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n        if (params.length === 0) {\n            return this.values;\n        }\n        return params.map(function (param, idx) {\n            var scale = _this.scales[idx];\n            return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n        });\n    };\n    // 解析配置\n    Attribute.prototype._parseCfg = function (cfg) {\n        var _this = this;\n        var _a = cfg.type, type = _a === void 0 ? 'base' : _a, _b = cfg.names, names = _b === void 0 ? [] : _b, _c = cfg.scales, scales = _c === void 0 ? [] : _c, _d = cfg.values, values = _d === void 0 ? [] : _d, callback = cfg.callback;\n        this.type = type;\n        this.scales = scales;\n        this.values = values;\n        this.names = names;\n        // 构造 callback 方法\n        this.callback = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            /**\n             * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n             */\n            if (callback) {\n                // 使用用户返回的值处理\n                var ret = callback.apply(void 0, params);\n                if (!isNil(ret)) {\n                    return [ret];\n                }\n            }\n            // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n            return _this.defaultCallback.apply(_this, params);\n        };\n    };\n    // 获取属性值，将值映射到视觉通道\n    Attribute.prototype._getAttributeValue = function (scale, value) {\n        // 如果是非线性的字段，直接从 values 中取值即可\n        if (scale.isCategory && !this.linear) {\n            // 离散 scale 变换成索引\n            var idx = scale.translate(value);\n            return this.values[idx % this.values.length];\n        }\n        // 线性则使用线性值\n        var percent = scale.scale(value);\n        return this.getLinearValue(percent);\n    };\n    /**\n     * 通过 scale 拿到数据对应的原始的参数\n     * @param param\n     * @param scale\n     * @private\n     */\n    Attribute.prototype._toOriginParam = function (param, scale) {\n        // 是线性，直接返回\n        // 非线性，使用 scale 变换\n        return !scale.isLinear\n            ? isArray(param)\n                ? param.map(function (p) { return toScaleString(scale, p); })\n                : toScaleString(scale, param)\n            : param;\n    };\n    return Attribute;\n}());\nexport default Attribute;\n//# sourceMappingURL=base.js.map"]}]}