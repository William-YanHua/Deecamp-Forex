{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/shape/base.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/shape/base.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\nvar ShapeFactoryBase = {\n    coordinate: null,\n    defaultShapeType: null,\n    theme: null,\n    getShapePoints: function (shapeType, shapePoint) {\n        var shape = this.getShape(shapeType);\n        if (shape.getPoints) {\n            return shape.getPoints(shapePoint);\n        }\n        return this.getDefaultPoints(shapePoint);\n    },\n    getShape: function (shapeType) {\n        var shape = this[shapeType] || this[this.defaultShapeType];\n        shape.coordinate = this.coordinate;\n        return shape;\n    },\n    getDefaultPoints: function () {\n        return [];\n    },\n    getMarker: function (shapeType, markerCfg) {\n        var shape = this.getShape(shapeType);\n        if (!shape.getMarker) {\n            var defaultShapeType = this.defaultShapeType;\n            shape = this.getShape(defaultShapeType);\n        }\n        var theme = this.theme;\n        var shapeStyle = get(theme, [shapeType, 'default'], {});\n        var markerStyle = shape.getMarker(markerCfg);\n        return deepMix({}, shapeStyle, markerStyle);\n    },\n    drawShape: function (shapeType, cfg, container) {\n        var shape = this.getShape(shapeType);\n        return shape.draw(cfg, container);\n    },\n};\nvar ShapeBase = {\n    coordinate: null,\n    parsePath: function (path) {\n        var coordinate = this.coordinate;\n        var parsedPath = parsePathString(path);\n        if (coordinate.isPolar) {\n            parsedPath = convertPolarPath(coordinate, parsedPath);\n        }\n        else {\n            parsedPath = convertNormalPath(coordinate, parsedPath);\n        }\n        return parsedPath;\n    },\n    parsePoint: function (point) {\n        var coordinate = this.coordinate;\n        return coordinate.convert(point);\n    },\n    parsePoints: function (points) {\n        var coordinate = this.coordinate;\n        return points.map(function (point) {\n            return coordinate.convert(point);\n        });\n    },\n    draw: function (cfg, container) { },\n};\nvar ShapeFactoryMap = {};\nexport function registerShapeFactory(factoryName, cfg) {\n    var className = upperFirst(factoryName);\n    var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), { geometryType: factoryName });\n    ShapeFactoryMap[className] = geomObj;\n    return geomObj;\n}\nexport function registerShape(factoryName, shapeType, cfg) {\n    var className = upperFirst(factoryName);\n    var factory = ShapeFactoryMap[className];\n    var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n    factory[shapeType] = shapeObj;\n    return shapeObj;\n}\nexport function getShapeFactory(factoryName) {\n    var className = upperFirst(factoryName);\n    return ShapeFactoryMap[className];\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/shape/base.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/shape/base.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\nvar ShapeFactoryBase = {\n    /** 坐标系对象 */\n    coordinate: null,\n    /** 默认绘制的 Shape 类型 */\n    defaultShapeType: null,\n    /** 主题样式 */\n    theme: null,\n    /**\n     * 获取 shape 绘制需要的关键点\n     * @param shapeType shape 类型\n     * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n     * @returns 图形关键点信息\n     */\n    getShapePoints: function (shapeType, shapePoint) {\n        var shape = this.getShape(shapeType);\n        if (shape.getPoints) {\n            return shape.getPoints(shapePoint);\n        }\n        return this.getDefaultPoints(shapePoint);\n    },\n    /**\n     * 根据 shape 类型获取具体的 shape 实例\n     * @param shapeType string shape 的类型\n     * @returns\n     */\n    getShape: function (shapeType) {\n        var shape = this[shapeType] || this[this.defaultShapeType];\n        shape.coordinate = this.coordinate;\n        return shape;\n    },\n    /**\n     * 获取 shape 的默认关键点\n     * @override\n     */\n    getDefaultPoints: function () {\n        return [];\n    },\n    /**\n     * 获取 shape 对应的缩略图配置信息。\n     * @param shapeType shape 类型\n     * @param color 颜色\n     * @param isInPolar 是否在极坐标系下\n     * @returns 返回缩略图 marker 配置。\n     */\n    getMarker: function (shapeType, markerCfg) {\n        var shape = this.getShape(shapeType);\n        if (!shape.getMarker) {\n            var defaultShapeType = this.defaultShapeType;\n            shape = this.getShape(defaultShapeType);\n        }\n        var theme = this.theme;\n        var shapeStyle = get(theme, [shapeType, 'default'], {});\n        var markerStyle = shape.getMarker(markerCfg);\n        return deepMix({}, shapeStyle, markerStyle);\n    },\n    /**\n     * 绘制 shape\n     * @override\n     * @param shapeType 绘制的 shape 类型\n     * @param cfg 绘制 shape 需要的信息\n     * @param element Element 实例\n     * @returns\n     */\n    drawShape: function (shapeType, cfg, container) {\n        var shape = this.getShape(shapeType);\n        return shape.draw(cfg, container);\n    },\n};\n/** Shape 基类 */\nvar ShapeBase = {\n    /** 坐标系对象 */\n    coordinate: null,\n    /**\n     * 将归一化的 path 转换成坐标系下的 path\n     * @param path 归一化的路径\n     * @returns\n     */\n    parsePath: function (path) {\n        var coordinate = this.coordinate;\n        var parsedPath = parsePathString(path);\n        if (coordinate.isPolar) {\n            parsedPath = convertPolarPath(coordinate, parsedPath);\n        }\n        else {\n            parsedPath = convertNormalPath(coordinate, parsedPath);\n        }\n        return parsedPath;\n    },\n    /**\n     * 将归一化的坐标转换成画布坐标\n     * @param point 归一化的坐标点数据\n     * @returns\n     */\n    parsePoint: function (point) {\n        var coordinate = this.coordinate;\n        return coordinate.convert(point);\n    },\n    /**\n     * 0～1 points 转 画布 points\n     * @param points 节点集合\n     * @returns\n     */\n    parsePoints: function (points) {\n        var coordinate = this.coordinate;\n        return points.map(function (point) {\n            return coordinate.convert(point);\n        });\n    },\n    /**\n     * 绘制 shape\n     * @override\n     */\n    draw: function (cfg, container) { },\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName, cfg) {\n    var className = upperFirst(factoryName);\n    var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), { geometryType: factoryName });\n    ShapeFactoryMap[className] = geomObj;\n    return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName, shapeType, cfg) {\n    var className = upperFirst(factoryName);\n    var factory = ShapeFactoryMap[className];\n    var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n    factory[shapeType] = shapeObj;\n    return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName) {\n    var className = upperFirst(factoryName);\n    return ShapeFactoryMap[className];\n}\n//# sourceMappingURL=base.js.map"]}]}