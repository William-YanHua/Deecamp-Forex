{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\shape\\polygon\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\shape\\polygon\\index.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign } from \"tslib\";\r\nimport { each, isEmpty, isEqual, last } from '@antv/util';\r\nimport { registerShape, registerShapeFactory } from '../base';\r\nimport { getStyle } from '../util/get-style';\r\nfunction getPath(points) {\r\n    var flag = points[0];\r\n    var i = 1;\r\n    var path = [['M', flag.x, flag.y]];\r\n    while (i < points.length) {\r\n        var c = points[i];\r\n        if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\r\n            path.push(['L', c.x, c.y]);\r\n            if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\r\n                flag = points[i + 1];\r\n                path.push(['Z']);\r\n                path.push(['M', flag.x, flag.y]);\r\n                i++;\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n    if (!isEqual(last(path), flag)) {\r\n        path.push(['L', flag.x, flag.y]);\r\n    }\r\n    path.push(['Z']);\r\n    return path;\r\n}\r\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\r\n    defaultShapeType: 'polygon',\r\n    getDefaultPoints: function (pointInfo) {\r\n        var points = [];\r\n        each(pointInfo.x, function (subX, index) {\r\n            var subY = pointInfo.y[index];\r\n            points.push({\r\n                x: subX,\r\n                y: subY,\r\n            });\r\n        });\r\n        return points;\r\n    },\r\n});\r\nregisterShape('polygon', 'polygon', {\r\n    draw: function (cfg, container) {\r\n        if (!isEmpty(cfg.points)) {\r\n            var shapeAttrs = getStyle(cfg, true, true);\r\n            var path = this.parsePath(getPath(cfg.points));\r\n            return container.addShape('path', {\r\n                attrs: __assign(__assign({}, shapeAttrs), { path: path }),\r\n                name: 'polygon',\r\n            });\r\n        }\r\n    },\r\n    getMarker: function (markerCfg) {\r\n        var color = markerCfg.color;\r\n        return {\r\n            symbol: 'square',\r\n            style: {\r\n                r: 4,\r\n                fill: color,\r\n            },\r\n        };\r\n    },\r\n});\r\nexport default PolygonShapeFactory;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\shape\\polygon\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\shape\\polygon\\index.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\nfunction getPath(points) {\n    var flag = points[0];\n    var i = 1;\n    var path = [['M', flag.x, flag.y]];\n    while (i < points.length) {\n        var c = points[i];\n        if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n            path.push(['L', c.x, c.y]);\n            if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n                flag = points[i + 1];\n                path.push(['Z']);\n                path.push(['M', flag.x, flag.y]);\n                i++;\n            }\n        }\n        i++;\n    }\n    if (!isEqual(last(path), flag)) {\n        path.push(['L', flag.x, flag.y]);\n    }\n    path.push(['Z']);\n    return path;\n}\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n    defaultShapeType: 'polygon',\n    getDefaultPoints: function (pointInfo) {\n        var points = [];\n        each(pointInfo.x, function (subX, index) {\n            var subY = pointInfo.y[index];\n            points.push({\n                x: subX,\n                y: subY,\n            });\n        });\n        return points;\n    },\n});\nregisterShape('polygon', 'polygon', {\n    draw: function (cfg, container) {\n        if (!isEmpty(cfg.points)) {\n            var shapeAttrs = getStyle(cfg, true, true);\n            var path = this.parsePath(getPath(cfg.points));\n            return container.addShape('path', {\n                attrs: __assign(__assign({}, shapeAttrs), { path: path }),\n                name: 'polygon',\n            });\n        }\n    },\n    getMarker: function (markerCfg) {\n        var color = markerCfg.color;\n        return {\n            symbol: 'square',\n            style: {\n                r: 4,\n                fill: color,\n            },\n        };\n    },\n});\nexport default PolygonShapeFactory;\n//# sourceMappingURL=index.js.map"]}]}