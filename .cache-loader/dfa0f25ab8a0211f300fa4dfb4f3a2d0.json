{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\aggregate.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\aggregate.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar flattenDeep = require('@antv/util/lib/array/flatten-deep');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar keys = require('@antv/util/lib/object/keys');\r\nvar uniq = require('@antv/util/lib/array/uniq');\r\nvar simpleStatistics = require('simple-statistics');\r\nvar partition = require('../util/partition');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar STATISTICS_METHODS = require('../constants').STATISTICS_METHODS;\r\nvar getFields = require('../util/option-parser').getFields;\r\nvar DEFAULT_OPTIONS = {\r\n    as: [],\r\n    fields: [],\r\n    groupBy: [],\r\n    operations: []\r\n};\r\nvar DEFAULT_OPERATION = 'count';\r\nvar aggregates = {\r\n    count: function (data) {\r\n        return data.length;\r\n    },\r\n    distinct: function (data, field) {\r\n        var values = uniq(data.map(function (row) { return row[field]; }));\r\n        return values.length;\r\n    }\r\n};\r\nSTATISTICS_METHODS.forEach(function (method) {\r\n    aggregates[method] = function (data, field) {\r\n        var values = data.map(function (row) { return row[field]; });\r\n        if (isArray(values) && isArray(values[0])) {\r\n            values = flattenDeep(values);\r\n        }\r\n        return simpleStatistics[method](values);\r\n    };\r\n});\r\naggregates.average = aggregates.mean;\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var fields = getFields(options);\r\n    if (!isArray(fields)) {\r\n        throw new TypeError('Invalid fields: it must be an array with one or more strings!');\r\n    }\r\n    var outputNames = options.as || [];\r\n    if (isString(outputNames)) {\r\n        outputNames = [outputNames];\r\n    }\r\n    var operations = options.operations;\r\n    if (isString(operations)) {\r\n        operations = [operations];\r\n    }\r\n    var DEFAULT_OPERATIONS = [DEFAULT_OPERATION];\r\n    if (!isArray(operations) || !operations.length) {\r\n        console.warn('operations is not defined, will use [ \"count\" ] directly.');\r\n        operations = DEFAULT_OPERATIONS;\r\n        outputNames = operations;\r\n    }\r\n    if (!(operations.length === 1 && operations[0] === DEFAULT_OPERATION)) {\r\n        if (operations.length !== fields.length) {\r\n            throw new TypeError('Invalid operations: it\\'s length must be the same as fields!');\r\n        }\r\n        if (outputNames.length !== fields.length) {\r\n            throw new TypeError('Invalid as: it\\'s length must be the same as fields!');\r\n        }\r\n    }\r\n    var groups = partition(dataView.rows, options.groupBy);\r\n    var results = [];\r\n    forIn(groups, function (group) {\r\n        var result = group[0];\r\n        operations.forEach(function (operation, i) {\r\n            var outputName = outputNames[i];\r\n            var field = fields[i];\r\n            result[outputName] = aggregates[operation](group, field);\r\n        });\r\n        results.push(result);\r\n    });\r\n    dataView.rows = results;\r\n}\r\nregisterTransform('aggregate', transform);\r\nregisterTransform('summary', transform);\r\nmodule.exports = {\r\n    VALID_AGGREGATES: keys(aggregates)\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\aggregate.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\aggregate.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst flattenDeep = require('@antv/util/lib/array/flatten-deep');\nconst forIn = require('@antv/util/lib/each');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst keys = require('@antv/util/lib/object/keys');\nconst uniq = require('@antv/util/lib/array/uniq');\nconst simpleStatistics = require('simple-statistics');\nconst partition = require('../util/partition');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  STATISTICS_METHODS\n} = require('../constants');\nconst {\n  getFields\n} = require('../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  as: [],\n  fields: [],\n  groupBy: [],\n  operations: []\n};\nconst DEFAULT_OPERATION = 'count';\n\nconst aggregates = {\n  count(data) {\n    return data.length;\n  },\n  distinct(data, field) {\n    const values = uniq(data.map(row => row[field]));\n    return values.length;\n  }\n};\nSTATISTICS_METHODS.forEach(method => {\n  aggregates[method] = (data, field) => {\n    let values = data.map(row => row[field]);\n    if (isArray(values) && isArray(values[0])) {\n      values = flattenDeep(values);\n    }\n    return simpleStatistics[method](values);\n  };\n});\naggregates.average = aggregates.mean;\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const fields = getFields(options);\n  if (!isArray(fields)) {\n    throw new TypeError('Invalid fields: it must be an array with one or more strings!');\n  }\n  let outputNames = options.as || [];\n  if (isString(outputNames)) {\n    outputNames = [ outputNames ];\n  }\n  let operations = options.operations;\n  if (isString(operations)) {\n    operations = [ operations ];\n  }\n  const DEFAULT_OPERATIONS = [ DEFAULT_OPERATION ];\n  if (!isArray(operations) || !operations.length) {\n    console.warn('operations is not defined, will use [ \"count\" ] directly.');\n    operations = DEFAULT_OPERATIONS;\n    outputNames = operations;\n  }\n  if (!(operations.length === 1 && operations[0] === DEFAULT_OPERATION)) {\n    if (operations.length !== fields.length) {\n      throw new TypeError('Invalid operations: it\\'s length must be the same as fields!');\n    }\n    if (outputNames.length !== fields.length) {\n      throw new TypeError('Invalid as: it\\'s length must be the same as fields!');\n    }\n  }\n  const groups = partition(dataView.rows, options.groupBy);\n  const results = [];\n  forIn(groups, group => {\n    const result = group[0];\n    operations.forEach((operation, i) => {\n      const outputName = outputNames[i];\n      const field = fields[i];\n      result[outputName] = aggregates[operation](group, field);\n    });\n    results.push(result);\n  });\n  dataView.rows = results;\n}\n\nregisterTransform('aggregate', transform);\nregisterTransform('summary', transform);\n\nmodule.exports = {\n  VALID_AGGREGATES: keys(aggregates)\n};\n"]}]}