{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\area.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\area.js","mtime":1470073222000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import adder from \"./adder\";\r\nimport { atan2, cos, quarterPi, radians, sin, tau } from \"./math\";\r\nimport noop from \"./noop\";\r\nimport stream from \"./stream\";\r\nexport var areaRingSum = adder();\r\nvar areaSum = adder(), lambda00, phi00, lambda0, cosPhi0, sinPhi0;\r\nexport var areaStream = {\r\n    point: noop,\r\n    lineStart: noop,\r\n    lineEnd: noop,\r\n    polygonStart: function () {\r\n        areaRingSum.reset();\r\n        areaStream.lineStart = areaRingStart;\r\n        areaStream.lineEnd = areaRingEnd;\r\n    },\r\n    polygonEnd: function () {\r\n        var areaRing = +areaRingSum;\r\n        areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\r\n        this.lineStart = this.lineEnd = this.point = noop;\r\n    },\r\n    sphere: function () {\r\n        areaSum.add(tau);\r\n    }\r\n};\r\nfunction areaRingStart() {\r\n    areaStream.point = areaPointFirst;\r\n}\r\nfunction areaRingEnd() {\r\n    areaPoint(lambda00, phi00);\r\n}\r\nfunction areaPointFirst(lambda, phi) {\r\n    areaStream.point = areaPoint;\r\n    lambda00 = lambda, phi00 = phi;\r\n    lambda *= radians, phi *= radians;\r\n    lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\r\n}\r\nfunction areaPoint(lambda, phi) {\r\n    lambda *= radians, phi *= radians;\r\n    phi = phi / 2 + quarterPi;\r\n    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos(adLambda), v = k * sdLambda * sin(adLambda);\r\n    areaRingSum.add(atan2(v, u));\r\n    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\r\n}\r\nexport default function (object) {\r\n    areaSum.reset();\r\n    stream(object, areaStream);\r\n    return areaSum * 2;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\area.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\area.js"],"names":[],"mappings":"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","sourcesContent":["import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoliâ€™s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n"]}]}