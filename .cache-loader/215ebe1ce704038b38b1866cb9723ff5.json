{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/base.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/base.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set, } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nfunction filterLabelsById(id, labelsMap) {\n    var labels = [];\n    each(labelsMap, function (label, labelId) {\n        var elementId = labelId.split(' ')[0];\n        if (elementId === id) {\n            labels.push(label);\n        }\n    });\n    return labels;\n}\nvar Geometry = (function (_super) {\n    __extends(Geometry, _super);\n    function Geometry(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.type = 'base';\n        _this.attributes = {};\n        _this.elements = [];\n        _this.elementsMap = {};\n        _this.animateOption = true;\n        _this.attributeOption = {};\n        _this.lastElementsMap = {};\n        _this.generatePoints = false;\n        _this.beforeMappingData = null;\n        _this.adjusts = {};\n        _this.idFields = [];\n        _this.hasSorted = false;\n        _this.isCoordinateChanged = false;\n        var container = cfg.container, labelsContainer = cfg.labelsContainer, coordinate = cfg.coordinate, data = cfg.data, _a = cfg.sortable, sortable = _a === void 0 ? false : _a, _b = cfg.visible, visible = _b === void 0 ? true : _b, theme = cfg.theme, _c = cfg.scales, scales = _c === void 0 ? {} : _c, _d = cfg.scaleDefs, scaleDefs = _d === void 0 ? {} : _d;\n        _this.container = container;\n        _this.labelsContainer = labelsContainer;\n        _this.coordinate = coordinate;\n        _this.data = data;\n        _this.sortable = sortable;\n        _this.visible = visible;\n        _this.userTheme = theme;\n        _this.scales = scales;\n        _this.scaleDefs = scaleDefs;\n        return _this;\n    }\n    Geometry.prototype.position = function (cfg) {\n        var positionCfg = cfg;\n        if (!isPlainObject(cfg)) {\n            positionCfg = {\n                fields: parseFields(cfg),\n            };\n        }\n        var fields = get(positionCfg, 'fields');\n        if (fields.length === 1) {\n            fields.unshift('1');\n            set(positionCfg, 'fields', fields);\n        }\n        set(this.attributeOption, 'position', positionCfg);\n        return this;\n    };\n    Geometry.prototype.color = function (field, cfg) {\n        this.createAttrOption('color', field, cfg);\n        return this;\n    };\n    Geometry.prototype.shape = function (field, cfg) {\n        this.createAttrOption('shape', field, cfg);\n        return this;\n    };\n    Geometry.prototype.size = function (field, cfg) {\n        this.createAttrOption('size', field, cfg);\n        return this;\n    };\n    Geometry.prototype.adjust = function (adjustCfg) {\n        var adjusts = adjustCfg;\n        if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n            adjusts = [adjustCfg];\n        }\n        each(adjusts, function (adjust, index) {\n            if (!isObject(adjust)) {\n                adjusts[index] = { type: adjust };\n            }\n        });\n        this.adjustOption = adjusts;\n        return this;\n    };\n    Geometry.prototype.style = function (field, styleFunc) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.styleOption = {\n                fields: fields,\n                callback: styleFunc,\n            };\n        }\n        else {\n            var _a = field, fields = _a.fields, callback = _a.callback, cfg = _a.cfg;\n            if (fields || callback || cfg) {\n                this.styleOption = field;\n            }\n            else {\n                this.styleOption = {\n                    cfg: field,\n                };\n            }\n        }\n        return this;\n    };\n    Geometry.prototype.tooltip = function (field, cfg) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.tooltipOption = {\n                fields: fields,\n                callback: cfg,\n            };\n        }\n        else {\n            this.tooltipOption = field;\n        }\n        return this;\n    };\n    Geometry.prototype.animate = function (cfg) {\n        this.animateOption = cfg;\n        return this;\n    };\n    Geometry.prototype.label = function (field, secondParam, thirdParam) {\n        if (isString(field)) {\n            var labelOption = {};\n            var fields = parseFields(field);\n            labelOption.fields = fields;\n            if (isFunction(secondParam)) {\n                labelOption.callback = secondParam;\n            }\n            else if (isPlainObject(secondParam)) {\n                labelOption.cfg = secondParam;\n            }\n            if (thirdParam) {\n                labelOption.cfg = thirdParam;\n            }\n            this.labelOption = labelOption;\n        }\n        else {\n            this.labelOption = field;\n        }\n        return this;\n    };\n    Geometry.prototype.state = function (cfg) {\n        this.stateOption = cfg;\n        return this;\n    };\n    Geometry.prototype.init = function (cfg) {\n        if (cfg === void 0) {\n            cfg = {};\n        }\n        this.setCfg(cfg);\n        this.initAttributes();\n        this.processData(this.data);\n        this.adjustScale();\n    };\n    Geometry.prototype.update = function (cfg) {\n        if (cfg === void 0) {\n            cfg = {};\n        }\n        var data = cfg.data, isDataChanged = cfg.isDataChanged, isCoordinateChanged = cfg.isCoordinateChanged;\n        var _a = this, attributeOption = _a.attributeOption, lastAttributeOption = _a.lastAttributeOption;\n        if (!isEqual(attributeOption, lastAttributeOption)) {\n            this.init(cfg);\n        }\n        else if (data && (isDataChanged || !isEqual(data, this.data))) {\n            this.setCfg(cfg);\n            this.processData(data);\n        }\n        else {\n            this.setCfg(cfg);\n        }\n        this.adjustScale();\n        this.isCoordinateChanged = isCoordinateChanged;\n    };\n    Geometry.prototype.paint = function (isUpdate) {\n        var _this = this;\n        if (isUpdate === void 0) {\n            isUpdate = false;\n        }\n        if (this.animateOption) {\n            this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n        }\n        this.defaultSize = undefined;\n        this.elements = [];\n        this.elementsMap = {};\n        var offscreenGroup = this.getOffscreenGroup();\n        offscreenGroup.clear();\n        var beforeMappingData = this.beforeMappingData;\n        var dataArray = this.beforeMapping(beforeMappingData);\n        var mappingArray = [];\n        for (var index = 0, length_1 = dataArray.length; index < length_1; index++) {\n            var eachGroup = dataArray[index];\n            var mappingData = this.mapping(eachGroup);\n            mappingArray.push(mappingData);\n            this.createElements(mappingData, index, isUpdate);\n        }\n        if (this.canDoGroupAnimation(isUpdate)) {\n            var container = this.container;\n            var type = this.type;\n            var coordinate = this.coordinate;\n            var animateCfg = get(this.animateOption, 'appear');\n            var yScale = this.getYScale();\n            var yMinPoint = coordinate.convert({\n                x: 0,\n                y: yScale.scale(this.getYMinValue()),\n            });\n            doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n        }\n        if (this.labelOption) {\n            this.renderLabels(flatten(mappingArray), isUpdate);\n        }\n        this.dataArray = mappingArray;\n        each(this.lastElementsMap, function (deletedElement) {\n            deletedElement.animate = _this.animateOption;\n            deletedElement.destroy();\n        });\n        this.lastElementsMap = this.elementsMap;\n        this.lastAttributeOption = __assign({}, this.attributeOption);\n        if (this.visible === false) {\n            this.changeVisible(false);\n        }\n    };\n    Geometry.prototype.clear = function () {\n        var _a = this, container = _a.container, geometryLabel = _a.geometryLabel, offscreenGroup = _a.offscreenGroup;\n        if (container) {\n            container.clear();\n        }\n        if (geometryLabel) {\n            geometryLabel.clear();\n        }\n        if (offscreenGroup) {\n            offscreenGroup.clear();\n        }\n        this.scaleDefs = undefined;\n        this.attributes = {};\n        this.scales = {};\n        this.elementsMap = {};\n        this.lastElementsMap = {};\n        this.elements = [];\n        this.adjusts = {};\n        this.dataArray = null;\n        this.beforeMappingData = null;\n        this.lastAttributeOption = undefined;\n        this.defaultSize = undefined;\n        this.idFields = [];\n        this.groupScales = undefined;\n        this.hasSorted = false;\n        this.isCoordinateChanged = false;\n    };\n    Geometry.prototype.destroy = function () {\n        this.clear();\n        var container = this.container;\n        container.remove(true);\n        if (this.offscreenGroup) {\n            this.offscreenGroup.remove(true);\n            this.offscreenGroup = null;\n        }\n        if (this.geometryLabel) {\n            this.geometryLabel.destroy();\n            this.geometryLabel = null;\n        }\n        this.theme = undefined;\n        this.shapeFactory = undefined;\n        _super.prototype.destroy.call(this);\n    };\n    Geometry.prototype.getGroupScales = function () {\n        return this.groupScales;\n    };\n    Geometry.prototype.getAttribute = function (name) {\n        return this.attributes[name];\n    };\n    Geometry.prototype.getXScale = function () {\n        return this.getAttribute('position').scales[0];\n    };\n    Geometry.prototype.getYScale = function () {\n        return this.getAttribute('position').scales[1];\n    };\n    Geometry.prototype.getGroupAttributes = function () {\n        var rst = [];\n        each(this.attributes, function (attr) {\n            if (GROUP_ATTRS.includes(attr.type)) {\n                rst.push(attr);\n            }\n        });\n        return rst;\n    };\n    Geometry.prototype.getDefaultValue = function (attrName) {\n        var value;\n        var attr = this.getAttribute(attrName);\n        if (attr && isEmpty(attr.scales)) {\n            value = attr.values[0];\n        }\n        return value;\n    };\n    Geometry.prototype.getAttributeValues = function (attr, obj) {\n        var params = [];\n        var scales = attr.scales;\n        for (var index = 0, length_2 = scales.length; index < length_2; index++) {\n            var scale = scales[index];\n            var field = scale.field;\n            if (scale.isIdentity) {\n                params.push(scale.values);\n            }\n            else {\n                params.push(obj[field]);\n            }\n        }\n        return attr.mapping.apply(attr, params);\n    };\n    Geometry.prototype.getAdjust = function (adjustType) {\n        return this.adjusts[adjustType];\n    };\n    Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n        var shapeFactory = this.getShapeFactory();\n        return shapeFactory.getMarker(shapeName, cfg);\n    };\n    Geometry.prototype.getElementsBy = function (condition) {\n        return this.elements.filter(function (element) {\n            return condition(element);\n        });\n    };\n    Geometry.prototype.getElementId = function (data) {\n        data = isArray(data) ? data[0] : data;\n        var originData = data[FIELD_ORIGIN];\n        if (this.idFields.length) {\n            var elementId = originData[this.idFields[0]];\n            for (var index = 1; index < this.idFields.length; index++) {\n                elementId += '-' + originData[this.idFields[index]];\n            }\n            return elementId;\n        }\n        var type = this.type;\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var xField = xScale.field || 'x';\n        var yField = yScale.field || 'y';\n        var yVal = originData[yField];\n        var xVal;\n        if (xScale.type === 'identity') {\n            xVal = xScale.values[0];\n        }\n        else {\n            xVal = originData[xField];\n        }\n        var id;\n        if (type === 'interval' || type === 'schema') {\n            id = xVal;\n        }\n        else if (type === 'line' || type === 'area' || type === 'path') {\n            id = type;\n        }\n        else {\n            id = xVal + \"-\" + yVal;\n        }\n        var groupScales = this.groupScales;\n        for (var index = 0, length_3 = groupScales.length; index < length_3; index++) {\n            var groupScale = groupScales[index];\n            var field = groupScale.field;\n            id = id + \"-\" + originData[field];\n        }\n        var dodgeAdjust = this.getAdjust('dodge');\n        if (dodgeAdjust) {\n            var dodgeBy = dodgeAdjust.dodgeBy;\n            if (dodgeBy) {\n                id = id + \"-\" + originData[dodgeBy];\n            }\n        }\n        if (this.getAdjust('jitter')) {\n            id = id + \"-\" + data.x + \"-\" + data.y;\n        }\n        return id;\n    };\n    Geometry.prototype.getScaleFields = function () {\n        var fields = [];\n        var tmpMap = {};\n        var _a = this, attributeOption = _a.attributeOption, labelOption = _a.labelOption, tooltipOption = _a.tooltipOption;\n        for (var attributeType in attributeOption) {\n            if (attributeOption.hasOwnProperty(attributeType)) {\n                var eachOpt = attributeOption[attributeType];\n                if (eachOpt.fields) {\n                    uniq(eachOpt.fields, fields, tmpMap);\n                }\n                else if (eachOpt.values) {\n                    uniq(eachOpt.values, fields, tmpMap);\n                }\n            }\n        }\n        if (labelOption && labelOption.fields) {\n            uniq(labelOption.fields, fields, tmpMap);\n        }\n        if (isObject(tooltipOption) && tooltipOption.fields) {\n            uniq(tooltipOption.fields, fields, tmpMap);\n        }\n        return fields;\n    };\n    Geometry.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        var elements = this.elements;\n        for (var index = 0, length_4 = elements.length; index < length_4; index++) {\n            var element = elements[index];\n            element.changeVisible(visible);\n        }\n        if (visible) {\n            if (this.container) {\n                this.container.show();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.show();\n            }\n        }\n        else {\n            if (this.container) {\n                this.container.hide();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.hide();\n            }\n        }\n    };\n    Geometry.prototype.getGroupFields = function () {\n        var groupFields = [];\n        var tmpMap = {};\n        for (var index = 0, length_5 = GROUP_ATTRS.length; index < length_5; index++) {\n            var attributeName = GROUP_ATTRS[index];\n            var cfg = this.attributeOption[attributeName];\n            if (cfg && cfg.fields) {\n                uniq(cfg.fields, groupFields, tmpMap);\n            }\n        }\n        return groupFields;\n    };\n    Geometry.prototype.getXYFields = function () {\n        var _a = this.attributeOption.position.fields, x = _a[0], y = _a[1];\n        return [x, y];\n    };\n    Geometry.prototype.getShapes = function () {\n        return this.elements.map(function (element) { return element.shape; });\n    };\n    Geometry.prototype.getOffscreenGroup = function () {\n        if (!this.offscreenGroup) {\n            var GroupCtor = this.container.getGroupBase();\n            this.offscreenGroup = new GroupCtor({});\n        }\n        return this.offscreenGroup;\n    };\n    Geometry.prototype.sort = function (mappingArray) {\n        if (!this.hasSorted) {\n            var xScale_1 = this.getXScale();\n            var xField_1 = xScale_1.field;\n            for (var index = 0; index < mappingArray.length; index++) {\n                var itemArr = mappingArray[index];\n                itemArr.sort(function (obj1, obj2) {\n                    return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n                });\n            }\n        }\n        this.hasSorted = true;\n    };\n    Geometry.prototype.adjustScale = function () {\n        var yScale = this.getYScale();\n        if (yScale && this.getAdjust('stack')) {\n            this.updateStackRange(yScale, this.beforeMappingData);\n        }\n    };\n    Geometry.prototype.getShapeFactory = function () {\n        var shapeType = this.shapeType;\n        if (!getShapeFactory(shapeType)) {\n            return;\n        }\n        if (!this.shapeFactory) {\n            this.shapeFactory = clone(getShapeFactory(shapeType));\n        }\n        this.shapeFactory.coordinate = this.coordinate;\n        this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n        return this.shapeFactory;\n    };\n    Geometry.prototype.createShapePointsCfg = function (obj) {\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var x = this.normalizeValues(obj[xScale.field], xScale);\n        var y;\n        if (yScale) {\n            y = this.normalizeValues(obj[yScale.field], yScale);\n        }\n        else {\n            y = obj.y ? obj.y : 0.1;\n        }\n        return {\n            x: x,\n            y: y,\n            y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n        };\n    };\n    Geometry.prototype.createElement = function (mappingDatum, isUpdate) {\n        if (isUpdate === void 0) {\n            isUpdate = false;\n        }\n        var container = this.container;\n        var shapeCfg = this.getDrawCfg(mappingDatum);\n        var shapeFactory = this.getShapeFactory();\n        var element = new Element({\n            shapeFactory: shapeFactory,\n            container: container,\n            offscreenGroup: this.getOffscreenGroup(),\n        });\n        element.animate = this.animateOption;\n        element.geometry = this;\n        element.draw(shapeCfg, isUpdate);\n        return element;\n    };\n    Geometry.prototype.getDrawCfg = function (mappingDatum) {\n        var originData = mappingDatum[FIELD_ORIGIN];\n        var cfg = {\n            mappingData: mappingDatum,\n            data: originData,\n            x: mappingDatum.x,\n            y: mappingDatum.y,\n            color: mappingDatum.color,\n            size: mappingDatum.size,\n            isInCircle: this.coordinate.isPolar,\n        };\n        var shapeName = mappingDatum.shape;\n        if (!shapeName && this.getShapeFactory()) {\n            shapeName = this.getShapeFactory().defaultShapeType;\n        }\n        cfg.shape = shapeName;\n        var theme = this.theme.geometries[this.shapeType];\n        cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n        var styleOption = this.styleOption;\n        if (styleOption) {\n            cfg.style = this.getStyleCfg(styleOption, originData);\n        }\n        if (this.generatePoints) {\n            cfg.points = mappingDatum.points;\n            cfg.nextPoints = mappingDatum.nextPoints;\n        }\n        return cfg;\n    };\n    Geometry.prototype.createElements = function (mappingData, index, isUpdate) {\n        if (isUpdate === void 0) {\n            isUpdate = false;\n        }\n        var _a = this, lastElementsMap = _a.lastElementsMap, elementsMap = _a.elementsMap, elements = _a.elements;\n        for (var subIndex = 0, length_6 = mappingData.length; subIndex < length_6; subIndex++) {\n            var mappingDatum = mappingData[subIndex];\n            var id = this.getElementId(mappingDatum);\n            if (elementsMap[id]) {\n                id = id + \"-\" + index + \"-\" + subIndex;\n            }\n            var result = lastElementsMap[id];\n            if (!result) {\n                result = this.createElement(mappingDatum, isUpdate);\n            }\n            else {\n                var currentShapeCfg = this.getDrawCfg(mappingDatum);\n                var preShapeCfg = result.getModel();\n                if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n                    result.animate = this.animateOption;\n                    result.update(currentShapeCfg);\n                }\n                delete lastElementsMap[id];\n            }\n            elements.push(result);\n            elementsMap[id] = result;\n        }\n        return elements;\n    };\n    Geometry.prototype.getLabelType = function () {\n        var _a = this, labelOption = _a.labelOption, coordinate = _a.coordinate, type = _a.type;\n        var coordinateType = coordinate.type;\n        var labelType = get(labelOption, ['cfg', 'type']);\n        if (!labelType) {\n            if (coordinateType === 'polar') {\n                labelType = 'polar';\n            }\n            else if (coordinateType === 'theta') {\n                labelType = 'pie';\n            }\n            else if (type === 'interval' || type === 'polygon') {\n                labelType = 'interval';\n            }\n            else {\n                labelType = 'base';\n            }\n        }\n        return labelType;\n    };\n    Geometry.prototype.getYMinValue = function () {\n        var yScale = this.getYScale();\n        var min = yScale.min, max = yScale.max;\n        var value;\n        if (min >= 0) {\n            value = min;\n        }\n        else if (max <= 0) {\n            value = max;\n        }\n        else {\n            value = 0;\n        }\n        return value;\n    };\n    Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n        if (isNil(field) || isObject(field)) {\n            if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n                set(this.attributeOption, attrName, {\n                    fields: field.values,\n                });\n            }\n            else {\n                set(this.attributeOption, attrName, field);\n            }\n        }\n        else {\n            var attrCfg = {};\n            if (isNumber(field)) {\n                attrCfg.values = [field];\n            }\n            else {\n                attrCfg.fields = parseFields(field);\n            }\n            if (cfg) {\n                if (isFunction(cfg)) {\n                    attrCfg.callback = cfg;\n                }\n                else {\n                    attrCfg.values = cfg;\n                }\n            }\n            set(this.attributeOption, attrName, attrCfg);\n        }\n    };\n    Geometry.prototype.initAttributes = function () {\n        var _this = this;\n        var _a = this, attributes = _a.attributes, attributeOption = _a.attributeOption, theme = _a.theme, shapeType = _a.shapeType;\n        this.groupScales = [];\n        var tmpMap = {};\n        var _loop_1 = function (attrType) {\n            if (attributeOption.hasOwnProperty(attrType)) {\n                var option = attributeOption[attrType];\n                if (!option) {\n                    return { value: void 0 };\n                }\n                var attrCfg = __assign({}, option);\n                var callback = attrCfg.callback, values = attrCfg.values, _a = attrCfg.fields, fields = _a === void 0 ? [] : _a;\n                var scales = fields.map(function (field) {\n                    var scale = _this.scales[field];\n                    if (scale.isCategory && !tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n                        _this.groupScales.push(scale);\n                        tmpMap[field] = true;\n                    }\n                    return scale;\n                });\n                attrCfg.scales = scales;\n                if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n                    attrCfg.values = scales[0].values;\n                }\n                else if (!callback && !values) {\n                    if (attrType === 'size') {\n                        attrCfg.values = theme.sizes;\n                    }\n                    else if (attrType === 'shape') {\n                        attrCfg.values = theme.shapes[shapeType] || [];\n                    }\n                    else if (attrType === 'color') {\n                        if (scales.length) {\n                            attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n                        }\n                        else {\n                            attrCfg.values = theme.colors10;\n                        }\n                    }\n                }\n                var AttributeCtor = getAttributeClass(attrType);\n                attributes[attrType] = new AttributeCtor(attrCfg);\n            }\n        };\n        for (var attrType in attributeOption) {\n            var state_1 = _loop_1(attrType);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n    };\n    Geometry.prototype.processData = function (data) {\n        this.hasSorted = false;\n        var scales = this.getAttribute('position').scales;\n        var categoryScales = scales.filter(function (scale) { return scale.isCategory; });\n        var groupedArray = this.groupData(data);\n        var beforeAdjust = [];\n        for (var i = 0, len = groupedArray.length; i < len; i++) {\n            var subData = groupedArray[i];\n            var arr = [];\n            for (var j = 0, subLen = subData.length; j < subLen; j++) {\n                var originData = subData[j];\n                var item = {};\n                for (var k in originData) {\n                    item[k] = originData[k];\n                }\n                item[FIELD_ORIGIN] = originData;\n                for (var _i = 0, categoryScales_1 = categoryScales; _i < categoryScales_1.length; _i++) {\n                    var scale = categoryScales_1[_i];\n                    var field = scale.field;\n                    item[field] = scale.translate(item[field]);\n                }\n                arr.push(item);\n            }\n            beforeAdjust.push(arr);\n        }\n        var dataArray = this.adjustData(beforeAdjust);\n        this.beforeMappingData = dataArray;\n        return dataArray;\n    };\n    Geometry.prototype.adjustData = function (dataArray) {\n        var adjustOption = this.adjustOption;\n        var result = dataArray;\n        if (adjustOption) {\n            var xScale = this.getXScale();\n            var yScale = this.getYScale();\n            var xField = xScale.field;\n            var yField = yScale ? yScale.field : null;\n            for (var i = 0, len = adjustOption.length; i < len; i++) {\n                var adjust = adjustOption[i];\n                var adjustCfg = __assign({ xField: xField,\n                    yField: yField }, adjust);\n                var type = adjust.type;\n                if (type === 'dodge') {\n                    var adjustNames = [];\n                    if (xScale.isCategory || xScale.type === 'identity') {\n                        adjustNames.push('x');\n                    }\n                    else if (!yScale) {\n                        adjustNames.push('y');\n                    }\n                    else {\n                        throw new Error('dodge is not support linear attribute, please use category attribute!');\n                    }\n                    adjustCfg.adjustNames = adjustNames;\n                    adjustCfg.dodgeRatio = this.theme.columnWidthRatio;\n                }\n                else if (type === 'stack') {\n                    var coordinate = this.coordinate;\n                    if (!yScale) {\n                        adjustCfg.height = coordinate.getHeight();\n                        var size = this.getDefaultValue('size') || 3;\n                        adjustCfg.size = size;\n                    }\n                    if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n                        adjustCfg.reverseOrder = true;\n                    }\n                }\n                var adjustCtor = getAdjustClass(type);\n                var adjustInstance = new adjustCtor(adjustCfg);\n                result = adjustInstance.process(result);\n                this.adjusts[type] = adjustInstance;\n            }\n        }\n        return result;\n    };\n    Geometry.prototype.groupData = function (data) {\n        var groupScales = this.getGroupScales();\n        var scaleDefs = this.scaleDefs;\n        var appendConditions = {};\n        var groupFields = [];\n        for (var index = 0; index < groupScales.length; index++) {\n            var scale = groupScales[index];\n            var field = scale.field;\n            groupFields.push(field);\n            if (get(scaleDefs, [field, 'values'])) {\n                appendConditions[field] = scaleDefs[field].values;\n            }\n        }\n        return group(data, groupFields, appendConditions);\n    };\n    Geometry.prototype.updateStackRange = function (scale, dataArray) {\n        var mergeArray = flatten(dataArray);\n        var field = scale.field;\n        var min = scale.min;\n        var max = scale.max;\n        for (var index = 0; index < mergeArray.length; index++) {\n            var obj = mergeArray[index];\n            var tmpMin = Math.min.apply(null, obj[field]);\n            var tmpMax = Math.max.apply(null, obj[field]);\n            if (tmpMin < min) {\n                min = tmpMin;\n            }\n            if (tmpMax > max) {\n                max = tmpMax;\n            }\n        }\n        var scaleDefs = this.scaleDefs;\n        var cfg = {};\n        if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n            cfg.min = min;\n        }\n        if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n            cfg.max = max;\n        }\n        scale.change(cfg);\n    };\n    Geometry.prototype.beforeMapping = function (beforeMappingData) {\n        var source = beforeMappingData;\n        if (this.sortable) {\n            this.sort(source);\n        }\n        if (this.generatePoints) {\n            for (var index = 0, length_7 = source.length; index < length_7; index++) {\n                var currentData = source[index];\n                this.generateShapePoints(currentData);\n                var nextData = source[index + 1];\n                if (nextData) {\n                    this.generateShapePoints(nextData);\n                    currentData[0].nextPoints = nextData[0].points;\n                }\n            }\n        }\n        return source;\n    };\n    Geometry.prototype.generateShapePoints = function (data) {\n        var shapeFactory = this.getShapeFactory();\n        var shapeAttr = this.getAttribute('shape');\n        for (var index = 0; index < data.length; index++) {\n            var obj = data[index];\n            var cfg = this.createShapePointsCfg(obj);\n            var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n            var points = shapeFactory.getShapePoints(shape, cfg);\n            obj.points = points;\n        }\n    };\n    Geometry.prototype.normalizeValues = function (values, scale) {\n        var rst = [];\n        if (isArray(values)) {\n            for (var index = 0; index < values.length; index++) {\n                var value = values[index];\n                rst.push(scale.scale(value));\n            }\n        }\n        else {\n            rst = scale.scale(values);\n        }\n        return rst;\n    };\n    Geometry.prototype.mapping = function (data) {\n        var attributes = this.attributes;\n        var mappingData = [];\n        for (var index = 0; index < data.length; index++) {\n            var record = data[index];\n            var newRecord = {\n                _origin: record[FIELD_ORIGIN],\n                points: record.points,\n                nextPoints: record.nextPoints,\n            };\n            for (var k in attributes) {\n                if (attributes.hasOwnProperty(k)) {\n                    var attr = attributes[k];\n                    var names = attr.names;\n                    var values = this.getAttributeValues(attr, record);\n                    if (names.length > 1) {\n                        for (var j = 0; j < values.length; j += 1) {\n                            var val = values[j];\n                            var name_1 = names[j];\n                            newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val;\n                        }\n                    }\n                    else {\n                        newRecord[names[0]] = values.length === 1 ? values[0] : values;\n                    }\n                }\n            }\n            this.convertPoint(newRecord);\n            mappingData.push(newRecord);\n        }\n        return mappingData;\n    };\n    Geometry.prototype.convertPoint = function (mappingRecord) {\n        var x = mappingRecord.x, y = mappingRecord.y;\n        var rstX;\n        var rstY;\n        var obj;\n        var coordinate = this.coordinate;\n        if (isArray(x) && isArray(y)) {\n            rstX = [];\n            rstY = [];\n            for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n                obj = coordinate.convert({\n                    x: x[i],\n                    y: y[j],\n                });\n                rstX.push(obj.x);\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(y)) {\n            rstY = [];\n            for (var index = 0; index < y.length; index++) {\n                var yVal = y[index];\n                obj = coordinate.convert({\n                    x: x,\n                    y: yVal,\n                });\n                if (rstX && rstX !== obj.x) {\n                    if (!isArray(rstX)) {\n                        rstX = [rstX];\n                    }\n                    rstX.push(obj.x);\n                }\n                else {\n                    rstX = obj.x;\n                }\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(x)) {\n            rstX = [];\n            for (var index = 0; index < x.length; index++) {\n                var xVal = x[index];\n                obj = coordinate.convert({\n                    x: xVal,\n                    y: y,\n                });\n                if (rstY && rstY !== obj.y) {\n                    if (!isArray(rstY)) {\n                        rstY = [rstY];\n                    }\n                    rstY.push(obj.y);\n                }\n                else {\n                    rstY = obj.y;\n                }\n                rstX.push(obj.x);\n            }\n        }\n        else {\n            var point = coordinate.convert({\n                x: x,\n                y: y,\n            });\n            rstX = point.x;\n            rstY = point.y;\n        }\n        mappingRecord.x = rstX;\n        mappingRecord.y = rstY;\n    };\n    Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n        var _a = styleOption.fields, fields = _a === void 0 ? [] : _a, callback = styleOption.callback, cfg = styleOption.cfg;\n        if (cfg) {\n            return cfg;\n        }\n        var params = fields.map(function (field) {\n            return originData[field];\n        });\n        return callback.apply(void 0, params);\n    };\n    Geometry.prototype.setCfg = function (cfg) {\n        var _this = this;\n        var coordinate = cfg.coordinate, data = cfg.data, theme = cfg.theme, scaleDefs = cfg.scaleDefs;\n        if (coordinate) {\n            this.coordinate = coordinate;\n        }\n        if (data) {\n            this.data = data;\n        }\n        if (scaleDefs) {\n            this.scaleDefs = scaleDefs;\n            this.idFields = [];\n            each(scaleDefs, function (scaleDef, field) {\n                if (scaleDef && scaleDef.key) {\n                    _this.idFields.push(field);\n                }\n            });\n        }\n        if (theme) {\n            this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme;\n        }\n    };\n    Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n        if (isUpdate === void 0) {\n            isUpdate = false;\n        }\n        var geometryLabel = this.geometryLabel;\n        if (!geometryLabel) {\n            var labelType = this.getLabelType();\n            var GeometryLabelsCtor = getGeometryLabel(labelType);\n            geometryLabel = new GeometryLabelsCtor(this);\n            this.geometryLabel = geometryLabel;\n        }\n        geometryLabel.render(mappingArray, isUpdate);\n        var labelsMap = geometryLabel.labelsRenderer.shapesMap;\n        each(this.elementsMap, function (element, id) {\n            var labels = filterLabelsById(id, labelsMap);\n            if (labels.length) {\n                element.labelShape = labels;\n                for (var i = 0; i < labels.length; i++) {\n                    var label = labels[i];\n                    var labelChildren = label.getChildren();\n                    for (var j = 0; j < labelChildren.length; j++) {\n                        var child = labelChildren[j];\n                        child.cfg.name = ['element', 'label'];\n                        child.cfg.element = element;\n                    }\n                }\n            }\n        });\n    };\n    Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n        return (!isUpdate &&\n            this.animateOption &&\n            (get(this.animateOption, 'appear') === undefined ||\n                (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined)));\n    };\n    return Geometry;\n}(Base));\nexport default Geometry;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/base.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/geometry/base.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set, } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\n// 根据 elementId 查找对应的 label，因为有可能一个 element 对应多个 labels，所以在给 labels 打标识时做了处理\n// 打标规则详见 ./label/base.ts#L263\nfunction filterLabelsById(id, labelsMap) {\n    var labels = [];\n    each(labelsMap, function (label, labelId) {\n        var elementId = labelId.split(' ')[0];\n        if (elementId === id) {\n            labels.push(label);\n        }\n    });\n    return labels;\n}\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nvar Geometry = /** @class */ (function (_super) {\n    __extends(Geometry, _super);\n    /**\n     * 创建 Geometry 实例。\n     * @param cfg\n     */\n    function Geometry(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        /** Geometry 几何标记类型。 */\n        _this.type = 'base';\n        // 内部产生的属性\n        /** Attribute map  */\n        _this.attributes = {};\n        /** Element map */\n        _this.elements = [];\n        /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n        _this.elementsMap = {};\n        /** animate 配置项 */\n        _this.animateOption = true;\n        /** 图形属性映射配置 */\n        _this.attributeOption = {};\n        /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n        _this.lastElementsMap = {};\n        /** 是否生成多个点来绘制图形。 */\n        _this.generatePoints = false;\n        /** 存储发生图形属性映射前的数据 */\n        _this.beforeMappingData = null;\n        _this.adjusts = {};\n        _this.idFields = [];\n        _this.hasSorted = false;\n        _this.isCoordinateChanged = false;\n        var container = cfg.container, labelsContainer = cfg.labelsContainer, coordinate = cfg.coordinate, data = cfg.data, _a = cfg.sortable, sortable = _a === void 0 ? false : _a, _b = cfg.visible, visible = _b === void 0 ? true : _b, theme = cfg.theme, _c = cfg.scales, scales = _c === void 0 ? {} : _c, _d = cfg.scaleDefs, scaleDefs = _d === void 0 ? {} : _d;\n        _this.container = container;\n        _this.labelsContainer = labelsContainer;\n        _this.coordinate = coordinate;\n        _this.data = data;\n        _this.sortable = sortable;\n        _this.visible = visible;\n        _this.userTheme = theme;\n        _this.scales = scales;\n        _this.scaleDefs = scaleDefs;\n        return _this;\n    }\n    /**\n     * 配置 position 通道映射规则。\n     *\n     * @example\n     * ```typescript\n     * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n     * geometry.position('x*y');\n     * geometry.position([ 'x', 'y' ]);\n     * geometry.position({\n     *   fields: [ 'x', 'y' ],\n     * });\n     * ```\n     *\n     * @param cfg 映射规则\n     * @returns\n     */\n    Geometry.prototype.position = function (cfg) {\n        var positionCfg = cfg;\n        if (!isPlainObject(cfg)) {\n            // 字符串字段或者数组字段\n            positionCfg = {\n                fields: parseFields(cfg),\n            };\n        }\n        var fields = get(positionCfg, 'fields');\n        if (fields.length === 1) {\n            // 默认填充一维 1*xx\n            fields.unshift('1');\n            set(positionCfg, 'fields', fields);\n        }\n        set(this.attributeOption, 'position', positionCfg);\n        return this;\n    };\n    Geometry.prototype.color = function (field, cfg) {\n        this.createAttrOption('color', field, cfg);\n        return this;\n    };\n    Geometry.prototype.shape = function (field, cfg) {\n        this.createAttrOption('shape', field, cfg);\n        return this;\n    };\n    Geometry.prototype.size = function (field, cfg) {\n        this.createAttrOption('size', field, cfg);\n        return this;\n    };\n    /**\n     * 设置数据调整方式。G2 目前内置了四种类型：\n     * 1. dodge\n     * 2. stack\n     * 3. symmetric\n     * 4. jitter\n     *\n     *\n     * **Tip**\n     * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n     * ```typescript\n     * geometry.adjust('dodge', {\n     *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n     *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n     * });\n     * ```\n     *\n     * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n     * ```typescript\n     * geometry.adjust('stack', {\n     *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n     * });\n     * ```\n     *\n     * @example\n     * ```typescript\n     * geometry.adjust('stack');\n     *\n     * geometry.adjust({\n     *   type: 'stack',\n     *   reverseOrder: false,\n     * });\n     *\n     * // 组合使用 adjust\n     * geometry.adjust([ 'stack', 'dodge' ]);\n     *\n     * geometry.adjust([\n     *   { type: 'stack' },\n     *   { type: 'dodge', dodgeBy: 'x' },\n     * ]);\n     * ```\n     *\n     * @param adjustCfg 数据调整配置\n     * @returns\n     */\n    Geometry.prototype.adjust = function (adjustCfg) {\n        var adjusts = adjustCfg;\n        if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n            adjusts = [adjustCfg];\n        }\n        each(adjusts, function (adjust, index) {\n            if (!isObject(adjust)) {\n                adjusts[index] = { type: adjust };\n            }\n        });\n        this.adjustOption = adjusts;\n        return this;\n    };\n    Geometry.prototype.style = function (field, styleFunc) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.styleOption = {\n                fields: fields,\n                callback: styleFunc,\n            };\n        }\n        else {\n            var _a = field, fields = _a.fields, callback = _a.callback, cfg = _a.cfg;\n            if (fields || callback || cfg) {\n                this.styleOption = field;\n            }\n            else {\n                this.styleOption = {\n                    cfg: field,\n                };\n            }\n        }\n        return this;\n    };\n    Geometry.prototype.tooltip = function (field, cfg) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.tooltipOption = {\n                fields: fields,\n                callback: cfg,\n            };\n        }\n        else {\n            this.tooltipOption = field;\n        }\n        return this;\n    };\n    /**\n     * Geometry 动画配置。\n     *\n     * + `animate(false)` 关闭动画\n     * + `animate(true)` 开启动画，默认开启。\n     *\n     * 我们将动画分为四个场景：\n     * 1. appear: 图表第一次加载时的入场动画；\n     * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n     * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n     * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n     *\n     * @example\n     * ```typescript\n     * animate({\n     *   enter: {\n     *     duration: 1000, // enter 动画执行时间\n     *   },\n     *   leave: false, // 关闭 leave 销毁动画\n     * });\n     * ```\n     *\n     * @param cfg 动画配置\n     * @returns\n     */\n    Geometry.prototype.animate = function (cfg) {\n        this.animateOption = cfg;\n        return this;\n    };\n    Geometry.prototype.label = function (field, secondParam, thirdParam) {\n        if (isString(field)) {\n            var labelOption = {};\n            var fields = parseFields(field);\n            labelOption.fields = fields;\n            if (isFunction(secondParam)) {\n                labelOption.callback = secondParam;\n            }\n            else if (isPlainObject(secondParam)) {\n                labelOption.cfg = secondParam;\n            }\n            if (thirdParam) {\n                labelOption.cfg = thirdParam;\n            }\n            this.labelOption = labelOption;\n        }\n        else {\n            this.labelOption = field;\n        }\n        return this;\n    };\n    /**\n     * 设置状态对应的样式。\n     *\n     * @example\n     * ```ts\n     * chart.interval().state({\n     *   selected: {\n     *     animate: { duration: 100, easing: 'easeLinear' },\n     *     style: {\n     *       lineWidth: 2,\n     *       stroke: '#000',\n     *     },\n     *   },\n     * });\n     * ```\n     *\n     * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n     * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n     *\n     * ```ts\n     * chart.interval().shape('groupShape').state({\n     *   selected: {\n     *     style: {\n     *       0: { lineWidth: 2 },\n     *       1: { fillOpacity: 1 },\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @param cfg 状态样式\n     */\n    Geometry.prototype.state = function (cfg) {\n        this.stateOption = cfg;\n        return this;\n    };\n    /**\n     * 初始化 Geomtry 实例：\n     * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n     */\n    Geometry.prototype.init = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        this.setCfg(cfg);\n        this.initAttributes(); // 创建图形属性\n        // 数据加工：分组 -> 数字化 -> adjust\n        this.processData(this.data);\n        // 调整 scale\n        this.adjustScale();\n    };\n    /**\n     * Geometry 更新。\n     * @param [cfg] 更新的配置\n     */\n    Geometry.prototype.update = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        var data = cfg.data, isDataChanged = cfg.isDataChanged, isCoordinateChanged = cfg.isCoordinateChanged;\n        var _a = this, attributeOption = _a.attributeOption, lastAttributeOption = _a.lastAttributeOption;\n        if (!isEqual(attributeOption, lastAttributeOption)) {\n            // 映射发生改变，则重新创建图形属性\n            this.init(cfg);\n        }\n        else if (data && (isDataChanged || !isEqual(data, this.data))) {\n            // 数据发生变化\n            this.setCfg(cfg);\n            this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n        }\n        else {\n            // 有可能 coordinate 变化\n            this.setCfg(cfg);\n        }\n        // 调整 scale\n        this.adjustScale();\n        this.isCoordinateChanged = isCoordinateChanged;\n    };\n    /**\n     * 将原始数据映射至图形空间，同时创建图形对象。\n     */\n    Geometry.prototype.paint = function (isUpdate) {\n        var _this = this;\n        if (isUpdate === void 0) { isUpdate = false; }\n        if (this.animateOption) {\n            this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n        }\n        this.defaultSize = undefined;\n        this.elements = [];\n        this.elementsMap = {};\n        var offscreenGroup = this.getOffscreenGroup();\n        offscreenGroup.clear();\n        var beforeMappingData = this.beforeMappingData;\n        var dataArray = this.beforeMapping(beforeMappingData);\n        var mappingArray = [];\n        for (var index = 0, length_1 = dataArray.length; index < length_1; index++) {\n            var eachGroup = dataArray[index];\n            var mappingData = this.mapping(eachGroup);\n            mappingArray.push(mappingData);\n            this.createElements(mappingData, index, isUpdate);\n        }\n        if (this.canDoGroupAnimation(isUpdate)) {\n            // 如果用户没有配置 appear.animation，就默认走整体动画\n            var container = this.container;\n            var type = this.type;\n            var coordinate = this.coordinate;\n            var animateCfg = get(this.animateOption, 'appear');\n            var yScale = this.getYScale();\n            var yMinPoint = coordinate.convert({\n                x: 0,\n                y: yScale.scale(this.getYMinValue()),\n            });\n            doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n        }\n        // 添加 label\n        if (this.labelOption) {\n            this.renderLabels(flatten(mappingArray), isUpdate);\n        }\n        this.dataArray = mappingArray;\n        // 销毁被删除的 elements\n        each(this.lastElementsMap, function (deletedElement) {\n            // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n            deletedElement.animate = _this.animateOption;\n            deletedElement.destroy();\n        });\n        this.lastElementsMap = this.elementsMap;\n        // 缓存，用于更新\n        this.lastAttributeOption = __assign({}, this.attributeOption);\n        if (this.visible === false) {\n            // 用户在初始化的时候声明 visible: false\n            this.changeVisible(false);\n        }\n    };\n    /**\n     * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n     * @override\n     */\n    Geometry.prototype.clear = function () {\n        var _a = this, container = _a.container, geometryLabel = _a.geometryLabel, offscreenGroup = _a.offscreenGroup;\n        if (container) {\n            container.clear();\n        }\n        if (geometryLabel) {\n            geometryLabel.clear();\n        }\n        if (offscreenGroup) {\n            offscreenGroup.clear();\n        }\n        // 属性恢复至出厂状态\n        this.scaleDefs = undefined;\n        this.attributes = {};\n        this.scales = {};\n        this.elementsMap = {};\n        this.lastElementsMap = {};\n        this.elements = [];\n        this.adjusts = {};\n        this.dataArray = null;\n        this.beforeMappingData = null;\n        this.lastAttributeOption = undefined;\n        this.defaultSize = undefined;\n        this.idFields = [];\n        this.groupScales = undefined;\n        this.hasSorted = false;\n        this.isCoordinateChanged = false;\n    };\n    /**\n     * 销毁 Geometry 实例。\n     */\n    Geometry.prototype.destroy = function () {\n        this.clear();\n        var container = this.container;\n        container.remove(true);\n        if (this.offscreenGroup) {\n            this.offscreenGroup.remove(true);\n            this.offscreenGroup = null;\n        }\n        if (this.geometryLabel) {\n            this.geometryLabel.destroy();\n            this.geometryLabel = null;\n        }\n        this.theme = undefined;\n        this.shapeFactory = undefined;\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 获取决定分组的图形属性对应的 scale 实例。\n     * @returns\n     */\n    Geometry.prototype.getGroupScales = function () {\n        return this.groupScales;\n    };\n    /**\n     * 根据名字获取图形属性实例。\n     */\n    Geometry.prototype.getAttribute = function (name) {\n        return this.attributes[name];\n    };\n    /** 获取 x 轴对应的 scale 实例。 */\n    Geometry.prototype.getXScale = function () {\n        return this.getAttribute('position').scales[0];\n    };\n    /** 获取 y 轴对应的 scale 实例。 */\n    Geometry.prototype.getYScale = function () {\n        return this.getAttribute('position').scales[1];\n    };\n    /**\n     * 获取决定分组的图形属性实例。\n     */\n    Geometry.prototype.getGroupAttributes = function () {\n        var rst = [];\n        each(this.attributes, function (attr) {\n            if (GROUP_ATTRS.includes(attr.type)) {\n                rst.push(attr);\n            }\n        });\n        return rst;\n    };\n    /** 获取图形属性默认的映射值。 */\n    Geometry.prototype.getDefaultValue = function (attrName) {\n        var value;\n        var attr = this.getAttribute(attrName);\n        if (attr && isEmpty(attr.scales)) {\n            // 获取映射至常量的值\n            value = attr.values[0];\n        }\n        return value;\n    };\n    /**\n     * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n     * @param attr Attribute 图形属性实例。\n     * @param obj 需要进行映射的原始数据。\n     * @returns\n     */\n    Geometry.prototype.getAttributeValues = function (attr, obj) {\n        var params = [];\n        var scales = attr.scales;\n        for (var index = 0, length_2 = scales.length; index < length_2; index++) {\n            var scale = scales[index];\n            var field = scale.field;\n            if (scale.isIdentity) {\n                params.push(scale.values);\n            }\n            else {\n                params.push(obj[field]);\n            }\n        }\n        return attr.mapping.apply(attr, params);\n    };\n    Geometry.prototype.getAdjust = function (adjustType) {\n        return this.adjusts[adjustType];\n    };\n    /**\n     * 获取 shape 对应的 marker 样式。\n     * @param shapeName shape 具体名字\n     * @param cfg marker 信息\n     * @returns\n     */\n    Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n        var shapeFactory = this.getShapeFactory();\n        return shapeFactory.getMarker(shapeName, cfg);\n    };\n    /**\n     * 根据一定的规则查找 Geometry 的 Elements。\n     *\n     * ```typescript\n     * getElementsBy((element) => {\n     *   const data = element.getData();\n     *\n     *   return data.a === 'a';\n     * });\n     * ```\n     *\n     * @param condition 定义查找规则的回调函数。\n     * @returns\n     */\n    Geometry.prototype.getElementsBy = function (condition) {\n        return this.elements.filter(function (element) {\n            return condition(element);\n        });\n    };\n    /**\n     * 获取数据对应的唯一 id。\n     * @param data Element 对应的绘制数据\n     * @returns\n     */\n    Geometry.prototype.getElementId = function (data) {\n        data = isArray(data) ? data[0] : data;\n        var originData = data[FIELD_ORIGIN];\n        // 如果用户声明了使用哪些字段作为 id 值\n        if (this.idFields.length) {\n            var elementId = originData[this.idFields[0]];\n            for (var index = 1; index < this.idFields.length; index++) {\n                elementId += '-' + originData[this.idFields[index]];\n            }\n            return elementId;\n        }\n        var type = this.type;\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var xField = xScale.field || 'x';\n        var yField = yScale.field || 'y';\n        var yVal = originData[yField];\n        var xVal;\n        if (xScale.type === 'identity') {\n            xVal = xScale.values[0];\n        }\n        else {\n            xVal = originData[xField];\n        }\n        var id;\n        if (type === 'interval' || type === 'schema') {\n            id = xVal;\n        }\n        else if (type === 'line' || type === 'area' || type === 'path') {\n            id = type;\n        }\n        else {\n            id = xVal + \"-\" + yVal;\n        }\n        var groupScales = this.groupScales;\n        for (var index = 0, length_3 = groupScales.length; index < length_3; index++) {\n            var groupScale = groupScales[index];\n            var field = groupScale.field;\n            id = id + \"-\" + originData[field];\n        }\n        // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n        var dodgeAdjust = this.getAdjust('dodge');\n        if (dodgeAdjust) {\n            var dodgeBy = dodgeAdjust.dodgeBy;\n            if (dodgeBy) {\n                id = id + \"-\" + originData[dodgeBy];\n            }\n        }\n        if (this.getAdjust('jitter')) {\n            id = id + \"-\" + data.x + \"-\" + data.y;\n        }\n        return id;\n    };\n    /**\n     * 获取所有需要创建 scale 的字段名称。\n     */\n    Geometry.prototype.getScaleFields = function () {\n        var fields = [];\n        var tmpMap = {};\n        var _a = this, attributeOption = _a.attributeOption, labelOption = _a.labelOption, tooltipOption = _a.tooltipOption;\n        // 获取图形属性上的 fields\n        for (var attributeType in attributeOption) {\n            if (attributeOption.hasOwnProperty(attributeType)) {\n                var eachOpt = attributeOption[attributeType];\n                if (eachOpt.fields) {\n                    uniq(eachOpt.fields, fields, tmpMap);\n                }\n                else if (eachOpt.values) {\n                    // 考虑 size(10), shape('circle') 等场景\n                    uniq(eachOpt.values, fields, tmpMap);\n                }\n            }\n        }\n        // 获取 label 上的字段\n        if (labelOption && labelOption.fields) {\n            uniq(labelOption.fields, fields, tmpMap);\n        }\n        // 获取 tooltip 上的字段\n        if (isObject(tooltipOption) && tooltipOption.fields) {\n            uniq(tooltipOption.fields, fields, tmpMap);\n        }\n        return fields;\n    };\n    /**\n     * 显示或者隐藏 geometry。\n     * @param visible\n     */\n    Geometry.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        var elements = this.elements;\n        for (var index = 0, length_4 = elements.length; index < length_4; index++) {\n            var element = elements[index];\n            element.changeVisible(visible);\n        }\n        if (visible) {\n            if (this.container) {\n                this.container.show();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.show();\n            }\n        }\n        else {\n            if (this.container) {\n                this.container.hide();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.hide();\n            }\n        }\n    };\n    /**\n     * 获取当前配置中的所有分组 & 分类的字段。\n     * @return fields string[]\n     */\n    Geometry.prototype.getGroupFields = function () {\n        var groupFields = [];\n        var tmpMap = {}; // 用于去重过滤\n        for (var index = 0, length_5 = GROUP_ATTRS.length; index < length_5; index++) {\n            var attributeName = GROUP_ATTRS[index];\n            var cfg = this.attributeOption[attributeName];\n            if (cfg && cfg.fields) {\n                uniq(cfg.fields, groupFields, tmpMap);\n            }\n        }\n        return groupFields;\n    };\n    /**\n     * 获得图形的 x y 字段。\n     */\n    Geometry.prototype.getXYFields = function () {\n        var _a = this.attributeOption.position.fields, x = _a[0], y = _a[1];\n        return [x, y];\n    };\n    /**\n     * 获取该 Geometry 下所有生成的 shapes。\n     * @returns shapes\n     */\n    Geometry.prototype.getShapes = function () {\n        return this.elements.map(function (element) { return element.shape; });\n    };\n    /**\n     * 获取虚拟 Group。\n     * @returns\n     */\n    Geometry.prototype.getOffscreenGroup = function () {\n        if (!this.offscreenGroup) {\n            var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n            this.offscreenGroup = new GroupCtor({});\n        }\n        return this.offscreenGroup;\n    };\n    // 对数据进行排序\n    Geometry.prototype.sort = function (mappingArray) {\n        if (!this.hasSorted) {\n            // 未发生过排序\n            var xScale_1 = this.getXScale();\n            var xField_1 = xScale_1.field;\n            for (var index = 0; index < mappingArray.length; index++) {\n                var itemArr = mappingArray[index];\n                itemArr.sort(function (obj1, obj2) {\n                    return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n                });\n            }\n        }\n        this.hasSorted = true;\n    };\n    /**\n     * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n     */\n    Geometry.prototype.adjustScale = function () {\n        var yScale = this.getYScale();\n        // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n        if (yScale && this.getAdjust('stack')) {\n            this.updateStackRange(yScale, this.beforeMappingData);\n        }\n    };\n    /**\n     * 获取当前 Geometry 对应的 Shape 工厂实例。\n     */\n    Geometry.prototype.getShapeFactory = function () {\n        var shapeType = this.shapeType;\n        if (!getShapeFactory(shapeType)) {\n            return;\n        }\n        if (!this.shapeFactory) {\n            this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n        }\n        // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n        this.shapeFactory.coordinate = this.coordinate;\n        // theme 原因同上\n        this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n        return this.shapeFactory;\n    };\n    /**\n     * 获取每个 Shape 对应的关键点数据。\n     * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n     * @returns\n     */\n    Geometry.prototype.createShapePointsCfg = function (obj) {\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var x = this.normalizeValues(obj[xScale.field], xScale);\n        var y; // 存在没有 y 的情况\n        if (yScale) {\n            y = this.normalizeValues(obj[yScale.field], yScale);\n        }\n        else {\n            y = obj.y ? obj.y : 0.1;\n        }\n        return {\n            x: x,\n            y: y,\n            y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n        };\n    };\n    /**\n     * 创建 Element 实例。\n     * @param mappingDatum Element 对应的绘制数据\n     * @param [isUpdate] 是否处于更新阶段\n     * @returns element 返回创建的 Element 实例\n     */\n    Geometry.prototype.createElement = function (mappingDatum, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        var container = this.container;\n        var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n        var shapeFactory = this.getShapeFactory();\n        var element = new Element({\n            shapeFactory: shapeFactory,\n            container: container,\n            offscreenGroup: this.getOffscreenGroup(),\n        });\n        element.animate = this.animateOption;\n        element.geometry = this;\n        element.draw(shapeCfg, isUpdate); // 绘制\n        return element;\n    };\n    /**\n     * 获取每条数据对应的图形绘制数据。\n     * @param mappingDatum 映射后的数据\n     * @returns draw cfg\n     */\n    Geometry.prototype.getDrawCfg = function (mappingDatum) {\n        var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n        var cfg = {\n            mappingData: mappingDatum,\n            data: originData,\n            x: mappingDatum.x,\n            y: mappingDatum.y,\n            color: mappingDatum.color,\n            size: mappingDatum.size,\n            isInCircle: this.coordinate.isPolar,\n        };\n        var shapeName = mappingDatum.shape;\n        if (!shapeName && this.getShapeFactory()) {\n            shapeName = this.getShapeFactory().defaultShapeType;\n        }\n        cfg.shape = shapeName;\n        // 获取默认样式\n        var theme = this.theme.geometries[this.shapeType];\n        cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n        var styleOption = this.styleOption;\n        if (styleOption) {\n            cfg.style = this.getStyleCfg(styleOption, originData);\n        }\n        if (this.generatePoints) {\n            cfg.points = mappingDatum.points;\n            cfg.nextPoints = mappingDatum.nextPoints;\n        }\n        return cfg;\n    };\n    /**\n     * 创建所有的 Elements。\n     * @param mappingData\n     * @param [isUpdate]\n     * @returns elements\n     */\n    Geometry.prototype.createElements = function (mappingData, index, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        var _a = this, lastElementsMap = _a.lastElementsMap, elementsMap = _a.elementsMap, elements = _a.elements;\n        for (var subIndex = 0, length_6 = mappingData.length; subIndex < length_6; subIndex++) {\n            var mappingDatum = mappingData[subIndex];\n            var id = this.getElementId(mappingDatum);\n            if (elementsMap[id]) {\n                // 存在重复数据，则根据再根据 index 进行区分\n                id = id + \"-\" + index + \"-\" + subIndex;\n            }\n            var result = lastElementsMap[id];\n            if (!result) {\n                // 创建新的 element\n                result = this.createElement(mappingDatum, isUpdate);\n            }\n            else {\n                // element 已经创建\n                var currentShapeCfg = this.getDrawCfg(mappingDatum);\n                var preShapeCfg = result.getModel();\n                if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n                    result.animate = this.animateOption;\n                    // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n                    result.update(currentShapeCfg); // 更新对应的 element\n                }\n                delete lastElementsMap[id];\n            }\n            elements.push(result);\n            elementsMap[id] = result;\n        }\n        return elements;\n    };\n    /**\n     * 获取渲染的 label 类型。\n     */\n    Geometry.prototype.getLabelType = function () {\n        var _a = this, labelOption = _a.labelOption, coordinate = _a.coordinate, type = _a.type;\n        var coordinateType = coordinate.type;\n        var labelType = get(labelOption, ['cfg', 'type']);\n        if (!labelType) {\n            // 用户未定义，则进行默认的逻辑\n            if (coordinateType === 'polar') {\n                // 极坐标下使用通用的极坐标文本\n                labelType = 'polar';\n            }\n            else if (coordinateType === 'theta') {\n                // theta 坐标系下使用饼图文本\n                labelType = 'pie';\n            }\n            else if (type === 'interval' || type === 'polygon') {\n                labelType = 'interval';\n            }\n            else {\n                labelType = 'base';\n            }\n        }\n        return labelType;\n    };\n    /**\n     * 获取 Y 轴上的最小值。\n     */\n    Geometry.prototype.getYMinValue = function () {\n        var yScale = this.getYScale();\n        var min = yScale.min, max = yScale.max;\n        var value;\n        if (min >= 0) {\n            value = min;\n        }\n        else if (max <= 0) {\n            // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n            value = max;\n        }\n        else {\n            value = 0;\n        }\n        return value;\n    };\n    // 创建图形属性相关的配置项\n    Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n        if (isNil(field) || isObject(field)) {\n            if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n                // shape({ values: [ 'funnel' ] })\n                set(this.attributeOption, attrName, {\n                    fields: field.values,\n                });\n            }\n            else {\n                set(this.attributeOption, attrName, field);\n            }\n        }\n        else {\n            var attrCfg = {};\n            if (isNumber(field)) {\n                // size(3)\n                attrCfg.values = [field];\n            }\n            else {\n                attrCfg.fields = parseFields(field);\n            }\n            if (cfg) {\n                if (isFunction(cfg)) {\n                    attrCfg.callback = cfg;\n                }\n                else {\n                    attrCfg.values = cfg;\n                }\n            }\n            set(this.attributeOption, attrName, attrCfg);\n        }\n    };\n    Geometry.prototype.initAttributes = function () {\n        var _this = this;\n        var _a = this, attributes = _a.attributes, attributeOption = _a.attributeOption, theme = _a.theme, shapeType = _a.shapeType;\n        this.groupScales = [];\n        var tmpMap = {};\n        var _loop_1 = function (attrType) {\n            if (attributeOption.hasOwnProperty(attrType)) {\n                var option = attributeOption[attrType];\n                if (!option) {\n                    return { value: void 0 };\n                }\n                var attrCfg = __assign({}, option);\n                var callback = attrCfg.callback, values = attrCfg.values, _a = attrCfg.fields, fields = _a === void 0 ? [] : _a;\n                // 获取每一个字段对应的 scale\n                var scales = fields.map(function (field) {\n                    var scale = _this.scales[field];\n                    if (scale.isCategory && !tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n                        _this.groupScales.push(scale);\n                        tmpMap[field] = true;\n                    }\n                    return scale;\n                });\n                attrCfg.scales = scales;\n                if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n                    // 用户在图形通道上声明了常量字段 color('red'), size(5)\n                    attrCfg.values = scales[0].values;\n                }\n                else if (!callback && !values) {\n                    // 用户没有指定任何规则，则使用默认的映射规则\n                    if (attrType === 'size') {\n                        attrCfg.values = theme.sizes;\n                    }\n                    else if (attrType === 'shape') {\n                        attrCfg.values = theme.shapes[shapeType] || [];\n                    }\n                    else if (attrType === 'color') {\n                        if (scales.length) {\n                            // 根据数值个数使用对应的色板\n                            attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n                        }\n                        else {\n                            attrCfg.values = theme.colors10;\n                        }\n                    }\n                }\n                var AttributeCtor = getAttributeClass(attrType);\n                attributes[attrType] = new AttributeCtor(attrCfg);\n            }\n        };\n        // 遍历每一个 attrOption，各自创建 Attribute 实例\n        for (var attrType in attributeOption) {\n            var state_1 = _loop_1(attrType);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n    };\n    // 处理数据：分组 -> 数字化 -> adjust 调整\n    Geometry.prototype.processData = function (data) {\n        this.hasSorted = false;\n        var scales = this.getAttribute('position').scales;\n        var categoryScales = scales.filter(function (scale) { return scale.isCategory; });\n        var groupedArray = this.groupData(data); // 数据分组\n        var beforeAdjust = [];\n        for (var i = 0, len = groupedArray.length; i < len; i++) {\n            var subData = groupedArray[i];\n            var arr = [];\n            for (var j = 0, subLen = subData.length; j < subLen; j++) {\n                var originData = subData[j];\n                var item = {};\n                // tslint:disable-next-line: forin\n                for (var k in originData) {\n                    item[k] = originData[k];\n                }\n                item[FIELD_ORIGIN] = originData;\n                // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n                for (var _i = 0, categoryScales_1 = categoryScales; _i < categoryScales_1.length; _i++) {\n                    var scale = categoryScales_1[_i];\n                    var field = scale.field;\n                    item[field] = scale.translate(item[field]);\n                }\n                arr.push(item);\n            }\n            beforeAdjust.push(arr);\n        }\n        var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n        this.beforeMappingData = dataArray;\n        return dataArray;\n    };\n    // 调整数据\n    Geometry.prototype.adjustData = function (dataArray) {\n        var adjustOption = this.adjustOption;\n        var result = dataArray;\n        if (adjustOption) {\n            var xScale = this.getXScale();\n            var yScale = this.getYScale();\n            var xField = xScale.field;\n            var yField = yScale ? yScale.field : null;\n            for (var i = 0, len = adjustOption.length; i < len; i++) {\n                var adjust = adjustOption[i];\n                var adjustCfg = __assign({ xField: xField,\n                    yField: yField }, adjust);\n                var type = adjust.type;\n                if (type === 'dodge') {\n                    var adjustNames = [];\n                    if (xScale.isCategory || xScale.type === 'identity') {\n                        adjustNames.push('x');\n                    }\n                    else if (!yScale) {\n                        adjustNames.push('y');\n                    }\n                    else {\n                        throw new Error('dodge is not support linear attribute, please use category attribute!');\n                    }\n                    adjustCfg.adjustNames = adjustNames;\n                    // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n                    adjustCfg.dodgeRatio = this.theme.columnWidthRatio;\n                }\n                else if (type === 'stack') {\n                    var coordinate = this.coordinate;\n                    if (!yScale) {\n                        // 一维的情况下获取高度和默认size\n                        adjustCfg.height = coordinate.getHeight();\n                        var size = this.getDefaultValue('size') || 3;\n                        adjustCfg.size = size;\n                    }\n                    // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n                    if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n                        adjustCfg.reverseOrder = true;\n                    }\n                }\n                var adjustCtor = getAdjustClass(type);\n                var adjustInstance = new adjustCtor(adjustCfg);\n                result = adjustInstance.process(result);\n                this.adjusts[type] = adjustInstance;\n            }\n        }\n        return result;\n    };\n    // 对数据进行分组\n    Geometry.prototype.groupData = function (data) {\n        var groupScales = this.getGroupScales();\n        var scaleDefs = this.scaleDefs;\n        var appendConditions = {};\n        var groupFields = [];\n        for (var index = 0; index < groupScales.length; index++) {\n            var scale = groupScales[index];\n            var field = scale.field;\n            groupFields.push(field);\n            if (get(scaleDefs, [field, 'values'])) {\n                // 用户通过 view.scale() 接口指定了 values 属性\n                appendConditions[field] = scaleDefs[field].values;\n            }\n        }\n        return group(data, groupFields, appendConditions);\n    };\n    // 更新发生层叠后的数据对应的度量范围\n    Geometry.prototype.updateStackRange = function (scale, dataArray) {\n        var mergeArray = flatten(dataArray);\n        var field = scale.field;\n        var min = scale.min;\n        var max = scale.max;\n        for (var index = 0; index < mergeArray.length; index++) {\n            var obj = mergeArray[index];\n            var tmpMin = Math.min.apply(null, obj[field]);\n            var tmpMax = Math.max.apply(null, obj[field]);\n            if (tmpMin < min) {\n                min = tmpMin;\n            }\n            if (tmpMax > max) {\n                max = tmpMax;\n            }\n        }\n        var scaleDefs = this.scaleDefs;\n        var cfg = {};\n        if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n            // 用户如果在列定义中定义了 min，则以用户定义的为准\n            cfg.min = min;\n        }\n        if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n            // 用户如果在列定义中定义了 max\n            cfg.max = max;\n        }\n        scale.change(cfg);\n    };\n    // 将数据映射至图形空间前的操作：排序以及关键点的生成\n    Geometry.prototype.beforeMapping = function (beforeMappingData) {\n        // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n        // const source = clone(beforeMappingData);\n        var source = beforeMappingData;\n        if (this.sortable) {\n            this.sort(source);\n        }\n        if (this.generatePoints) {\n            // 需要生成关键点\n            for (var index = 0, length_7 = source.length; index < length_7; index++) {\n                var currentData = source[index];\n                this.generateShapePoints(currentData);\n                var nextData = source[index + 1];\n                if (nextData) {\n                    this.generateShapePoints(nextData);\n                    currentData[0].nextPoints = nextData[0].points;\n                }\n            }\n        }\n        return source;\n    };\n    // 生成 shape 的关键点\n    Geometry.prototype.generateShapePoints = function (data) {\n        var shapeFactory = this.getShapeFactory();\n        var shapeAttr = this.getAttribute('shape');\n        for (var index = 0; index < data.length; index++) {\n            var obj = data[index];\n            var cfg = this.createShapePointsCfg(obj);\n            var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n            var points = shapeFactory.getShapePoints(shape, cfg);\n            obj.points = points;\n        }\n    };\n    // 将数据归一化\n    Geometry.prototype.normalizeValues = function (values, scale) {\n        var rst = [];\n        if (isArray(values)) {\n            for (var index = 0; index < values.length; index++) {\n                var value = values[index];\n                rst.push(scale.scale(value));\n            }\n        }\n        else {\n            rst = scale.scale(values);\n        }\n        return rst;\n    };\n    // 将数据映射至图形空间\n    Geometry.prototype.mapping = function (data) {\n        var attributes = this.attributes;\n        var mappingData = [];\n        for (var index = 0; index < data.length; index++) {\n            var record = data[index];\n            var newRecord = {\n                _origin: record[FIELD_ORIGIN],\n                points: record.points,\n                nextPoints: record.nextPoints,\n            };\n            for (var k in attributes) {\n                if (attributes.hasOwnProperty(k)) {\n                    var attr = attributes[k];\n                    var names = attr.names;\n                    var values = this.getAttributeValues(attr, record);\n                    if (names.length > 1) {\n                        // position 之类的生成多个字段的属性\n                        for (var j = 0; j < values.length; j += 1) {\n                            var val = values[j];\n                            var name_1 = names[j];\n                            newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n                        }\n                    }\n                    else {\n                        // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n                        // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n                        newRecord[names[0]] = values.length === 1 ? values[0] : values;\n                    }\n                }\n            }\n            this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n            mappingData.push(newRecord);\n        }\n        return mappingData;\n    };\n    // 将归一化的坐标值转换成画布坐标\n    Geometry.prototype.convertPoint = function (mappingRecord) {\n        var x = mappingRecord.x, y = mappingRecord.y;\n        var rstX;\n        var rstY;\n        var obj;\n        var coordinate = this.coordinate;\n        if (isArray(x) && isArray(y)) {\n            rstX = [];\n            rstY = [];\n            for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n                obj = coordinate.convert({\n                    x: x[i],\n                    y: y[j],\n                });\n                rstX.push(obj.x);\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(y)) {\n            rstY = [];\n            for (var index = 0; index < y.length; index++) {\n                var yVal = y[index];\n                obj = coordinate.convert({\n                    x: x,\n                    y: yVal,\n                });\n                if (rstX && rstX !== obj.x) {\n                    if (!isArray(rstX)) {\n                        rstX = [rstX];\n                    }\n                    rstX.push(obj.x);\n                }\n                else {\n                    rstX = obj.x;\n                }\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(x)) {\n            rstX = [];\n            for (var index = 0; index < x.length; index++) {\n                var xVal = x[index];\n                obj = coordinate.convert({\n                    x: xVal,\n                    y: y,\n                });\n                if (rstY && rstY !== obj.y) {\n                    if (!isArray(rstY)) {\n                        rstY = [rstY];\n                    }\n                    rstY.push(obj.y);\n                }\n                else {\n                    rstY = obj.y;\n                }\n                rstX.push(obj.x);\n            }\n        }\n        else {\n            var point = coordinate.convert({\n                x: x,\n                y: y,\n            });\n            rstX = point.x;\n            rstY = point.y;\n        }\n        mappingRecord.x = rstX;\n        mappingRecord.y = rstY;\n    };\n    // 获取 style 配置\n    Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n        var _a = styleOption.fields, fields = _a === void 0 ? [] : _a, callback = styleOption.callback, cfg = styleOption.cfg;\n        if (cfg) {\n            // 用户直接配置样式属性\n            return cfg;\n        }\n        var params = fields.map(function (field) {\n            return originData[field];\n        });\n        return callback.apply(void 0, params);\n    };\n    Geometry.prototype.setCfg = function (cfg) {\n        var _this = this;\n        var coordinate = cfg.coordinate, data = cfg.data, theme = cfg.theme, scaleDefs = cfg.scaleDefs;\n        if (coordinate) {\n            this.coordinate = coordinate;\n        }\n        if (data) {\n            this.data = data;\n        }\n        if (scaleDefs) {\n            this.scaleDefs = scaleDefs;\n            this.idFields = [];\n            each(scaleDefs, function (scaleDef, field) {\n                if (scaleDef && scaleDef.key) {\n                    _this.idFields.push(field);\n                }\n            });\n        }\n        if (theme) {\n            this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n        }\n    };\n    Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        var geometryLabel = this.geometryLabel;\n        if (!geometryLabel) {\n            // 初次创建\n            var labelType = this.getLabelType();\n            var GeometryLabelsCtor = getGeometryLabel(labelType);\n            geometryLabel = new GeometryLabelsCtor(this);\n            this.geometryLabel = geometryLabel;\n        }\n        geometryLabel.render(mappingArray, isUpdate);\n        // 将 label 同 element 进行关联\n        var labelsMap = geometryLabel.labelsRenderer.shapesMap;\n        each(this.elementsMap, function (element, id) {\n            var labels = filterLabelsById(id, labelsMap); // element 实例同 label 进行绑定\n            if (labels.length) {\n                element.labelShape = labels;\n                for (var i = 0; i < labels.length; i++) {\n                    var label = labels[i];\n                    var labelChildren = label.getChildren();\n                    for (var j = 0; j < labelChildren.length; j++) {\n                        var child = labelChildren[j];\n                        child.cfg.name = ['element', 'label'];\n                        child.cfg.element = element;\n                    }\n                }\n            }\n        });\n    };\n    /**\n     * 是否需要进行群组入场动画\n     * 规则：\n     * 1. 如果发生更新，则不进行\n     * 2. 如果用户关闭 geometry 动画，则不进行\n     * 3. 如果用户关闭了 appear 动画，则不进行\n     * 4. 如果用户配置了 appear.animation，则不进行\n     */\n    Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n        return (!isUpdate &&\n            this.animateOption &&\n            (get(this.animateOption, 'appear') === undefined ||\n                (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined)));\n    };\n    return Geometry;\n}(Base));\nexport default Geometry;\n//# sourceMappingURL=base.js.map"]}]}