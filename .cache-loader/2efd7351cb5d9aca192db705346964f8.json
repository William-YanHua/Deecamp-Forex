{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\util\\lib\\path\\path2absolute.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\util\\lib\\path\\path2absolute.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var parsePathString = require('./parse-path-string');\r\nvar catmullRom2bezier = require('./catmull-rom2bezier');\r\nfunction ellipsePath(x, y, rx, ry, a) {\r\n    var res = [];\r\n    if (a === null && ry === null) {\r\n        ry = rx;\r\n    }\r\n    x = +x;\r\n    y = +y;\r\n    rx = +rx;\r\n    ry = +ry;\r\n    if (a !== null) {\r\n        var rad = Math.PI / 180;\r\n        var x1 = x + rx * Math.cos(-ry * rad);\r\n        var x2 = x + rx * Math.cos(-a * rad);\r\n        var y1 = y + rx * Math.sin(-ry * rad);\r\n        var y2 = y + rx * Math.sin(-a * rad);\r\n        res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\r\n    }\r\n    else {\r\n        res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];\r\n    }\r\n    return res;\r\n}\r\nmodule.exports = function pathToAbsolute(pathArray) {\r\n    pathArray = parsePathString(pathArray);\r\n    if (!pathArray || !pathArray.length) {\r\n        return [['M', 0, 0]];\r\n    }\r\n    var res = [];\r\n    var x = 0;\r\n    var y = 0;\r\n    var mx = 0;\r\n    var my = 0;\r\n    var start = 0;\r\n    var pa0 = void 0;\r\n    var dots = void 0;\r\n    if (pathArray[0][0] === 'M') {\r\n        x = +pathArray[0][1];\r\n        y = +pathArray[0][2];\r\n        mx = x;\r\n        my = y;\r\n        start++;\r\n        res[0] = ['M', x, y];\r\n    }\r\n    var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';\r\n    for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\r\n        res.push(r = []);\r\n        pa = pathArray[i];\r\n        pa0 = pa[0];\r\n        if (pa0 !== pa0.toUpperCase()) {\r\n            r[0] = pa0.toUpperCase();\r\n            switch (r[0]) {\r\n                case 'A':\r\n                    r[1] = pa[1];\r\n                    r[2] = pa[2];\r\n                    r[3] = pa[3];\r\n                    r[4] = pa[4];\r\n                    r[5] = pa[5];\r\n                    r[6] = +pa[6] + x;\r\n                    r[7] = +pa[7] + y;\r\n                    break;\r\n                case 'V':\r\n                    r[1] = +pa[1] + y;\r\n                    break;\r\n                case 'H':\r\n                    r[1] = +pa[1] + x;\r\n                    break;\r\n                case 'R':\r\n                    dots = [x, y].concat(pa.slice(1));\r\n                    for (var j = 2, jj = dots.length; j < jj; j++) {\r\n                        dots[j] = +dots[j] + x;\r\n                        dots[++j] = +dots[j] + y;\r\n                    }\r\n                    res.pop();\r\n                    res = res.concat(catmullRom2bezier(dots, crz));\r\n                    break;\r\n                case 'O':\r\n                    res.pop();\r\n                    dots = ellipsePath(x, y, pa[1], pa[2]);\r\n                    dots.push(dots[0]);\r\n                    res = res.concat(dots);\r\n                    break;\r\n                case 'U':\r\n                    res.pop();\r\n                    res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\r\n                    r = ['U'].concat(res[res.length - 1].slice(-2));\r\n                    break;\r\n                case 'M':\r\n                    mx = +pa[1] + x;\r\n                    my = +pa[2] + y;\r\n                    break;\r\n                default:\r\n                    for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {\r\n                        r[_j] = +pa[_j] + (_j % 2 ? x : y);\r\n                    }\r\n            }\r\n        }\r\n        else if (pa0 === 'R') {\r\n            dots = [x, y].concat(pa.slice(1));\r\n            res.pop();\r\n            res = res.concat(catmullRom2bezier(dots, crz));\r\n            r = ['R'].concat(pa.slice(-2));\r\n        }\r\n        else if (pa0 === 'O') {\r\n            res.pop();\r\n            dots = ellipsePath(x, y, pa[1], pa[2]);\r\n            dots.push(dots[0]);\r\n            res = res.concat(dots);\r\n        }\r\n        else if (pa0 === 'U') {\r\n            res.pop();\r\n            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\r\n            r = ['U'].concat(res[res.length - 1].slice(-2));\r\n        }\r\n        else {\r\n            for (var k = 0, kk = pa.length; k < kk; k++) {\r\n                r[k] = pa[k];\r\n            }\r\n        }\r\n        pa0 = pa0.toUpperCase();\r\n        if (pa0 !== 'O') {\r\n            switch (r[0]) {\r\n                case 'Z':\r\n                    x = +mx;\r\n                    y = +my;\r\n                    break;\r\n                case 'H':\r\n                    x = r[1];\r\n                    break;\r\n                case 'V':\r\n                    y = r[1];\r\n                    break;\r\n                case 'M':\r\n                    mx = r[r.length - 2];\r\n                    my = r[r.length - 1];\r\n                    break;\r\n                default:\r\n                    x = r[r.length - 2];\r\n                    y = r[r.length - 1];\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\util\\lib\\path\\path2absolute.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\util\\lib\\path\\path2absolute.js"],"names":[],"mappings":"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","sourcesContent":["var parsePathString = require('./parse-path-string');\nvar catmullRom2bezier = require('./catmull-rom2bezier');\n\nfunction ellipsePath(x, y, rx, ry, a) {\n  var res = [];\n  if (a === null && ry === null) {\n    ry = rx;\n  }\n  x = +x;\n  y = +y;\n  rx = +rx;\n  ry = +ry;\n  if (a !== null) {\n    var rad = Math.PI / 180;\n    var x1 = x + rx * Math.cos(-ry * rad);\n    var x2 = x + rx * Math.cos(-a * rad);\n    var y1 = y + rx * Math.sin(-ry * rad);\n    var y2 = y + rx * Math.sin(-a * rad);\n    res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n  } else {\n    res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];\n  }\n  return res;\n}\n\nmodule.exports = function pathToAbsolute(pathArray) {\n  pathArray = parsePathString(pathArray);\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  var res = [];\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var start = 0;\n  var pa0 = void 0;\n  var dots = void 0;\n  if (pathArray[0][0] === 'M') {\n    x = +pathArray[0][1];\n    y = +pathArray[0][2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';\n  for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n    res.push(r = []);\n    pa = pathArray[i];\n    pa0 = pa[0];\n    if (pa0 !== pa0.toUpperCase()) {\n      r[0] = pa0.toUpperCase();\n      switch (r[0]) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'R':\n          dots = [x, y].concat(pa.slice(1));\n          for (var j = 2, jj = dots.length; j < jj; j++) {\n            dots[j] = +dots[j] + x;\n            dots[++j] = +dots[j] + y;\n          }\n          res.pop();\n          res = res.concat(catmullRom2bezier(dots, crz));\n          break;\n        case 'O':\n          res.pop();\n          dots = ellipsePath(x, y, pa[1], pa[2]);\n          dots.push(dots[0]);\n          res = res.concat(dots);\n          break;\n        case 'U':\n          res.pop();\n          res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n          r = ['U'].concat(res[res.length - 1].slice(-2));\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n          break; // for lint\n        default:\n          for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {\n            r[_j] = +pa[_j] + (_j % 2 ? x : y);\n          }\n      }\n    } else if (pa0 === 'R') {\n      dots = [x, y].concat(pa.slice(1));\n      res.pop();\n      res = res.concat(catmullRom2bezier(dots, crz));\n      r = ['R'].concat(pa.slice(-2));\n    } else if (pa0 === 'O') {\n      res.pop();\n      dots = ellipsePath(x, y, pa[1], pa[2]);\n      dots.push(dots[0]);\n      res = res.concat(dots);\n    } else if (pa0 === 'U') {\n      res.pop();\n      res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n      r = ['U'].concat(res[res.length - 1].slice(-2));\n    } else {\n      for (var k = 0, kk = pa.length; k < kk; k++) {\n        r[k] = pa[k];\n      }\n    }\n    pa0 = pa0.toUpperCase();\n    if (pa0 !== 'O') {\n      switch (r[0]) {\n        case 'Z':\n          x = +mx;\n          y = +my;\n          break;\n        case 'H':\n          x = r[1];\n          break;\n        case 'V':\n          y = r[1];\n          break;\n        case 'M':\n          mx = r[r.length - 2];\n          my = r[r.length - 1];\n          break; // for lint\n        default:\n          x = r[r.length - 2];\n          y = r[r.length - 1];\n      }\n    }\n  }\n\n  return res;\n};"]}]}