{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\blockquote.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\blockquote.js","mtime":1516191690000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar trim = require('trim');\r\nvar interrupt = require('../util/interrupt');\r\nmodule.exports = blockquote;\r\nvar C_NEWLINE = '\\n';\r\nvar C_TAB = '\\t';\r\nvar C_SPACE = ' ';\r\nvar C_GT = '>';\r\nfunction blockquote(eat, value, silent) {\r\n    var self = this;\r\n    var offsets = self.offset;\r\n    var tokenizers = self.blockTokenizers;\r\n    var interruptors = self.interruptBlockquote;\r\n    var now = eat.now();\r\n    var currentLine = now.line;\r\n    var length = value.length;\r\n    var values = [];\r\n    var contents = [];\r\n    var indents = [];\r\n    var add;\r\n    var index = 0;\r\n    var character;\r\n    var rest;\r\n    var nextIndex;\r\n    var content;\r\n    var line;\r\n    var startIndex;\r\n    var prefixed;\r\n    var exit;\r\n    while (index < length) {\r\n        character = value.charAt(index);\r\n        if (character !== C_SPACE && character !== C_TAB) {\r\n            break;\r\n        }\r\n        index++;\r\n    }\r\n    if (value.charAt(index) !== C_GT) {\r\n        return;\r\n    }\r\n    if (silent) {\r\n        return true;\r\n    }\r\n    index = 0;\r\n    while (index < length) {\r\n        nextIndex = value.indexOf(C_NEWLINE, index);\r\n        startIndex = index;\r\n        prefixed = false;\r\n        if (nextIndex === -1) {\r\n            nextIndex = length;\r\n        }\r\n        while (index < length) {\r\n            character = value.charAt(index);\r\n            if (character !== C_SPACE && character !== C_TAB) {\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        if (value.charAt(index) === C_GT) {\r\n            index++;\r\n            prefixed = true;\r\n            if (value.charAt(index) === C_SPACE) {\r\n                index++;\r\n            }\r\n        }\r\n        else {\r\n            index = startIndex;\r\n        }\r\n        content = value.slice(index, nextIndex);\r\n        if (!prefixed && !trim(content)) {\r\n            index = startIndex;\r\n            break;\r\n        }\r\n        if (!prefixed) {\r\n            rest = value.slice(index);\r\n            if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\r\n                break;\r\n            }\r\n        }\r\n        line = startIndex === index ? content : value.slice(startIndex, nextIndex);\r\n        indents.push(index - startIndex);\r\n        values.push(line);\r\n        contents.push(content);\r\n        index = nextIndex + 1;\r\n    }\r\n    index = -1;\r\n    length = indents.length;\r\n    add = eat(values.join(C_NEWLINE));\r\n    while (++index < length) {\r\n        offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];\r\n        currentLine++;\r\n    }\r\n    exit = self.enterBlock();\r\n    contents = self.tokenizeBlock(contents.join(C_NEWLINE), now);\r\n    exit();\r\n    return add({\r\n        type: 'blockquote',\r\n        children: contents\r\n    });\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\blockquote.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\blockquote.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nvar trim = require('trim');\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = blockquote;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_GT = '>';\n\n/* Tokenise a blockquote. */\nfunction blockquote(eat, value, silent) {\n  var self = this;\n  var offsets = self.offset;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptBlockquote;\n  var now = eat.now();\n  var currentLine = now.line;\n  var length = value.length;\n  var values = [];\n  var contents = [];\n  var indents = [];\n  var add;\n  var index = 0;\n  var character;\n  var rest;\n  var nextIndex;\n  var content;\n  var line;\n  var startIndex;\n  var prefixed;\n  var exit;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      break;\n    }\n\n    index++;\n  }\n\n  if (value.charAt(index) !== C_GT) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  index = 0;\n\n  while (index < length) {\n    nextIndex = value.indexOf(C_NEWLINE, index);\n    startIndex = index;\n    prefixed = false;\n\n    if (nextIndex === -1) {\n      nextIndex = length;\n    }\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character !== C_SPACE && character !== C_TAB) {\n        break;\n      }\n\n      index++;\n    }\n\n    if (value.charAt(index) === C_GT) {\n      index++;\n      prefixed = true;\n\n      if (value.charAt(index) === C_SPACE) {\n        index++;\n      }\n    } else {\n      index = startIndex;\n    }\n\n    content = value.slice(index, nextIndex);\n\n    if (!prefixed && !trim(content)) {\n      index = startIndex;\n      break;\n    }\n\n    if (!prefixed) {\n      rest = value.slice(index);\n\n      /* Check if the following code contains a possible\n       * block. */\n      if (interrupt(interruptors, tokenizers, self, [eat, rest, true])) {\n        break;\n      }\n    }\n\n    line = startIndex === index ? content : value.slice(startIndex, nextIndex);\n\n    indents.push(index - startIndex);\n    values.push(line);\n    contents.push(content);\n\n    index = nextIndex + 1;\n  }\n\n  index = -1;\n  length = indents.length;\n  add = eat(values.join(C_NEWLINE));\n\n  while (++index < length) {\n    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];\n    currentLine++;\n  }\n\n  exit = self.enterBlock();\n  contents = self.tokenizeBlock(contents.join(C_NEWLINE), now);\n  exit();\n\n  return add({\n    type: 'blockquote',\n    children: contents\n  });\n}\n"]}]}