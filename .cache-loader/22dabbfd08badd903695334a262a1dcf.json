{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\rc-table\\es\\ColGroup.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\rc-table\\es\\ColGroup.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport default function ColGroup(props, _ref) {\r\n    var table = _ref.table;\r\n    var _table$props = table.props, prefixCls = _table$props.prefixCls, expandIconAsCell = _table$props.expandIconAsCell;\r\n    var fixed = props.fixed;\r\n    var cols = [];\r\n    if (expandIconAsCell && fixed !== 'right') {\r\n        cols.push(React.createElement('col', { className: prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));\r\n    }\r\n    var leafColumns = void 0;\r\n    if (fixed === 'left') {\r\n        leafColumns = table.columnManager.leftLeafColumns();\r\n    }\r\n    else if (fixed === 'right') {\r\n        leafColumns = table.columnManager.rightLeafColumns();\r\n    }\r\n    else {\r\n        leafColumns = table.columnManager.leafColumns();\r\n    }\r\n    cols = cols.concat(leafColumns.map(function (c) {\r\n        return React.createElement('col', { key: c.key || c.dataIndex, style: { width: c.width, minWidth: c.width } });\r\n    }));\r\n    return React.createElement('colgroup', null, cols);\r\n}\r\nColGroup.propTypes = {\r\n    fixed: PropTypes.string\r\n};\r\nColGroup.contextTypes = {\r\n    table: PropTypes.any\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\rc-table\\es\\ColGroup.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\rc-table\\es\\ColGroup.js"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC,MAAM,CAAC,OAAO,UAAU,QAAQ,CAAC,KAAK,EAAE,IAAI;IAC1C,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,IAAI,YAAY,GAAG,KAAK,CAAC,KAAK,EAC1B,SAAS,GAAG,YAAY,CAAC,SAAS,EAClC,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;IACrD,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IAGxB,IAAI,IAAI,GAAG,EAAE,CAAC;IAEd,IAAI,gBAAgB,IAAI,KAAK,KAAK,OAAO,EAAE;QACzC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,SAAS,EAAE,SAAS,GAAG,kBAAkB,EAAE,GAAG,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;KACvH;IAED,IAAI,WAAW,GAAG,KAAK,CAAC,CAAC;IAEzB,IAAI,KAAK,KAAK,MAAM,EAAE;QACpB,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC;KACrD;SAAM,IAAI,KAAK,KAAK,OAAO,EAAE;QAC5B,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;KACtD;SAAM;QACL,WAAW,GAAG,KAAK,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KACjD;IACD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC;QAC5C,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACjH,CAAC,CAAC,CAAC,CAAC;IAEJ,OAAO,KAAK,CAAC,aAAa,CACxB,UAAU,EACV,IAAI,EACJ,IAAI,CACL,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,SAAS,GAAG;IACnB,KAAK,EAAE,SAAS,CAAC,MAAM;CACxB,CAAC;AAEF,QAAQ,CAAC,YAAY,GAAG;IACtB,KAAK,EAAE,SAAS,CAAC,GAAG;CACrB,CAAC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function ColGroup(props, _ref) {\n  var table = _ref.table;\n  var _table$props = table.props,\n      prefixCls = _table$props.prefixCls,\n      expandIconAsCell = _table$props.expandIconAsCell;\n  var fixed = props.fixed;\n\n\n  var cols = [];\n\n  if (expandIconAsCell && fixed !== 'right') {\n    cols.push(React.createElement('col', { className: prefixCls + '-expand-icon-col', key: 'rc-table-expand-icon-col' }));\n  }\n\n  var leafColumns = void 0;\n\n  if (fixed === 'left') {\n    leafColumns = table.columnManager.leftLeafColumns();\n  } else if (fixed === 'right') {\n    leafColumns = table.columnManager.rightLeafColumns();\n  } else {\n    leafColumns = table.columnManager.leafColumns();\n  }\n  cols = cols.concat(leafColumns.map(function (c) {\n    return React.createElement('col', { key: c.key || c.dataIndex, style: { width: c.width, minWidth: c.width } });\n  }));\n\n  return React.createElement(\n    'colgroup',\n    null,\n    cols\n  );\n}\n\nColGroup.propTypes = {\n  fixed: PropTypes.string\n};\n\nColGroup.contextTypes = {\n  table: PropTypes.any\n};"]}]}