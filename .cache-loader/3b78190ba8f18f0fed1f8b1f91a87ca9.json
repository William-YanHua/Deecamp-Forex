{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\bin\\quantile.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\bin\\quantile.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar quantile = require('simple-statistics').quantile;\r\nvar partition = require('../../util/partition');\r\nvar pByFraction = require('../../util/p-by-fraction');\r\nvar registerTransform = require('../../data-set').registerTransform;\r\nvar getField = require('../../util/option-parser').getField;\r\nvar DEFAULT_OPTIONS = {\r\n    as: '_bin',\r\n    groupBy: [],\r\n    fraction: 4\r\n};\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var field = getField(options);\r\n    var as = options.as;\r\n    if (!isString(as)) {\r\n        throw new TypeError('Invalid as: it must be a string (e.g. \"_bin\")!');\r\n    }\r\n    var pArray = options.p;\r\n    var fraction = options.fraction;\r\n    if (!isArray(pArray) || pArray.length === 0) {\r\n        pArray = pByFraction(fraction);\r\n    }\r\n    var rows = dataView.rows;\r\n    var groupBy = options.groupBy;\r\n    var groups = partition(rows, groupBy);\r\n    var result = [];\r\n    forIn(groups, function (group) {\r\n        var resultRow = group[0];\r\n        var binningColumn = group.map(function (row) { return row[field]; });\r\n        var quantiles = pArray.map(function (p) { return quantile(binningColumn, p); });\r\n        resultRow[as] = quantiles;\r\n        result.push(resultRow);\r\n    });\r\n    dataView.rows = result;\r\n}\r\nregisterTransform('bin.quantile', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\bin\\quantile.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\bin\\quantile.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,KAAK,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC7C,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAExD,IAAA,gDAAQ,CACuB;AACjC,IAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAClD,IAAM,WAAW,GAAG,OAAO,CAAC,0BAA0B,CAAC,CAAC;AAEtD,IAAA,+DAAiB,CACW;AAE5B,IAAA,uDAAQ,CAC8B;AAExC,IAAM,eAAe,GAAG;IACtB,EAAE,EAAE,MAAM;IACV,OAAO,EAAE,EAAE;IACX,QAAQ,EAAE,CAAC;CAGZ,CAAC;AAEF,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO;IAClC,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChC,IAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;QACjB,MAAM,IAAI,SAAS,CAAC,gDAAgD,CAAC,CAAC;KACvE;IACD,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IACvB,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IAClC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3C,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;KAChC;IACD,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3B,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAChC,IAAM,MAAM,GAAG,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxC,IAAM,MAAM,GAAG,EAAE,CAAC;IAClB,KAAK,CAAC,MAAM,EAAE,UAAA,KAAK;QAEjB,IAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,CAAC,EAAV,CAAU,CAAC,CAAC;QACnD,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,aAAa,EAAE,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC;QAC9D,SAAS,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC;AACzB,CAAC;AAED,iBAAiB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst forIn = require('@antv/util/lib/each');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  quantile\n} = require('simple-statistics');\nconst partition = require('../../util/partition');\nconst pByFraction = require('../../util/p-by-fraction');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst {\n  getField\n} = require('../../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  as: '_bin',\n  groupBy: [], // optional\n  fraction: 4 // default\n  // p: [0.5, 0.3], // array of p parameter\n  // field: 'y', // required\n};\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const field = getField(options);\n  const as = options.as;\n  if (!isString(as)) {\n    throw new TypeError('Invalid as: it must be a string (e.g. \"_bin\")!');\n  }\n  let pArray = options.p;\n  const fraction = options.fraction;\n  if (!isArray(pArray) || pArray.length === 0) {\n    pArray = pByFraction(fraction);\n  }\n  const rows = dataView.rows;\n  const groupBy = options.groupBy;\n  const groups = partition(rows, groupBy);\n  const result = [];\n  forIn(groups, group => {\n    // const resultRow = pick(group[0], groupBy);\n    const resultRow = group[0];\n    const binningColumn = group.map(row => row[field]);\n    const quantiles = pArray.map(p => quantile(binningColumn, p));\n    resultRow[as] = quantiles;\n    result.push(resultRow);\n  });\n  dataView.rows = result;\n}\n\nregisterTransform('bin.quantile', transform);\n"]}]}