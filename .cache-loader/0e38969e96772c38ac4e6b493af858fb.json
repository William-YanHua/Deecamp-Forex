{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/geo.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/geo.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\nvar _a = require('d3-geo'), geoArea = _a.geoArea, geoCentroid = _a.geoCentroid, geoContains = _a.geoContains, geoDistance = _a.geoDistance, geoLength = _a.geoLength;\nvar geoProject = require('d3-geo-projection').geoProject;\nvar View = require('../view');\nvar getGeoProjection = require('../util/get-geo-projection');\nassign(View.prototype, {\n    geoArea: function (feature) {\n        return geoArea(feature);\n    },\n    geoAreaByName: function (name) {\n        return geoArea(this.geoFeatureByName(name));\n    },\n    geoCentroid: function (feature) {\n        return geoCentroid(feature);\n    },\n    geoCentroidByName: function (name) {\n        return geoCentroid(this.geoFeatureByName(name));\n    },\n    geoDistance: function (p1, p2) {\n        return geoDistance(p1, p2);\n    },\n    geoLength: function (feature) {\n        return geoLength(feature);\n    },\n    geoLengthByName: function (name) {\n        return geoLength(this.geoFeatureByName(name));\n    },\n    geoContains: function (feature, position) {\n        return geoContains(feature, position);\n    },\n    geoFeatureByName: function (name) {\n        var rows = this.rows;\n        var result;\n        rows.some(function (feature) {\n            if (feature.name === name) {\n                result = feature;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    },\n    geoFeatureByPosition: function (position) {\n        var rows = this.rows;\n        var result;\n        rows.some(function (feature) {\n            if (geoContains(feature, position)) {\n                result = feature;\n                return true;\n            }\n            return false;\n        });\n        return result;\n    },\n    geoNameByPosition: function (position) {\n        var feature = this.geoFeatureByPosition(position);\n        if (feature) {\n            return feature.name;\n        }\n    },\n    getGeoProjection: getGeoProjection,\n    geoProject: function (feature, projection, exportRaw) {\n        projection = getGeoProjection(projection, exportRaw);\n        return geoProject(feature, projection);\n    },\n    geoProjectByName: function (name, projection, exportRaw) {\n        projection = getGeoProjection(projection, exportRaw);\n        return geoProject(this.geoFeatureByName(name), projection);\n    },\n    geoProjectPosition: function (position, projection, exportRaw) {\n        projection = getGeoProjection(projection, exportRaw);\n        return projection(position);\n    },\n    geoProjectInvert: function (point, projection, exportRaw) {\n        projection = getGeoProjection(projection, exportRaw);\n        return projection.invert(point);\n    }\n});\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/geo.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/geo.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACvC,IAAA,KAMF,OAAO,CAAC,QAAQ,CAAC,EALnB,OAAO,aAAA,EACP,WAAW,iBAAA,EACX,WAAW,iBAAA,EACX,WAAW,iBAAA,EACX,SAAS,eACU,CAAC;AAEpB,IAAA,UAAU,GACR,OAAO,CAAC,mBAAmB,CAAC,WADpB,CACqB;AACjC,IAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAChC,IAAM,gBAAgB,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AAE/D,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;IAErB,OAAO,YAAC,OAAO;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IACD,aAAa,YAAC,IAAI;QAChB,OAAO,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,WAAW,YAAC,OAAO;QACjB,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IACD,iBAAiB,YAAC,IAAI;QACpB,OAAO,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAClD,CAAC;IACD,WAAW,YAAC,EAAE,EAAE,EAAE;QAChB,OAAO,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;IACD,SAAS,YAAC,OAAO;QACf,OAAO,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IACD,eAAe,YAAC,IAAI;QAClB,OAAO,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAChD,CAAC;IACD,WAAW,YAAC,OAAO,EAAE,QAAQ;QAC3B,OAAO,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IACD,gBAAgB,YAAC,IAAI;QACnB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,MAAM,CAAC;QACX,IAAI,CAAC,IAAI,CAAC,UAAA,OAAO;YACf,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,EAAE;gBACzB,MAAM,GAAG,OAAO,CAAC;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,oBAAoB,YAAC,QAAQ;QAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,IAAI,MAAM,CAAC;QACX,IAAI,CAAC,IAAI,CAAC,UAAA,OAAO;YACf,IAAI,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;gBAClC,MAAM,GAAG,OAAO,CAAC;gBACjB,OAAO,IAAI,CAAC;aACb;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,iBAAiB,YAAC,QAAQ;QACxB,IAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,OAAO,EAAE;YACX,OAAO,OAAO,CAAC,IAAI,CAAC;SACrB;IACH,CAAC;IAGD,gBAAgB,kBAAA;IAChB,UAAU,YAAC,OAAO,EAAE,UAAU,EAAE,SAAS;QACvC,UAAU,GAAG,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,OAAO,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACzC,CAAC;IACD,gBAAgB,YAAC,IAAI,EAAE,UAAU,EAAE,SAAS;QAC1C,UAAU,GAAG,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,OAAO,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;IAC7D,CAAC;IACD,kBAAkB,YAAC,QAAQ,EAAE,UAAU,EAAE,SAAS;QAChD,UAAU,GAAG,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,OAAO,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC;IACD,gBAAgB,YAAC,KAAK,EAAc,UAAU,EAAE,SAAS;QACvD,UAAU,GAAG,gBAAgB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,OAAO,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;CACF,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst {\n  geoArea,\n  geoCentroid,\n  geoContains,\n  geoDistance,\n  geoLength\n} = require('d3-geo');\nconst {\n  geoProject\n} = require('d3-geo-projection');\nconst View = require('../view');\nconst getGeoProjection = require('../util/get-geo-projection');\n\nassign(View.prototype, {\n  // geo maintain\n  geoArea(feature) {\n    return geoArea(feature);\n  },\n  geoAreaByName(name) {\n    return geoArea(this.geoFeatureByName(name));\n  },\n  geoCentroid(feature) {\n    return geoCentroid(feature);\n  },\n  geoCentroidByName(name) {\n    return geoCentroid(this.geoFeatureByName(name));\n  },\n  geoDistance(p1, p2) {\n    return geoDistance(p1, p2);\n  },\n  geoLength(feature) {\n    return geoLength(feature);\n  },\n  geoLengthByName(name) {\n    return geoLength(this.geoFeatureByName(name));\n  },\n  geoContains(feature, position/* [longitude, latitude] */) {\n    return geoContains(feature, position);\n  },\n  geoFeatureByName(name) {\n    const rows = this.rows;\n    let result;\n    rows.some(feature => {\n      if (feature.name === name) {\n        result = feature;\n        return true;\n      }\n      return false;\n    });\n    return result;\n  },\n  geoFeatureByPosition(position) {\n    const rows = this.rows;\n    let result;\n    rows.some(feature => {\n      if (geoContains(feature, position)) {\n        result = feature;\n        return true;\n      }\n      return false;\n    });\n    return result;\n  },\n  geoNameByPosition(position) {\n    const feature = this.geoFeatureByPosition(position);\n    if (feature) {\n      return feature.name;\n    }\n  },\n  // projection\n  // export getGeoProjection for custom used.\n  getGeoProjection,\n  geoProject(feature, projection, exportRaw) {\n    projection = getGeoProjection(projection, exportRaw);\n    return geoProject(feature, projection);\n  },\n  geoProjectByName(name, projection, exportRaw) {\n    projection = getGeoProjection(projection, exportRaw);\n    return geoProject(this.geoFeatureByName(name), projection);\n  },\n  geoProjectPosition(position, projection, exportRaw) {\n    projection = getGeoProjection(projection, exportRaw);\n    return projection(position);\n  },\n  geoProjectInvert(point/* [x, y] */, projection, exportRaw) {\n    projection = getGeoProjection(projection, exportRaw);\n    return projection.invert(point);\n  }\n});\n"]}]}