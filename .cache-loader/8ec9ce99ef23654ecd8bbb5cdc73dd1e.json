{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\adjust\\lib\\dodge.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\adjust\\lib\\dodge.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\r\nvar Adjust = require('./base');\r\nvar each = require('@antv/util/lib/each');\r\nvar MARGIN_RATIO = 1 / 2;\r\nvar DODGE_RATIO = 1 / 2;\r\nvar Dodge = function (_Adjust) {\r\n    _inheritsLoose(Dodge, _Adjust);\r\n    function Dodge() {\r\n        return _Adjust.apply(this, arguments) || this;\r\n    }\r\n    var _proto = Dodge.prototype;\r\n    _proto._initDefaultCfg = function _initDefaultCfg() {\r\n        this.marginRatio = MARGIN_RATIO;\r\n        this.dodgeRatio = DODGE_RATIO;\r\n        this.adjustNames = ['x', 'y'];\r\n    };\r\n    _proto.getDodgeOffset = function getDodgeOffset(range, index, count) {\r\n        var self = this;\r\n        var pre = range.pre;\r\n        var next = range.next;\r\n        var tickLength = next - pre;\r\n        var width = tickLength * self.dodgeRatio / count;\r\n        var margin = self.marginRatio * width;\r\n        var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;\r\n        return (pre + next) / 2 + offset;\r\n    };\r\n    _proto.processAdjust = function processAdjust(dataArray) {\r\n        var self = this;\r\n        var count = dataArray.length;\r\n        var xField = self.xField;\r\n        each(dataArray, function (data, index) {\r\n            for (var i = 0, len = data.length; i < len; i++) {\r\n                var obj = data[i];\r\n                var value = obj[xField];\r\n                var range = {\r\n                    pre: value - 0.5,\r\n                    next: value + 0.5\r\n                };\r\n                var dodgeValue = self.getDodgeOffset(range, index, count);\r\n                obj[xField] = dodgeValue;\r\n            }\r\n        });\r\n    };\r\n    return Dodge;\r\n}(Adjust);\r\nAdjust.Dodge = Dodge;\r\nmodule.exports = Dodge;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\adjust\\lib\\dodge.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\adjust\\lib\\dodge.js"],"names":[],"mappings":"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","sourcesContent":["function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar Adjust = require('./base');\n\nvar each = require('@antv/util/lib/each');\n\nvar MARGIN_RATIO = 1 / 2;\nvar DODGE_RATIO = 1 / 2;\n\nvar Dodge =\n/*#__PURE__*/\nfunction (_Adjust) {\n  _inheritsLoose(Dodge, _Adjust);\n\n  function Dodge() {\n    return _Adjust.apply(this, arguments) || this;\n  }\n\n  var _proto = Dodge.prototype;\n\n  _proto._initDefaultCfg = function _initDefaultCfg() {\n    /**\n     * 调整过程中,2个数据的间距\n     * @type {Number}\n     */\n    this.marginRatio = MARGIN_RATIO;\n    /**\n     * 调整占单位宽度的比例,例如：占2个分类间距的 1/2\n     * @type {Number}\n     */\n\n    this.dodgeRatio = DODGE_RATIO;\n    this.adjustNames = ['x', 'y']; // 调整的维度，默认,x,y都做调整\n  };\n\n  _proto.getDodgeOffset = function getDodgeOffset(range, index, count) {\n    var self = this;\n    var pre = range.pre;\n    var next = range.next;\n    var tickLength = next - pre;\n    var width = tickLength * self.dodgeRatio / count;\n    var margin = self.marginRatio * width;\n    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n    return (pre + next) / 2 + offset;\n  };\n\n  _proto.processAdjust = function processAdjust(dataArray) {\n    var self = this;\n    var count = dataArray.length;\n    var xField = self.xField;\n    each(dataArray, function (data, index) {\n      for (var i = 0, len = data.length; i < len; i++) {\n        var obj = data[i];\n        var value = obj[xField];\n        var range = {\n          pre: value - 0.5,\n          next: value + 0.5\n        };\n        var dodgeValue = self.getDodgeOffset(range, index, count);\n        obj[xField] = dodgeValue;\n      }\n    });\n  };\n\n  return Dodge;\n}(Adjust);\n\nAdjust.Dodge = Dodge;\nmodule.exports = Dodge;"]}]}