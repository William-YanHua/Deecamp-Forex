{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\tag-cloud.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\tag-cloud.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar assign = require('@antv/util/lib/mix');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar tagCloud = require('../util/tag-cloud');\r\nvar getFields = require('../util/option-parser').getFields;\r\nvar DEFAULT_OPTIONS = {\r\n    fields: ['text', 'value'],\r\n    font: function () { return 'serif'; },\r\n    padding: 1,\r\n    size: [500, 500],\r\n    spiral: 'archimedean',\r\n    timeInterval: 500\r\n};\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var layout = tagCloud();\r\n    [\r\n        'font',\r\n        'fontSize',\r\n        'padding',\r\n        'rotate',\r\n        'size',\r\n        'spiral',\r\n        'timeInterval'\r\n    ].forEach(function (key) {\r\n        if (options[key]) {\r\n            layout[key](options[key]);\r\n        }\r\n    });\r\n    var fields = getFields(options);\r\n    var _a = __read(fields, 2), text = _a[0], value = _a[1];\r\n    if (!isString(text) || !isString(value)) {\r\n        throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ \"text\", \"value\" ])!');\r\n    }\r\n    var words = dataView.rows.map(function (row) {\r\n        row.text = row[text];\r\n        row.value = row[value];\r\n        return row;\r\n    });\r\n    layout.words(words);\r\n    if (options.imageMask) {\r\n        layout.createMask(options.imageMask);\r\n    }\r\n    var result = layout.start();\r\n    var tags = result._tags;\r\n    var bounds = result._bounds;\r\n    tags.forEach(function (tag) {\r\n        tag.x += options.size[0] / 2;\r\n        tag.y += options.size[1] / 2;\r\n    });\r\n    var _b = __read(options.size, 2), w = _b[0], h = _b[1];\r\n    var hasImage = result.hasImage;\r\n    tags.push({\r\n        text: '',\r\n        value: 0,\r\n        x: hasImage ? 0 : bounds[0].x,\r\n        y: hasImage ? 0 : bounds[0].y,\r\n        opacity: 0\r\n    });\r\n    tags.push({\r\n        text: '',\r\n        value: 0,\r\n        x: hasImage ? w : bounds[1].x,\r\n        y: hasImage ? h : bounds[1].y,\r\n        opacity: 0\r\n    });\r\n    dataView.rows = tags;\r\n    dataView._tagCloud = result;\r\n}\r\nregisterTransform('tag-cloud', transform);\r\nregisterTransform('word-cloud', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\tag-cloud.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\tag-cloud.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAExD,IAAA,4DAAiB,CACQ;AAC3B,IAAM,QAAQ,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAE5C,IAAA,sDAAS,CAC0B;AAErC,IAAM,eAAe,GAAG;IACtB,MAAM,EAAE,CAAE,MAAM,EAAE,OAAO,CAAE;IAC3B,IAAI,EAAE,cAAM,OAAA,OAAO,EAAP,CAAO;IACnB,OAAO,EAAE,CAAC;IACV,IAAI,EAAE,CAAE,GAAG,EAAE,GAAG,CAAE;IAClB,MAAM,EAAE,aAAa;IAErB,YAAY,EAAE,GAAG;CAElB,CAAC;AAEF,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO;IAClC,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAM,MAAM,GAAG,QAAQ,EAAE,CAAC;IAC1B;QACE,MAAM;QACN,UAAU;QACV,SAAS;QACT,QAAQ;QACR,MAAM;QACN,QAAQ;QACR,cAAc;KACf,CAAC,OAAO,CAAC,UAAA,GAAG;QACX,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SAC3B;IACH,CAAC,CAAC,CAAC;IACH,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAC5B,IAAA,sBAAwB,EAAtB,YAAI,EAAE,aAAgB,CAAC;IAC/B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;QACvC,MAAM,IAAI,SAAS,CAAC,6EAA6E,CAAC,CAAC;KACpG;IACD,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG;QACjC,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;QACrB,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;QACvB,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACpB,IAAI,OAAO,CAAC,SAAS,EAAE;QACrB,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KACtC;IACD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IAC9B,IAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;IAC1B,IAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC;IAC9B,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACd,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IACG,IAAA,4BAAuB,EAArB,SAAC,EAAE,SAAkB,CAAC;IAC9B,IAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjC,IAAI,CAAC,IAAI,CAAC;QACR,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,CAAC;QACR,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,EAAE,CAAC;KACX,CAAC,CAAC;IACH,IAAI,CAAC,IAAI,CAAC;QACR,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,CAAC;QACR,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,EAAE,CAAC;KACX,CAAC,CAAC;IACH,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,QAAQ,CAAC,SAAS,GAAG,MAAM,CAAC;AAC9B,CAAC;AAED,iBAAiB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AAC1C,iBAAiB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  registerTransform\n} = require('../data-set');\nconst tagCloud = require('../util/tag-cloud');\nconst {\n  getFields\n} = require('../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  fields: [ 'text', 'value' ], // fields to keep\n  font: () => 'serif',\n  padding: 1,\n  size: [ 500, 500 ],\n  spiral: 'archimedean', // 'archimedean' || 'rectangular' || {function}\n  // timeInterval: Infinity // max execute time\n  timeInterval: 500 // max execute time\n  // imageMask: '', // instance of Image, must be loaded\n};\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const layout = tagCloud();\n  [\n    'font',\n    'fontSize',\n    'padding',\n    'rotate',\n    'size',\n    'spiral',\n    'timeInterval'\n  ].forEach(key => {\n    if (options[key]) {\n      layout[key](options[key]);\n    }\n  });\n  const fields = getFields(options);\n  const [ text, value ] = fields;\n  if (!isString(text) || !isString(value)) {\n    throw new TypeError('Invalid fields: must be an array with 2 strings (e.g. [ \"text\", \"value\" ])!');\n  }\n  const words = dataView.rows.map(row => {\n    row.text = row[text];\n    row.value = row[value];\n    return row;\n  });\n  layout.words(words);\n  if (options.imageMask) {\n    layout.createMask(options.imageMask);\n  }\n  const result = layout.start();\n  const tags = result._tags;\n  const bounds = result._bounds;\n  tags.forEach(tag => {\n    tag.x += options.size[0] / 2;\n    tag.y += options.size[1] / 2;\n  });\n  const [ w, h ] = options.size;\n  const hasImage = result.hasImage;\n  tags.push({\n    text: '',\n    value: 0,\n    x: hasImage ? 0 : bounds[0].x,\n    y: hasImage ? 0 : bounds[0].y,\n    opacity: 0\n  });\n  tags.push({\n    text: '',\n    value: 0,\n    x: hasImage ? w : bounds[1].x,\n    y: hasImage ? h : bounds[1].y,\n    opacity: 0\n  });\n  dataView.rows = tags;\n  dataView._tagCloud = result;\n}\n\nregisterTransform('tag-cloud', transform);\nregisterTransform('word-cloud', transform);\n"]}]}