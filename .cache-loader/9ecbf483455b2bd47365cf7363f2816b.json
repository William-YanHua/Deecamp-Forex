{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/nodes-resampling-by-change.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/nodes-resampling-by-change.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { deepMix } from '@antv/util';\nimport textHide from './text-hide';\nexport default function nodesResamplingByChange(shape, option, index, cfg) {\n    var nodes = cfg.nodes.nodes;\n    var tolerance = getGlobalTolerance(nodes);\n    if (index <= 1) {\n        return;\n    }\n    var current = nodes[index];\n    var previous = findPrevious(index, nodes);\n    var distX = previous.centerX - current.centerX;\n    var distY = previous.centerY - current.centerY;\n    var dist = Math.sqrt(distX * distX + distY * distY);\n    if (dist < tolerance) {\n        textHide(shape);\n        shape.set('blank', true);\n    }\n}\nfunction findPrevious(index, nodes) {\n    for (var i = index - 1; i > 0; i--) {\n        var node = nodes[i];\n        if (!node.shape.get('blank')) {\n            return node;\n        }\n    }\n}\nfunction getGlobalTolerance(nodes) {\n    var nodesClone = deepMix([], nodes);\n    nodesClone.sort(function (a, b) {\n        return b.width - a.width;\n    });\n    return Math.round(nodesClone[0].width);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/nodes-resampling-by-change.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/nodes-resampling-by-change.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,QAAQ,MAAM,aAAa,CAAC;AAEnC,MAAM,CAAC,OAAO,UAAU,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG;IACrE,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5B,IAAI,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;IAC1C,IAAI,KAAK,IAAI,CAAC,EAAE;QACZ,OAAO;KACV;IACD,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;IAE3B,IAAI,QAAQ,GAAG,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1C,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAC/C,IAAI,KAAK,GAAG,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAC/C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;IACpD,IAAI,IAAI,GAAG,SAAS,EAAE;QAClB,QAAQ,CAAC,KAAK,CAAC,CAAC;QAChB,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAC5B;AACL,CAAC;AACD,SAAS,YAAY,CAAC,KAAK,EAAE,KAAK;IAC9B,KAAK,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC1B,OAAO,IAAI,CAAC;SACf;KACJ;AACL,CAAC;AACD,SAAS,kBAAkB,CAAC,KAAK;IAC7B,IAAI,UAAU,GAAG,OAAO,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IACpC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC;QAC1B,OAAO,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC3C,CAAC","sourcesContent":["import { deepMix } from '@antv/util';\nimport textHide from './text-hide';\n/** 根据变化进行抽样，保留变化较大的点，类似于点简化算法 */\nexport default function nodesResamplingByChange(shape, option, index, cfg) {\n    var nodes = cfg.nodes.nodes;\n    var tolerance = getGlobalTolerance(nodes);\n    if (index <= 1) {\n        return;\n    }\n    var current = nodes[index];\n    // const previous = nodes[index-1];\n    var previous = findPrevious(index, nodes);\n    var distX = previous.centerX - current.centerX;\n    var distY = previous.centerY - current.centerY;\n    var dist = Math.sqrt(distX * distX + distY * distY);\n    if (dist < tolerance) {\n        textHide(shape);\n        shape.set('blank', true);\n    }\n}\nfunction findPrevious(index, nodes) {\n    for (var i = index - 1; i > 0; i--) {\n        var node = nodes[i];\n        if (!node.shape.get('blank')) {\n            return node;\n        }\n    }\n}\nfunction getGlobalTolerance(nodes) {\n    var nodesClone = deepMix([], nodes);\n    nodesClone.sort(function (a, b) {\n        return b.width - a.width;\n    });\n    return Math.round(nodesClone[0].width);\n}\n//# sourceMappingURL=nodes-resampling-by-change.js.map"]}]}