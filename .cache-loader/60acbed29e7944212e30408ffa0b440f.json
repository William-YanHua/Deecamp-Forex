{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\sankey.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\sankey.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar isFunction = require('@antv/util/lib/type/is-function');\r\nvar _a = require('d3-sankey'), sankey = _a.sankey, sankeyLeft = _a.sankeyLeft, sankeyRight = _a.sankeyRight, sankeyCenter = _a.sankeyCenter, sankeyJustify = _a.sankeyJustify;\r\nvar registerTransform = require('../../data-set').registerTransform;\r\nvar ALIGN_METHOD = {\r\n    sankeyLeft: sankeyLeft,\r\n    sankeyRight: sankeyRight,\r\n    sankeyCenter: sankeyCenter,\r\n    sankeyJustify: sankeyJustify\r\n};\r\nvar DEFAULT_OPTIONS = {\r\n    value: function (node) { return node.value; },\r\n    source: function (edge) { return edge.source; },\r\n    target: function (edge) { return edge.target; },\r\n    nodeAlign: 'sankeyJustify',\r\n    nodeWidth: 0.02,\r\n    nodePadding: 0.02\r\n};\r\nfunction transform(dv, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var nodeAlign = null;\r\n    if (isString(options.nodeAlign)) {\r\n        nodeAlign = ALIGN_METHOD[options.nodeAlign];\r\n    }\r\n    else if (isFunction(options.nodeAlign)) {\r\n        nodeAlign = options.nodeAlign;\r\n    }\r\n    var sankeyProcessor = sankey()\r\n        .links(function (d) { return d.edges; })\r\n        .nodeWidth(options.nodeWidth)\r\n        .nodePadding(options.nodePadding)\r\n        .extent([[0, 0], [1, 1]]);\r\n    if (isFunction(options.nodeId)) {\r\n        sankeyProcessor.nodeId(options.nodeId);\r\n    }\r\n    if (nodeAlign) {\r\n        sankeyProcessor.nodeAlign(nodeAlign);\r\n    }\r\n    sankeyProcessor(dv);\r\n    dv.nodes.forEach(function (node) {\r\n        var x0 = node.x0, x1 = node.x1, y0 = node.y0, y1 = node.y1;\r\n        node.x = [x0, x1, x1, x0];\r\n        node.y = [y0, y0, y1, y1];\r\n    });\r\n    dv.edges.forEach(function (edge) {\r\n        var source = edge.source, target = edge.target;\r\n        var sx = source.x1;\r\n        var tx = target.x0;\r\n        edge.x = [sx, sx, tx, tx];\r\n        var offset = edge.width / 2;\r\n        edge.y = [edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset];\r\n    });\r\n}\r\nregisterTransform('diagram.sankey', transform);\r\nregisterTransform('sankey', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\sankey.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\sankey.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * for Sankey Diagram\n * graph data required (nodes, edges)\n */\nconst assign = require('@antv/util/lib/mix');\nconst isString = require('@antv/util/lib/type/is-string');\nconst isFunction = require('@antv/util/lib/type/is-function');\nconst {\n  sankey,\n  sankeyLeft,\n  sankeyRight,\n  sankeyCenter,\n  sankeyJustify\n} = require('d3-sankey');\nconst {\n  registerTransform\n} = require('../../data-set');\n\nconst ALIGN_METHOD = {\n  sankeyLeft,\n  sankeyRight,\n  sankeyCenter,\n  sankeyJustify\n};\n\nconst DEFAULT_OPTIONS = {\n  // nodeId: node => node.index,\n  value: node => node.value,\n  source: edge => edge.source,\n  target: edge => edge.target,\n  nodeAlign: 'sankeyJustify',\n  nodeWidth: 0.02,\n  nodePadding: 0.02\n};\n\nfunction transform(dv, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  let nodeAlign = null;\n  if (isString(options.nodeAlign)) {\n    nodeAlign = ALIGN_METHOD[options.nodeAlign];\n  } else if (isFunction(options.nodeAlign)) {\n    nodeAlign = options.nodeAlign;\n  }\n  const sankeyProcessor = sankey()\n    .links(d => d.edges)\n    .nodeWidth(options.nodeWidth)\n    .nodePadding(options.nodePadding)\n    .extent([[ 0, 0 ], [ 1, 1 ]]);\n  if (isFunction(options.nodeId)) {\n    sankeyProcessor.nodeId(options.nodeId);\n  }\n  if (nodeAlign) {\n    sankeyProcessor.nodeAlign(nodeAlign);\n  }\n  sankeyProcessor(dv);\n  // post process (x, y), etc.\n  dv.nodes.forEach(node => {\n    const { x0, x1, y0, y1 } = node;\n    /* points\n     * 3---2\n     * |   |\n     * 0---1\n     */\n    node.x = [ x0, x1, x1, x0 ];\n    node.y = [ y0, y0, y1, y1 ];\n  });\n  dv.edges.forEach(edge => {\n    const {\n      source,\n      target\n    } = edge;\n    const sx = source.x1;\n    const tx = target.x0;\n    edge.x = [ sx, sx, tx, tx ];\n    const offset = edge.width / 2;\n    edge.y = [ edge.y0 + offset, edge.y0 - offset, edge.y1 + offset, edge.y1 - offset ];\n  });\n}\n\nregisterTransform('diagram.sankey', transform);\nregisterTransform('sankey', transform);\n"]}]}