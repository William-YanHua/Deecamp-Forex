{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/digits-abbreviate.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/digits-abbreviate.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { has, each } from '@antv/util';\nimport { getMedian } from '../../math';\nvar unitMapper = {\n    k: { number: 1e3, index: 0 },\n    m: { number: 1e6, index: 1 },\n    b: { number: 1e9, index: 2 },\n    t: { number: 1e12, index: 3 },\n};\nexport default function digitsAbbreviate(shape, option, index, cfg) {\n    if (!has(cfg, 'node') || !has(cfg.node, 'node')) {\n        return;\n    }\n    var nodes = cfg.nodes.nodes;\n    var number = parseFloat(shape.get('origin').text);\n    if (number === 0) {\n        return;\n    }\n    if (option.formatter) {\n        shape.attr('text', option.formatter(number));\n        return;\n    }\n    if (option.unit) {\n        var _a = abbravateDigitsByUnit(option, number), num = _a.num, unitname = _a.unitname;\n        shape.attr('text', num + unitname);\n    }\n    else {\n        var numbers = extractNumbers(nodes);\n        var median = getMedian(numbers);\n        var unitname = getUnitByNumber(median);\n        var unitNumber = unitMapper[unitname].number;\n        var interval = getLinearNodesInterval(nodes);\n        var decimal = getDigitsDecimal(interval, unitNumber);\n        var num = abbravateDigitsByUnit({ unit: unitname, decimal: decimal }, number).num;\n        shape.attr('text', num + unitname);\n    }\n}\nfunction abbravateDigitsByUnit(option, number) {\n    var units = ['k', 'm', 'b', 't'];\n    var num;\n    var unitname;\n    if (option.unit === 'auto') {\n        var order = Math.floor(Math.log(number) / Math.log(1000));\n        unitname = units[order - 1];\n        num = (number / Math.pow(1000, order)).toFixed(option.decimal);\n    }\n    else if (option.unit) {\n        var unit = unitMapper[option.unit];\n        unitname = option.unit;\n        num = (number / unit.number).toFixed(option.decimal);\n    }\n    return { num: num, unitname: unitname };\n}\nfunction getUnitByNumber(number) {\n    var units = ['k', 'm', 'b', 't'];\n    var order = Math.floor(Math.log(number) / Math.log(1000));\n    return units[order - 1];\n}\nfunction extractNumbers(nodes) {\n    var numbers = [];\n    each(nodes, function (node) {\n        var n = node;\n        var number = parseFloat(n.shape.get('origin').text);\n        numbers.push(number);\n    });\n    return numbers;\n}\nfunction getLinearNodesInterval(nodes) {\n    if (nodes.length >= 2) {\n        var a = parseFloat(nodes[0].shape.get('origin').text);\n        var b = parseFloat(nodes[1].shape.get('origin').text);\n        return Math.abs(a - b);\n    }\n    return 0;\n}\nfunction getDigitsDecimal(interval, unitNumber) {\n    var unitBit = Math.floor(Math.log10(unitNumber));\n    if (interval >= unitNumber) {\n        var remainder = interval % unitNumber;\n        if (remainder > 0) {\n            var remainderBit = Math.floor(Math.log10(remainder));\n            return Math.abs(remainderBit - unitBit);\n        }\n    }\n    else {\n        var intervalBit = Math.floor(Math.log10(interval));\n        return Math.abs(intervalBit - unitBit);\n    }\n    return 0;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/digits-abbreviate.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/responsive/rules/digits-abbreviate.js"],"names":[],"mappings":"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","sourcesContent":["import { has, each } from '@antv/util';\nimport { getMedian } from '../../math';\nvar unitMapper = {\n    k: { number: 1e3, index: 0 },\n    m: { number: 1e6, index: 1 },\n    b: { number: 1e9, index: 2 },\n    t: { number: 1e12, index: 3 },\n};\n// https://gist.github.com/MartinMuzatko/1060fe584d17c7b9ca6e\n// https://jburrows.wordpress.com/2014/11/18/abbreviating-numbers/\n/*tslint:disable*/\nexport default function digitsAbbreviate(shape, option, index, cfg) {\n    if (!has(cfg, 'node') || !has(cfg.node, 'node')) {\n        return;\n    }\n    var nodes = cfg.nodes.nodes;\n    var number = parseFloat(shape.get('origin').text);\n    if (number === 0) {\n        return;\n    }\n    if (option.formatter) {\n        shape.attr('text', option.formatter(number));\n        return;\n    }\n    if (option.unit) {\n        var _a = abbravateDigitsByUnit(option, number), num = _a.num, unitname = _a.unitname;\n        shape.attr('text', num + unitname);\n    }\n    else {\n        // 自动换算逻辑\n        // 根据中位数得到换算单位\n        var numbers = extractNumbers(nodes);\n        var median = getMedian(numbers);\n        var unitname = getUnitByNumber(median);\n        //根据数值的interval计算换算后保留的浮点数\n        var unitNumber = unitMapper[unitname].number;\n        var interval = getLinearNodesInterval(nodes);\n        var decimal = getDigitsDecimal(interval, unitNumber);\n        var num = abbravateDigitsByUnit({ unit: unitname, decimal: decimal }, number).num;\n        shape.attr('text', num + unitname);\n    }\n}\nfunction abbravateDigitsByUnit(option, number) {\n    var units = ['k', 'm', 'b', 't'];\n    var num;\n    var unitname;\n    if (option.unit === 'auto') {\n        /** auto formatt k-m-b-t */\n        var order = Math.floor(Math.log(number) / Math.log(1000));\n        unitname = units[order - 1];\n        num = (number / Math.pow(1000, order)).toFixed(option.decimal);\n    }\n    else if (option.unit) {\n        var unit = unitMapper[option.unit];\n        unitname = option.unit;\n        num = (number / unit.number).toFixed(option.decimal);\n    }\n    return { num: num, unitname: unitname };\n}\nfunction getUnitByNumber(number) {\n    var units = ['k', 'm', 'b', 't'];\n    var order = Math.floor(Math.log(number) / Math.log(1000));\n    return units[order - 1];\n}\nfunction extractNumbers(nodes) {\n    var numbers = [];\n    each(nodes, function (node) {\n        var n = node;\n        var number = parseFloat(n.shape.get('origin').text);\n        numbers.push(number);\n    });\n    return numbers;\n}\nfunction getLinearNodesInterval(nodes) {\n    if (nodes.length >= 2) {\n        var a = parseFloat(nodes[0].shape.get('origin').text);\n        var b = parseFloat(nodes[1].shape.get('origin').text);\n        return Math.abs(a - b);\n    }\n    return 0;\n}\nfunction getDigitsDecimal(interval, unitNumber) {\n    var unitBit = Math.floor(Math.log10(unitNumber));\n    if (interval >= unitNumber) {\n        var remainder = interval % unitNumber;\n        if (remainder > 0) {\n            var remainderBit = Math.floor(Math.log10(remainder));\n            return Math.abs(remainderBit - unitBit);\n        }\n    }\n    else {\n        var intervalBit = Math.floor(Math.log10(interval));\n        return Math.abs(intervalBit - unitBit);\n    }\n    return 0;\n}\n//# sourceMappingURL=digits-abbreviate.js.map"]}]}