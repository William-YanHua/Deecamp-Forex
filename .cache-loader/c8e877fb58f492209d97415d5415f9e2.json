{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\hexjson.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\hexjson.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar cloneDeep = require('@antv/util/lib/clone');\r\nvar _a = require('d3-hexjson'), getGridForHexJSON = _a.getGridForHexJSON, renderHexJSON = _a.renderHexJSON;\r\nvar _b = require('../data-set'), HEX = _b.HEX, registerConnector = _b.registerConnector;\r\nvar DEFAULT_OPTIONS = {\r\n    width: 1,\r\n    height: 1\r\n};\r\nfunction processRow(row) {\r\n    row.cx = row.x;\r\n    row.cy = row.y;\r\n    row.x = [];\r\n    row.y = [];\r\n    row.vertices.forEach(function (v) {\r\n        row.x.push(v.x + row.cx);\r\n        row.y.push(v.y + row.cy);\r\n    });\r\n    return row;\r\n}\r\nfunction HexJSONConnector(data, options, dataView) {\r\n    dataView.dataType = HEX;\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var width = options.width, height = options.height;\r\n    var HexJSON = cloneDeep(data);\r\n    dataView._HexJSON = HexJSON;\r\n    var grid = dataView._GridHexJSON = getGridForHexJSON(HexJSON);\r\n    var rows = dataView.rows = renderHexJSON(HexJSON, width, height).map(processRow);\r\n    dataView._gridRows = renderHexJSON(grid, width, height).map(processRow);\r\n    return rows;\r\n}\r\nregisterConnector('hex', HexJSONConnector);\r\nregisterConnector('hexjson', HexJSONConnector);\r\nregisterConnector('hex-json', HexJSONConnector);\r\nregisterConnector('HexJSON', HexJSONConnector);\r\nmodule.exports = HexJSONConnector;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\hexjson.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\hexjson.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAC5C,IAAA,0BAGmB,EAFvB,wCAAiB,EACjB,gCACuB,CAAC;AACpB,IAAA,2BAGoB,EAFxB,YAAG,EACH,wCACwB,CAAC;AAE3B,IAAM,eAAe,GAAG;IACtB,KAAK,EAAE,CAAC;IACR,MAAM,EAAE,CAAC;CACV,CAAC;AAEF,SAAS,UAAU,CAAC,GAAG;IACrB,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IACf,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IACf,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;QACpB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;QACzB,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IACH,OAAO,GAAG,CAAC;AACb,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ;IAC/C,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IACvC,IAAA,qBAAK,EAAE,uBAAM,CAAa;IAClC,IAAM,OAAO,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IAChC,QAAQ,CAAC,QAAQ,GAAG,OAAO,CAAC;IAC5B,IAAM,IAAI,GAAG,QAAQ,CAAC,YAAY,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAChE,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACnF,QAAQ,CAAC,SAAS,GAAG,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxE,OAAO,IAAI,CAAC;AACd,CAAC;AAED,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;AAC3C,iBAAiB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAC/C,iBAAiB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;AAChD,iBAAiB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAE/C,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst cloneDeep = require('@antv/util/lib/clone');\nconst {\n  getGridForHexJSON,\n  renderHexJSON\n} = require('d3-hexjson');\nconst {\n  HEX,\n  registerConnector\n} = require('../data-set');\n\nconst DEFAULT_OPTIONS = {\n  width: 1,\n  height: 1\n};\n\nfunction processRow(row) {\n  row.cx = row.x;\n  row.cy = row.y;\n  row.x = [];\n  row.y = [];\n  row.vertices.forEach(v => {\n    row.x.push(v.x + row.cx);\n    row.y.push(v.y + row.cy);\n  });\n  return row;\n}\n\nfunction HexJSONConnector(data, options, dataView) {\n  dataView.dataType = HEX;\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const { width, height } = options;\n  const HexJSON = cloneDeep(data);\n  dataView._HexJSON = HexJSON;\n  const grid = dataView._GridHexJSON = getGridForHexJSON(HexJSON);\n  const rows = dataView.rows = renderHexJSON(HexJSON, width, height).map(processRow);\n  dataView._gridRows = renderHexJSON(grid, width, height).map(processRow);\n  return rows;\n}\n\nregisterConnector('hex', HexJSONConnector);\nregisterConnector('hexjson', HexJSONConnector);\nregisterConnector('hex-json', HexJSONConnector);\nregisterConnector('HexJSON', HexJSONConnector);\n\nmodule.exports = HexJSONConnector;\n"]}]}