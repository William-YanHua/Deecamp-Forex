{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { abs, asin, cos, epsilon, halfPi, pi, sin, sqrt } from \"./math\";\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n    var A = sqrt(6 / (4 + pi)), k = (1 + pi / 4) * sin(phi), theta = phi / 2;\n    for (var i = 0, delta; i < 25; i++) {\n        theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n        if (abs(delta) < epsilon)\n            break;\n    }\n    return [\n        A * (0.5 + cos(theta)) * lambda / 1.5,\n        A * theta\n    ];\n}\nmtFlatPolarSinusoidalRaw.invert = function (x, y) {\n    var A = sqrt(6 / (4 + pi)), theta = y / A;\n    if (abs(abs(theta) - halfPi) < epsilon)\n        theta = theta < 0 ? -halfPi : halfPi;\n    return [\n        1.5 * x / (A * (0.5 + cos(theta))),\n        asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n    ];\n};\nexport default function () {\n    return projection(mtFlatPolarSinusoidalRaw)\n        .scale(166.518);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAC;AAEtE,MAAM,UAAU,wBAAwB,CAAC,MAAM,EAAE,GAAG;IAClD,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EACtB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAC3B,KAAK,GAAG,GAAG,GAAG,CAAC,CAAC;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;QAClC,KAAK,IAAI,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACnE,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO;YAAE,MAAM;KACjC;IACD,OAAO;QACL,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,GAAG,GAAG;QACrC,CAAC,GAAG,KAAK;KACV,CAAC;AACJ,CAAC;AAED,wBAAwB,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IAC7C,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EACtB,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClB,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO;QAAE,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAC7E,OAAO;QACL,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QAClC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;KAC9C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,wBAAwB,CAAC;SACtC,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n"]}]}