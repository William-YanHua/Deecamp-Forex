{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/patterson.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/patterson.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { abs, epsilon } from \"./math\";\nvar pattersonK1 = 1.0148, pattersonK2 = 0.23185, pattersonK3 = -0.14499, pattersonK4 = 0.02406, pattersonC1 = pattersonK1, pattersonC2 = 5 * pattersonK2, pattersonC3 = 7 * pattersonK3, pattersonC4 = 9 * pattersonK4, pattersonYmax = 1.790857183;\nexport function pattersonRaw(lambda, phi) {\n    var phi2 = phi * phi;\n    return [\n        lambda,\n        phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n    ];\n}\npattersonRaw.invert = function (x, y) {\n    if (y > pattersonYmax)\n        y = pattersonYmax;\n    else if (y < -pattersonYmax)\n        y = -pattersonYmax;\n    var yc = y, delta;\n    do {\n        var y2 = yc * yc;\n        yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n    } while (abs(delta) > epsilon);\n    return [x, yc];\n};\nexport default function () {\n    return projection(pattersonRaw)\n        .scale(139.319);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/patterson.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/patterson.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,GAAG,EAAE,OAAO,EAAC,MAAM,QAAQ,CAAC;AAKpC,IAAI,WAAW,GAAG,MAAM,EACpB,WAAW,GAAG,OAAO,EACrB,WAAW,GAAG,CAAC,OAAO,EACtB,WAAW,GAAG,OAAO,EACrB,WAAW,GAAG,WAAW,EACzB,WAAW,GAAG,CAAC,GAAG,WAAW,EAC7B,WAAW,GAAG,CAAC,GAAG,WAAW,EAC7B,WAAW,GAAG,CAAC,GAAG,WAAW,EAC7B,aAAa,GAAG,WAAW,CAAC;AAEhC,MAAM,UAAU,YAAY,CAAC,MAAM,EAAE,GAAG;IACtC,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;IACrB,OAAO;QACL,MAAM;QACN,GAAG,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC;KAC9F,CAAC;AACJ,CAAC;AAED,YAAY,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IACjC,IAAI,CAAC,GAAG,aAAa;QAAE,CAAC,GAAG,aAAa,CAAC;SACpC,IAAI,CAAC,GAAG,CAAC,aAAa;QAAE,CAAC,GAAG,CAAC,aAAa,CAAC;IAChD,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;IAElB,GAAG;QACD,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;QACjB,EAAE,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,WAAW,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,CAAC,WAAW,GAAG,WAAW,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KAC9L,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,OAAO,EAAE;IAE/B,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,YAAY,CAAC;SAC1B,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n"]}]}