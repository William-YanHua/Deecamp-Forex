{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/guyou.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/guyou.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { ellipticF, ellipticFi, ellipticJi } from \"./elliptic\";\nimport { abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan } from \"./math\";\nimport squareRaw from \"./square\";\nexport function guyouRaw(lambda, phi) {\n    var k_ = (sqrt2 - 1) / (sqrt2 + 1), k = sqrt(1 - k_ * k_), K = ellipticF(halfPi, k * k), f = -1, psi = log(tan(pi / 4 + abs(phi) / 2)), r = exp(f * psi) / sqrt(k_), at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)), t = ellipticFi(at[0], at[1], k * k);\n    return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\nfunction guyouComplexAtan(x, y) {\n    var x2 = x * x, y_1 = y + 1, t = 1 - x2 - y * y;\n    return [\n        0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n        -0.25 * log(t * t + 4 * x2) + 0.5 * log(y_1 * y_1 + x2)\n    ];\n}\nfunction guyouComplexDivide(a, b) {\n    var denominator = b[0] * b[0] + b[1] * b[1];\n    return [\n        (a[0] * b[0] + a[1] * b[1]) / denominator,\n        (a[1] * b[0] - a[0] * b[1]) / denominator\n    ];\n}\nguyouRaw.invert = function (x, y) {\n    var k_ = (sqrt2 - 1) / (sqrt2 + 1), k = sqrt(1 - k_ * k_), K = ellipticF(halfPi, k * k), f = -1, j = ellipticJi(0.5 * K - y, -x, k * k), tn = guyouComplexDivide(j[0], j[1]), lambda = atan2(tn[1], tn[0]) / f;\n    return [\n        lambda,\n        2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n    ];\n};\nexport default function () {\n    return projection(squareRaw(guyouRaw))\n        .scale(151.496);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/guyou.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/guyou.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n"]}]}