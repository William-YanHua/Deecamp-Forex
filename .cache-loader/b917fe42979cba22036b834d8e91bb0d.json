{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/math.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/math.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { vec3 } from '@antv/matrix-util';\nimport { each, clone } from '@antv/util';\nfunction magnitude(v) {\n    var sum = 0;\n    each(v, function (value) {\n        sum += value * value;\n    });\n    return Math.sqrt(sum);\n}\nfunction dotProduct2D(va, vb) {\n    return va.x * vb.y + va.y * vb.x;\n}\nfunction angleTo(va, vb) {\n    var magA = magnitude(va);\n    var magB = magnitude(vb);\n    var dot = dotProduct2D(va, vb);\n    var angle = Math.acos(dot / magA / magB);\n    return angle;\n}\nfunction crossProduct2D(va, vb) {\n    var magA = magnitude(va);\n    var magB = magnitude(vb);\n    var dot = dotProduct2D(va, vb);\n    var angle = Math.acos(dot / magA / magB);\n    return magA * magB * Math.sin(angle);\n}\nfunction crossProduct3D(va, vb) {\n    var ax = va.x, ay = va.y, az = va.z;\n    var bx = vb.x, by = vb.y, bz = vb.z;\n    var x = ay * bz - az * by;\n    var y = az * bx - ax * bz;\n    var z = ax * by - ay * bx;\n    return { x: x, y: y, z: z };\n}\nfunction sub2D(va, vb) {\n    return { x: va.x - vb.x, y: va.y - vb.y };\n}\nfunction applyMatrix(point, matrix, tag) {\n    if (tag === void 0) {\n        tag = 1;\n    }\n    var vector = [point.x, point.y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return {\n        x: vector[0],\n        y: vector[1],\n    };\n}\nfunction isBetween(value, min, max) {\n    return value >= min && value <= max;\n}\nvar tolerance = 0.001;\nfunction getLineIntersect(p0, p1, p2, p3) {\n    var E = {\n        x: p2.x - p0.x,\n        y: p2.y - p0.y,\n    };\n    var D0 = {\n        x: p1.x - p0.x,\n        y: p1.y - p0.y,\n    };\n    var D1 = {\n        x: p3.x - p2.x,\n        y: p3.y - p2.y,\n    };\n    var kross = D0.x * D1.y - D0.y * D1.x;\n    var sqrKross = kross * kross;\n    var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n    var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n    var point = null;\n    if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n        var s = (E.x * D1.y - E.y * D1.x) / kross;\n        var t = (E.x * D0.y - E.y * D0.x) / kross;\n        if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n            point = {\n                x: p0.x + s * D0.x,\n                y: p0.y + s * D0.y,\n            };\n        }\n    }\n    return point;\n}\nfunction isPointInPolygon(p, polygon) {\n    var inside = false;\n    for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        var xi = polygon[i].x;\n        var yi = polygon[i].y;\n        var xj = polygon[j].x;\n        var yj = polygon[j].y;\n        var intersect = yi > p.y !== yj > p.y && p.x <= ((xj - xi) * (p.y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\nfunction sqr(v) {\n    return v * v;\n}\nfunction dist2(a, b) {\n    return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\nfunction distBetweenPoints(a, b) {\n    return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\nfunction distBetweenPointLine(p, p1, p2) {\n    var l2 = dist2(p1, p2);\n    if (l2 === 0) {\n        return dist2(p, p1);\n    }\n    var t = ((p.x - p1.x) * (p2.x - p1.x) + (p.y - p1.y) * (p2.y - p1.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    var distSquare = dist2(p, { x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y) });\n    return Math.sqrt(distSquare);\n}\nfunction minDistBetweenPointPolygon(p, polygon) {\n    var min = Infinity;\n    each(polygon, function (v) {\n        var dist = Math.sqrt(dist2(v, p));\n        if (min > dist) {\n            min = dist;\n        }\n    });\n    for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        var xi = polygon[i].x;\n        var yi = polygon[i].y;\n        var xj = polygon[j].x;\n        var yj = polygon[j].y;\n        var dist = distBetweenPointLine(p, { x: xi, y: yi }, { x: xj, y: yj });\n        if (min > dist) {\n            min = dist;\n        }\n    }\n    return min;\n}\nfunction isPolygonIntersection(polyA, polyB) {\n    for (var _i = 0, polyA_1 = polyA; _i < polyA_1.length; _i++) {\n        var p = polyA_1[_i];\n        var inside = isPointInPolygon(p, polyB);\n        if (inside) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction minDistBetweenConvexPolygon(polyA, polyB) {\n    if (isPolygonIntersection(polyA, polyB)) {\n        return 0;\n    }\n    var minA = Infinity;\n    var minB = Infinity;\n    each(polyA, function (v) {\n        var localMin = minDistBetweenPointPolygon(v, polyB);\n        if (minA > localMin) {\n            minA = localMin;\n        }\n    });\n    each(polyB, function (v) {\n        var localMin = minDistBetweenPointPolygon(v, polyA);\n        if (minB > localMin) {\n            minB = localMin;\n        }\n    });\n    return Math.min(minA, minB);\n}\nfunction bboxOnRotate(shape) {\n    var bbox = shape.getBBox();\n    var x = bbox.minX;\n    var y = bbox.minY;\n    var bboxWidth = bbox.maxX - bbox.minX;\n    var bboxHeight = bbox.maxY - bbox.minY;\n    var matrix = shape.attr('matrix');\n    var ulMatrix;\n    if (matrix) {\n        ulMatrix = [matrix[0], matrix[1], 0, matrix[3], matrix[4], 0, 0, 0, 1];\n    }\n    else {\n        ulMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n    var top_left = applyMatrix({ x: 0, y: 0 }, ulMatrix);\n    top_left.x += x;\n    top_left.y += y;\n    var top_right = applyMatrix({ x: bboxWidth, y: 0 }, ulMatrix);\n    top_right.x += x;\n    top_right.y += y;\n    var bottom_left = applyMatrix({ x: 0, y: bboxHeight }, ulMatrix);\n    bottom_left.x += x;\n    bottom_left.y += y;\n    var bottom_right = applyMatrix({ x: bboxWidth, y: bboxHeight }, ulMatrix);\n    bottom_right.x += x;\n    bottom_right.y += y;\n    var points = [top_left, top_right, bottom_left, bottom_right];\n    points.sort(function (a, b) {\n        return a.y - b.y;\n    });\n    var minY = points[0].y;\n    var maxY = points[points.length - 1].y;\n    var tops = [points[0], points[1]];\n    var bottoms = [points[2], points[3]];\n    var topLeft = tops[0].x < tops[1].x ? tops[0] : tops[1];\n    var topRight = tops[0].x < tops[1].x ? tops[1] : tops[0];\n    var bottomLeft = bottoms[0].x < bottoms[1].x ? bottoms[0] : bottoms[1];\n    var bottomRight = bottoms[0].x < bottoms[1].x ? bottoms[1] : bottoms[0];\n    points.sort(function (a, b) {\n        return a.x - b.x;\n    });\n    var minX = points[0].x;\n    var maxX = points[points.length - 1].x;\n    var node = {\n        width: maxX - minX,\n        height: maxY - minY,\n        left: minX,\n        right: maxX,\n        top: minY,\n        bottom: maxY,\n        topLeft: topLeft,\n        topRight: topRight,\n        bottomLeft: bottomLeft,\n        bottomRight: bottomRight,\n        centerX: minX + (maxX - minX) / 2,\n        centerY: minY + (maxY - minY) / 2,\n    };\n    return node;\n}\nvar THRESHOLD = 2;\nfunction lineSimplification(points) {\n    if (points.length < 5) {\n        return points;\n    }\n    return DouglasPeucker(points, THRESHOLD);\n}\nfunction DouglasPeucker(points, threshold) {\n    var result;\n    var max = -Infinity;\n    var index = 0;\n    var endIndex = points.length - 1;\n    for (var i = 1; i < endIndex; i++) {\n        var point = points[i];\n        var line = { start: points[0], end: points[endIndex] };\n        var dist = distBetweenPointLine(point, line.start, line.end);\n        if (dist > max) {\n            max = dist;\n            index = i;\n        }\n    }\n    if (max > threshold) {\n        var list1 = DouglasPeucker(points.slice(0, index + 1), threshold);\n        var list2 = DouglasPeucker(points.slice(index, points.length), threshold);\n        result = list1.concat(list2);\n    }\n    else {\n        result = [points[0], points[points.length - 1]];\n    }\n    return result;\n}\nfunction getMedian(array) {\n    var list = clone(array);\n    list.sort(function (a, b) {\n        return a - b;\n    });\n    var half = Math.floor(list.length / 2);\n    if (list.length % 2) {\n        return list[half];\n    }\n    return (list[half - 1] + list[half]) / 2.0;\n}\nfunction getMean(array) {\n    var sum = 0;\n    each(array, function (num) {\n        sum += num;\n    });\n    return sum / array.length;\n}\nfunction sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\nexport { applyMatrix, isBetween, getLineIntersect, isPointInPolygon, distBetweenPoints, distBetweenPointLine, isPolygonIntersection, minDistBetweenConvexPolygon, bboxOnRotate, dotProduct2D, crossProduct2D, crossProduct3D, sub2D, angleTo, lineSimplification, getMedian, getMean, sturges, dist2, };\nexport function getStrokePoints(x, y, width, height, step) {\n    if (step === void 0) {\n        step = 2;\n    }\n    var points = [];\n    for (var curX = x; curX <= x + width; curX += step) {\n        points.push([curX, y]);\n    }\n    for (var curY = y; curY <= y + height; curY += step) {\n        points.push([x + width, curY]);\n    }\n    for (var curX = x + width; curX >= x; curX -= step) {\n        points.push([curX, y + height]);\n    }\n    for (var curY = y + height; curY >= y; curY -= step) {\n        points.push([x, curY]);\n    }\n    return points;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/math.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/math.js"],"names":[],"mappings":"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","sourcesContent":["import { vec3 } from '@antv/matrix-util';\nimport { each, clone } from '@antv/util';\nfunction magnitude(v) {\n    var sum = 0;\n    each(v, function (value) {\n        sum += value * value;\n    });\n    return Math.sqrt(sum);\n}\nfunction dotProduct2D(va, vb) {\n    return va.x * vb.y + va.y * vb.x;\n}\nfunction angleTo(va, vb) {\n    var magA = magnitude(va);\n    var magB = magnitude(vb);\n    var dot = dotProduct2D(va, vb);\n    var angle = Math.acos(dot / magA / magB);\n    return angle;\n}\nfunction crossProduct2D(va, vb) {\n    var magA = magnitude(va);\n    var magB = magnitude(vb);\n    var dot = dotProduct2D(va, vb);\n    var angle = Math.acos(dot / magA / magB);\n    return magA * magB * Math.sin(angle);\n}\nfunction crossProduct3D(va, vb) {\n    var ax = va.x, ay = va.y, az = va.z;\n    var bx = vb.x, by = vb.y, bz = vb.z;\n    var x = ay * bz - az * by;\n    var y = az * bx - ax * bz;\n    var z = ax * by - ay * bx;\n    return { x: x, y: y, z: z };\n}\nfunction sub2D(va, vb) {\n    return { x: va.x - vb.x, y: va.y - vb.y };\n}\nfunction applyMatrix(point, matrix, tag) {\n    if (tag === void 0) { tag = 1; }\n    var vector = [point.x, point.y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return {\n        x: vector[0],\n        y: vector[1],\n    };\n}\nfunction isBetween(value, min, max) {\n    return value >= min && value <= max;\n}\nvar tolerance = 0.001;\nfunction getLineIntersect(p0, p1, p2, p3) {\n    var E = {\n        x: p2.x - p0.x,\n        y: p2.y - p0.y,\n    };\n    var D0 = {\n        x: p1.x - p0.x,\n        y: p1.y - p0.y,\n    };\n    var D1 = {\n        x: p3.x - p2.x,\n        y: p3.y - p2.y,\n    };\n    var kross = D0.x * D1.y - D0.y * D1.x;\n    var sqrKross = kross * kross;\n    var sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n    var sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n    var point = null;\n    if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n        var s = (E.x * D1.y - E.y * D1.x) / kross;\n        var t = (E.x * D0.y - E.y * D0.x) / kross;\n        if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n            point = {\n                x: p0.x + s * D0.x,\n                y: p0.y + s * D0.y,\n            };\n        }\n    }\n    return point;\n}\nfunction isPointInPolygon(p, polygon) {\n    /** 射线法 */\n    var inside = false;\n    for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        var xi = polygon[i].x;\n        var yi = polygon[i].y;\n        var xj = polygon[j].x;\n        var yj = polygon[j].y;\n        var intersect = yi > p.y !== yj > p.y && p.x <= ((xj - xi) * (p.y - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\nfunction sqr(v) {\n    return v * v;\n}\nfunction dist2(a, b) {\n    return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\nfunction distBetweenPoints(a, b) {\n    return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\nfunction distBetweenPointLine(p, p1, p2) {\n    var l2 = dist2(p1, p2);\n    if (l2 === 0) {\n        return dist2(p, p1);\n    }\n    var t = ((p.x - p1.x) * (p2.x - p1.x) + (p.y - p1.y) * (p2.y - p1.y)) / l2;\n    t = Math.max(0, Math.min(1, t));\n    var distSquare = dist2(p, { x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y) });\n    return Math.sqrt(distSquare);\n}\n// todo：待优化 https://blog.csdn.net/WilliamSun0122/article/details/77994526\nfunction minDistBetweenPointPolygon(p, polygon) {\n    var min = Infinity;\n    /** vertice to vertice */\n    each(polygon, function (v) {\n        var dist = Math.sqrt(dist2(v, p));\n        if (min > dist) {\n            min = dist;\n        }\n    });\n    /** vertice to edge */\n    for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n        var xi = polygon[i].x;\n        var yi = polygon[i].y;\n        var xj = polygon[j].x;\n        var yj = polygon[j].y;\n        var dist = distBetweenPointLine(p, { x: xi, y: yi }, { x: xj, y: yj });\n        if (min > dist) {\n            min = dist;\n        }\n    }\n    return min;\n}\nfunction isPolygonIntersection(polyA, polyB) {\n    for (var _i = 0, polyA_1 = polyA; _i < polyA_1.length; _i++) {\n        var p = polyA_1[_i];\n        var inside = isPointInPolygon(p, polyB);\n        if (inside) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction minDistBetweenConvexPolygon(polyA, polyB) {\n    if (isPolygonIntersection(polyA, polyB)) {\n        return 0;\n    }\n    var minA = Infinity;\n    var minB = Infinity;\n    each(polyA, function (v) {\n        var localMin = minDistBetweenPointPolygon(v, polyB);\n        if (minA > localMin) {\n            minA = localMin;\n        }\n    });\n    each(polyB, function (v) {\n        var localMin = minDistBetweenPointPolygon(v, polyA);\n        if (minB > localMin) {\n            minB = localMin;\n        }\n    });\n    return Math.min(minA, minB);\n}\nfunction bboxOnRotate(shape) {\n    var bbox = shape.getBBox();\n    var x = bbox.minX;\n    var y = bbox.minY;\n    /*\n     * step1: 获得旋转后的shape包围盒\n     * 将包围盒对齐到原点，apply旋转矩阵\n     * 移回原来的位置\n     */\n    var bboxWidth = bbox.maxX - bbox.minX;\n    var bboxHeight = bbox.maxY - bbox.minY;\n    // const matrix = shape.getTotalMatrix();\n    var matrix = shape.attr('matrix');\n    var ulMatrix;\n    if (matrix) {\n        ulMatrix = [matrix[0], matrix[1], 0, matrix[3], matrix[4], 0, 0, 0, 1];\n    }\n    else {\n        ulMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n    var top_left = applyMatrix({ x: 0, y: 0 }, ulMatrix);\n    top_left.x += x;\n    top_left.y += y;\n    var top_right = applyMatrix({ x: bboxWidth, y: 0 }, ulMatrix);\n    top_right.x += x;\n    top_right.y += y;\n    var bottom_left = applyMatrix({ x: 0, y: bboxHeight }, ulMatrix);\n    bottom_left.x += x;\n    bottom_left.y += y;\n    var bottom_right = applyMatrix({ x: bboxWidth, y: bboxHeight }, ulMatrix);\n    bottom_right.x += x;\n    bottom_right.y += y;\n    /** step2：根据旋转后的画布位置重新计算包围盒，以免图形进行旋转后上下颠倒 */\n    var points = [top_left, top_right, bottom_left, bottom_right];\n    points.sort(function (a, b) {\n        return a.y - b.y;\n    });\n    var minY = points[0].y;\n    var maxY = points[points.length - 1].y;\n    var tops = [points[0], points[1]];\n    var bottoms = [points[2], points[3]];\n    var topLeft = tops[0].x < tops[1].x ? tops[0] : tops[1];\n    var topRight = tops[0].x < tops[1].x ? tops[1] : tops[0];\n    var bottomLeft = bottoms[0].x < bottoms[1].x ? bottoms[0] : bottoms[1];\n    var bottomRight = bottoms[0].x < bottoms[1].x ? bottoms[1] : bottoms[0];\n    points.sort(function (a, b) {\n        return a.x - b.x;\n    });\n    var minX = points[0].x;\n    var maxX = points[points.length - 1].x;\n    var node = {\n        width: maxX - minX,\n        height: maxY - minY,\n        left: minX,\n        right: maxX,\n        top: minY,\n        bottom: maxY,\n        topLeft: topLeft,\n        topRight: topRight,\n        bottomLeft: bottomLeft,\n        bottomRight: bottomRight,\n        centerX: minX + (maxX - minX) / 2,\n        centerY: minY + (maxY - minY) / 2,\n    };\n    return node;\n}\n/**\n * 线简化算法\n */\nvar THRESHOLD = 2;\nfunction lineSimplification(points) {\n    if (points.length < 5) {\n        return points;\n    }\n    return DouglasPeucker(points, THRESHOLD);\n}\n// https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\nfunction DouglasPeucker(points, threshold) {\n    var result;\n    var max = -Infinity;\n    var index = 0;\n    var endIndex = points.length - 1;\n    for (var i = 1; i < endIndex; i++) {\n        var point = points[i];\n        var line = { start: points[0], end: points[endIndex] };\n        var dist = distBetweenPointLine(point, line.start, line.end);\n        if (dist > max) {\n            max = dist;\n            index = i;\n        }\n    }\n    if (max > threshold) {\n        var list1 = DouglasPeucker(points.slice(0, index + 1), threshold);\n        var list2 = DouglasPeucker(points.slice(index, points.length), threshold);\n        result = list1.concat(list2);\n    }\n    else {\n        result = [points[0], points[points.length - 1]];\n    }\n    return result;\n}\n/** 统计的以后迁出去，暂时先放这里 */\nfunction getMedian(array) {\n    var list = clone(array);\n    list.sort(function (a, b) {\n        return a - b;\n    });\n    var half = Math.floor(list.length / 2);\n    if (list.length % 2) {\n        return list[half];\n    }\n    return (list[half - 1] + list[half]) / 2.0;\n}\nfunction getMean(array) {\n    var sum = 0;\n    each(array, function (num) {\n        sum += num;\n    });\n    return sum / array.length;\n}\nfunction sturges(values) {\n    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\nexport { applyMatrix, isBetween, getLineIntersect, isPointInPolygon, distBetweenPoints, distBetweenPointLine, isPolygonIntersection, minDistBetweenConvexPolygon, bboxOnRotate, dotProduct2D, crossProduct2D, crossProduct3D, sub2D, angleTo, lineSimplification, getMedian, getMean, sturges, dist2, };\n/**\n * 获取 x/y/width/height指定的BBox边界上的所有点，由step抽样\n * @param x\n * @param y\n * @param width\n * @param height\n * @param step\n */\nexport function getStrokePoints(x, y, width, height, step) {\n    if (step === void 0) { step = 2; }\n    var points = [];\n    // top\n    for (var curX = x; curX <= x + width; curX += step) {\n        points.push([curX, y]);\n    }\n    // right\n    for (var curY = y; curY <= y + height; curY += step) {\n        points.push([x + width, curY]);\n    }\n    // bottom\n    for (var curX = x + width; curX >= x; curX -= step) {\n        points.push([curX, y + height]);\n    }\n    // left\n    for (var curY = y + height; curY >= y; curY -= step) {\n        points.push([x, curY]);\n    }\n    return points;\n}\n//# sourceMappingURL=math.js.map"]}]}