{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\src\\utils\\Array.tsx","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\src\\utils\\Array.tsx","mtime":1596379644647},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __spread = (this && this.__spread) || function () {\r\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n};\r\nexport function removeElementAt(array, index) {\r\n    array.splice(index, 1);\r\n}\r\nexport function replaceElement(array, source, replacement) {\r\n    var index = array.indexOf(this.source);\r\n    array[index] = replacement;\r\n}\r\nexport function flatten(nestedArray) {\r\n    return nestedArray.reduce(function (prev, curr) { return __spread(prev, curr); }, []);\r\n}\r\nexport function objectValues(object) {\r\n    return Object.keys(object).map(function (x) { return object[x]; });\r\n}\r\nexport function takeAtMost(array, n) {\r\n    if (array.length <= n) {\r\n        return array;\r\n    }\r\n    else {\r\n        return array.slice(0, n);\r\n    }\r\n}\r\nexport function arrayContainsElement(array) {\r\n    return !!array && array.length > 0;\r\n}\r\nexport function arraySum(array, mapper) {\r\n    return array.map(mapper).reduce(function (prev, curr) { return prev + curr; }, 0);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\src\\utils\\Array.tsx","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\src\\utils\\Array.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAM,UAAU,eAAe,CAAI,KAAU,EAAE,KAAa;IAC1D,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,cAAc,CAAI,KAAU,EAAE,MAAS,EAAE,WAAc;IACrE,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,KAAK,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,OAAO,CAAI,WAAkB;IAC3C,OAAO,WAAW,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,gBAAI,IAAI,EAAK,IAAI,GAAjB,CAAkB,EAAE,EAAE,CAAC,CAAC;AACpE,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,MAAc;IACzC,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;AACnD,CAAC;AAED,MAAM,UAAU,UAAU,CAAI,KAAU,EAAE,CAAS;IACjD,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;QACrB,OAAO,KAAK,CAAC;KACd;SAAM;QACL,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KAC1B;AACH,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAI,KAAU;IAChD,OAAO,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,QAAQ,CAAI,KAAU,EAAE,MAAwB;IAC9D,OAAO,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,OAAA,IAAI,GAAG,IAAI,EAAX,CAAW,EAAE,CAAC,CAAC,CAAC;AAClE,CAAC","sourcesContent":["export function removeElementAt<T>(array: T[], index: number) {\r\n  array.splice(index, 1);\r\n}\r\n\r\nexport function replaceElement<T>(array: T[], source: T, replacement: T) {\r\n  const index = array.indexOf(this.source);\r\n  array[index] = replacement;\r\n}\r\n\r\nexport function flatten<T>(nestedArray: T[][]) {\r\n  return nestedArray.reduce((prev, curr) => [...prev, ...curr], []);\r\n}\r\n\r\nexport function objectValues(object: object) {\r\n  return Object.keys(object).map((x) => object[x]);\r\n}\r\n\r\nexport function takeAtMost<T>(array: T[], n: number) {\r\n  if (array.length <= n) {\r\n    return array;\r\n  } else {\r\n    return array.slice(0, n);\r\n  }\r\n}\r\n\r\nexport function arrayContainsElement<T>(array: T[]) {\r\n  return !!array && array.length > 0;\r\n}\r\n\r\nexport function arraySum<T>(array: T[], mapper: (e: T) => number) {\r\n  return array.map(mapper).reduce((prev, curr) => prev + curr, 0);\r\n}\r\n"]}]}