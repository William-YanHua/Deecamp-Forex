{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/august.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/august.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan } from \"./math\";\nexport function augustRaw(lambda, phi) {\n    var tanPhi = tan(phi / 2), k = sqrt(1 - tanPhi * tanPhi), c = 1 + k * cos(lambda /= 2), x = sin(lambda) * k / c, y = tanPhi / c, x2 = x * x, y2 = y * y;\n    return [\n        4 / 3 * x * (3 + x2 - 3 * y2),\n        4 / 3 * y * (3 + 3 * x2 - y2)\n    ];\n}\naugustRaw.invert = function (x, y) {\n    x *= 3 / 8, y *= 3 / 8;\n    if (!x && abs(y) > 1)\n        return null;\n    var x2 = x * x, y2 = y * y, s = 1 + x2 + y2, sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2), eta = asin(sin3Eta) / 3, xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3, cosEta = cos(eta), coshXi = cosh(xi), d = coshXi * coshXi - cosEta * cosEta;\n    return [\n        sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n        sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n    ];\n};\nexport default function () {\n    return projection(augustRaw)\n        .scale(66.1603);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/august.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/august.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,QAAQ,CAAC;AAE/F,MAAM,UAAU,SAAS,CAAC,MAAM,EAAE,GAAG;IACnC,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EACrB,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,EAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,EAC5B,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EACvB,CAAC,GAAG,MAAM,GAAG,CAAC,EACd,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;IACf,OAAO;QACL,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;QAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;KAC9B,CAAC;AACJ,CAAC;AAED,SAAS,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IAC9B,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACvB,IAAI,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAAE,OAAO,IAAI,CAAC;IAClC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,EACf,OAAO,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EACjD,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EACvB,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAChE,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,EACjB,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,EACjB,CAAC,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IAC1C,OAAO;QACL,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,IAAI,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;KACjD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,SAAS,CAAC;SACvB,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n"]}]}