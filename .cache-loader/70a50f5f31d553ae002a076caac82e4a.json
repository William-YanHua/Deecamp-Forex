{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo/src/adder.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo/src/adder.js","mtime":1466135180000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["export default function () {\n    return new Adder;\n}\nfunction Adder() {\n    this.reset();\n}\nAdder.prototype = {\n    constructor: Adder,\n    reset: function () {\n        this.s =\n            this.t = 0;\n    },\n    add: function (y) {\n        add(temp, y, this.t);\n        add(this, temp.s, this.s);\n        if (this.s)\n            this.t += temp.t;\n        else\n            this.s = temp.t;\n    },\n    valueOf: function () {\n        return this.s;\n    }\n};\nvar temp = new Adder;\nfunction add(adder, a, b) {\n    var x = adder.s = a + b, bv = x - a, av = x - bv;\n    adder.t = (a - av) + (b - bv);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo/src/adder.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo/src/adder.js"],"names":[],"mappings":"AAOA,MAAM,CAAC,OAAO;IACZ,OAAO,IAAI,KAAK,CAAC;AACnB,CAAC;AAED,SAAS,KAAK;IACZ,IAAI,CAAC,KAAK,EAAE,CAAC;AACf,CAAC;AAED,KAAK,CAAC,SAAS,GAAG;IAChB,WAAW,EAAE,KAAK;IAClB,KAAK,EAAE;QACL,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACb,CAAC;IACD,GAAG,EAAE,UAAS,CAAC;QACb,GAAG,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,CAAC;YAAE,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;;YACxB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,EAAE;QACP,OAAO,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC;CACF,CAAC;AAEF,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC;AAErB,SAAS,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EACnB,EAAE,GAAG,CAAC,GAAG,CAAC,EACV,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;IAChB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAChC,CAAC","sourcesContent":["// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n"]}]}