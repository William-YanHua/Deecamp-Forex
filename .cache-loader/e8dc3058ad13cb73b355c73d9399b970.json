{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\polynomial.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\polynomial.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nimport { determination } from \"./utils/determination\";\r\nimport { interpose } from \"./utils/interpose\";\r\nimport { points, visitPoints } from \"./utils/points\";\r\nimport linear from \"./linear\";\r\nimport quad from \"./quadratic\";\r\nexport default function () {\r\n    var x = function (d) { return d[0]; }, y = function (d) { return d[1]; }, order = 3, domain;\r\n    function polynomial(data) {\r\n        if (order === 1) {\r\n            var o = linear().x(x).y(y).domain(domain)(data);\r\n            o.coefficients = [o.b, o.a];\r\n            delete o.a;\r\n            delete o.b;\r\n            return o;\r\n        }\r\n        if (order === 2) {\r\n            var o = quad().x(x).y(y).domain(domain)(data);\r\n            o.coefficients = [o.c, o.b, o.a];\r\n            delete o.a;\r\n            delete o.b;\r\n            delete o.c;\r\n            return o;\r\n        }\r\n        var _a = __read(points(data, x, y), 4), xv = _a[0], yv = _a[1], ux = _a[2], uy = _a[3], n = xv.length, lhs = [], rhs = [], k = order + 1;\r\n        var Y = 0, n0 = 0, xmin = domain ? +domain[0] : Infinity, xmax = domain ? +domain[1] : -Infinity;\r\n        visitPoints(data, x, y, function (dx, dy) {\r\n            ++n0;\r\n            Y += (dy - Y) / n0;\r\n            if (!domain) {\r\n                if (dx < xmin)\r\n                    xmin = dx;\r\n                if (dx > xmax)\r\n                    xmax = dx;\r\n            }\r\n        });\r\n        var i, j, l, v, c;\r\n        for (i = 0; i < k; ++i) {\r\n            for (l = 0, v = 0; l < n; ++l) {\r\n                v += Math.pow(xv[l], i) * yv[l];\r\n            }\r\n            lhs.push(v);\r\n            c = new Float64Array(k);\r\n            for (j = 0; j < k; ++j) {\r\n                for (l = 0, v = 0; l < n; ++l) {\r\n                    v += Math.pow(xv[l], i + j);\r\n                }\r\n                c[j] = v;\r\n            }\r\n            rhs.push(c);\r\n        }\r\n        rhs.push(lhs);\r\n        var coef = gaussianElimination(rhs), fn = function (x) {\r\n            x -= ux;\r\n            var y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\r\n            for (i = 3; i < k; ++i)\r\n                y += coef[i] * Math.pow(x, i);\r\n            return y;\r\n        }, out = interpose(xmin, xmax, fn);\r\n        out.coefficients = uncenter(k, coef, -ux, uy);\r\n        out.predict = fn;\r\n        out.rSquared = determination(data, x, y, Y, fn);\r\n        return out;\r\n    }\r\n    polynomial.domain = function (arr) {\r\n        return arguments.length ? (domain = arr, polynomial) : domain;\r\n    };\r\n    polynomial.x = function (fn) {\r\n        return arguments.length ? (x = fn, polynomial) : x;\r\n    };\r\n    polynomial.y = function (fn) {\r\n        return arguments.length ? (y = fn, polynomial) : y;\r\n    };\r\n    polynomial.order = function (n) {\r\n        return arguments.length ? (order = n, polynomial) : order;\r\n    };\r\n    return polynomial;\r\n}\r\nfunction uncenter(k, a, x, y) {\r\n    var z = Array(k);\r\n    var i, j, v, c;\r\n    for (i = 0; i < k; ++i)\r\n        z[i] = 0;\r\n    for (i = k - 1; i >= 0; --i) {\r\n        v = a[i];\r\n        c = 1;\r\n        z[i] += v;\r\n        for (j = 1; j <= i; ++j) {\r\n            c *= (i + 1 - j) / j;\r\n            z[i - j] += v * Math.pow(x, j) * c;\r\n        }\r\n    }\r\n    z[0] += y;\r\n    return z;\r\n}\r\nfunction gaussianElimination(matrix) {\r\n    var n = matrix.length - 1, coef = [];\r\n    var i, j, k, r, t;\r\n    for (i = 0; i < n; ++i) {\r\n        r = i;\r\n        for (j = i + 1; j < n; ++j) {\r\n            if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\r\n                r = j;\r\n            }\r\n        }\r\n        for (k = i; k < n + 1; ++k) {\r\n            t = matrix[k][i];\r\n            matrix[k][i] = matrix[k][r];\r\n            matrix[k][r] = t;\r\n        }\r\n        for (j = i + 1; j < n; ++j) {\r\n            for (k = n; k >= i; k--) {\r\n                matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\r\n            }\r\n        }\r\n    }\r\n    for (j = n - 1; j >= 0; --j) {\r\n        t = 0;\r\n        for (k = j + 1; k < n; ++k) {\r\n            t += matrix[k][j] * coef[k];\r\n        }\r\n        coef[j] = (matrix[n][j] - t) / matrix[j][j];\r\n    }\r\n    return coef;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\polynomial.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\polynomial.js"],"names":[],"mappings":"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","sourcesContent":["import { determination } from \"./utils/determination\";\nimport { interpose } from \"./utils/interpose\";\nimport { points, visitPoints } from \"./utils/points\";\nimport linear from \"./linear\";\nimport quad from \"./quadratic\";\n\n// Adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n// ...with ideas from vega-statistics by Jeffrey Heer\n// Source: https://github.com/vega/vega/blob/f21cb8792b4e0cbe2b1a3fd44b0f5db370dbaadb/packages/vega-statistics/src/regression/poly.js\n// License: https://github.com/vega/vega/blob/f058b099decad9db78301405dd0d2e9d8ba3d51a/LICENSE\nexport default function(){\n  let x = d => d[0],\n      y = d => d[1],\n      order = 3,\n      domain;\n  \n  function polynomial(data) {    \n    // Use more efficient methods for lower orders\n    if (order === 1) {\n      const o = linear().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.b, o.a];\n      delete o.a; delete o.b;\n      return o;\n    }\n    if (order === 2) {\n      const o = quad().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.c, o.b, o.a];\n      delete o.a; delete o.b; delete o.c;\n      return o;\n    }\n    \n    const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n    let Y = 0, n0 = 0,\n        xmin = domain ? +domain[0] : Infinity,\n        xmax = domain ? +domain[1] : -Infinity;\n    \n    visitPoints(data, x, y, (dx, dy) => {\n      ++n0\n      Y += (dy - Y) / n0;\n      if (!domain){\n        if (dx < xmin) xmin = dx;\n        if (dx > xmax) xmax = dx;        \n      }\n    });\n\n    let i, j, l, v, c;\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j=0; j<k; ++j) {\n        for (l=0, v=0; l<n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          fn = x => {\n            x -= ux;\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n            for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          },\n          out = interpose(xmin, xmax, fn);\n\n    out.coefficients = uncenter(k, coef, -ux, uy);\n    out.predict = fn;\n    out.rSquared = determination(data, x, y, Y, fn);\n    \n    return out;\n  }\n\n  polynomial.domain = function(arr){\n    return arguments.length ? (domain = arr, polynomial) : domain;\n  }\n\n  polynomial.x = function(fn){\n    return arguments.length ? (x = fn, polynomial) : x;\n  }\n\n  polynomial.y = function(fn){\n    return arguments.length ? (y = fn, polynomial) : y;\n  }\n\n  polynomial.order = function(n){\n    return arguments.length ? (order = n, polynomial) : order;\n  }\n  \n  return polynomial;\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i = 0; i < k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}"]}]}