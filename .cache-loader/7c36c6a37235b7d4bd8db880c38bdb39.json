{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\loximuthal.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\loximuthal.js","mtime":1467726107000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import parallel1 from \"./parallel1\";\r\nimport { abs, cos, epsilon, halfPi, log, quarterPi, tan } from \"./math\";\r\nexport function loximuthalRaw(phi0) {\r\n    var cosPhi0 = cos(phi0), tanPhi0 = tan(quarterPi + phi0 / 2);\r\n    function forward(lambda, phi) {\r\n        var y = phi - phi0, x = abs(y) < epsilon ? lambda * cosPhi0\r\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\r\n                ? 0 : lambda * y / log(tan(x) / tanPhi0);\r\n        return [x, y];\r\n    }\r\n    forward.invert = function (x, y) {\r\n        var lambda, phi = y + phi0;\r\n        return [\r\n            abs(y) < epsilon ? x / cosPhi0\r\n                : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\r\n                    : x * log(tan(lambda) / tanPhi0) / y,\r\n            phi\r\n        ];\r\n    };\r\n    return forward;\r\n}\r\nexport default function () {\r\n    return parallel1(loximuthalRaw)\r\n        .parallel(40)\r\n        .scale(158.837);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\loximuthal.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\loximuthal.js"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,EAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAC,MAAM,QAAQ,CAAC;AAEtE,MAAM,UAAU,aAAa,CAAC,IAAI;IAChC,IAAI,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC,EACnB,OAAO,GAAG,GAAG,CAAC,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;IAExC,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG;QAC1B,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,EACd,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,GAAG,OAAO;YACnC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO;gBAC1E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QACjD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB,CAAC;IAED,OAAO,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;QAC5B,IAAI,MAAM,EACN,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;QACnB,OAAO;YACL,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO;gBAC1B,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1F,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;YACxC,GAAG;SACJ,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,CAAC,OAAO;IACZ,OAAO,SAAS,CAAC,aAAa,CAAC;SAC1B,QAAQ,CAAC,EAAE,CAAC;SACZ,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import parallel1 from \"./parallel1\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n"]}]}