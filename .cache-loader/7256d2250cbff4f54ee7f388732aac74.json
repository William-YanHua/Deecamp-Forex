{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hexjson\\build\\d3-hexjson.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hexjson\\build\\d3-hexjson.js","mtime":1512826723000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\r\n        typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\r\n            (factory((global.d3 = global.d3 || {}), global.d3));\r\n}(this, function (exports, d3Array) {\r\n    'use strict';\r\n    function renderHexJSON(hexjson, width, height) {\r\n        var layout = hexjson.layout;\r\n        var hexes = [];\r\n        var hexRadius = 0;\r\n        Object.keys(hexjson.hexes).forEach(function (key) {\r\n            hexjson.hexes[key].key = key;\r\n            hexes.push(hexjson.hexes[key]);\r\n        });\r\n        var qmax = d3Array.max(hexes, function (d) { return +d.q; }), qmin = d3Array.min(hexes, function (d) { return +d.q; }), rmax = d3Array.max(hexes, function (d) { return +d.r; }), rmin = d3Array.min(hexes, function (d) { return +d.r; });\r\n        var qnum = qmax - qmin + 1, rnum = rmax - rmin + 1;\r\n        if (layout === \"odd-r\" || layout === \"even-r\") {\r\n            hexRadius = d3Array.min([(width) / ((qnum + 0.5) * Math.sqrt(3)),\r\n                height / ((rnum + 1 / 3) * 1.5)]);\r\n        }\r\n        else {\r\n            hexRadius = d3Array.min([(height) / ((rnum + 0.5) * Math.sqrt(3)),\r\n                width / ((qnum + 1 / 3) * 1.5)]);\r\n        }\r\n        var hexWidth = hexRadius * Math.sqrt(3);\r\n        var vertices = getVertices(layout, hexWidth, hexRadius);\r\n        var points = getPoints(vertices);\r\n        hexes.forEach(function (hex) {\r\n            hex.qc = hex.q - qmin;\r\n            hex.rc = rmax - hex.r;\r\n            hex.x = getX(hex, layout, hexWidth, hexRadius);\r\n            hex.y = getY(hex, layout, hexWidth, hexRadius);\r\n            hex.vertices = vertices;\r\n            hex.points = points;\r\n        });\r\n        return hexes;\r\n    }\r\n    function getX(hex, layout, hexWidth, hexRadius) {\r\n        var x = 0, xOffset = 0;\r\n        switch (layout) {\r\n            case \"odd-r\":\r\n                xOffset = (hex.rc % 2 === 1) ? hexWidth : (hexWidth / 2);\r\n                x = (hex.qc * hexWidth) + xOffset;\r\n                break;\r\n            case \"even-r\":\r\n                xOffset = (hex.rc % 2 === 0) ? hexWidth : (hexWidth / 2);\r\n                x = (hex.qc * hexWidth) + xOffset;\r\n                break;\r\n            case \"odd-q\":\r\n            case \"even-q\":\r\n                x = (hex.qc * hexRadius * 1.5) + hexRadius;\r\n                break;\r\n        }\r\n        return x;\r\n    }\r\n    function getY(hex, layout, hexWidth, hexRadius) {\r\n        var y = 0, yOffset = 0;\r\n        switch (layout) {\r\n            case \"odd-r\":\r\n            case \"even-r\":\r\n                y = (hex.rc * hexRadius * 1.5) + hexRadius;\r\n                break;\r\n            case \"odd-q\":\r\n                yOffset = (hex.qc % 2 === 1) ? hexWidth : (hexWidth / 2);\r\n                y = (hex.rc * hexWidth) + yOffset;\r\n                break;\r\n            case \"even-q\":\r\n                yOffset = (hex.qc % 2 === 0) ? hexWidth : (hexWidth / 2);\r\n                y = (hex.rc * hexWidth) + yOffset;\r\n                break;\r\n        }\r\n        return y;\r\n    }\r\n    function getVertices(layout, hexWidth, hexRadius) {\r\n        var vertices = [];\r\n        switch (layout) {\r\n            case \"odd-r\":\r\n            case \"even-r\":\r\n                vertices.push({ x: 0, y: (0 - hexRadius) });\r\n                vertices.push({ x: (0 + hexWidth * 0.5), y: (0 - 0.5 * hexRadius) });\r\n                vertices.push({ x: (0 + hexWidth * 0.5), y: (0 + 0.5 * hexRadius) });\r\n                vertices.push({ x: 0, y: (0 + hexRadius) });\r\n                vertices.push({ x: (0 - hexWidth * 0.5), y: (0 + 0.5 * hexRadius) });\r\n                vertices.push({ x: (0 - hexWidth * 0.5), y: (0 - 0.5 * hexRadius) });\r\n                break;\r\n            case \"odd-q\":\r\n            case \"even-q\":\r\n                vertices.push({ x: (0 - hexRadius), y: 0 });\r\n                vertices.push({ x: (0 - 0.5 * hexRadius), y: (0 - hexWidth * 0.5) });\r\n                vertices.push({ x: (0 + 0.5 * hexRadius), y: (0 - hexWidth * 0.5) });\r\n                vertices.push({ x: (0 + hexRadius), y: 0 });\r\n                vertices.push({ x: (0 + 0.5 * hexRadius), y: (0 + hexWidth * 0.5) });\r\n                vertices.push({ x: (0 - 0.5 * hexRadius), y: (0 + hexWidth * 0.5) });\r\n                break;\r\n        }\r\n        return vertices;\r\n    }\r\n    function getPoints(vertices) {\r\n        var points = \"\";\r\n        vertices.forEach(function (v) { points += v.x + \",\" + v.y + \" \"; });\r\n        return points.substring(0, points.length - 1);\r\n    }\r\n    function getGridForHexJSON(hexjson) {\r\n        var grid = {};\r\n        grid.layout = hexjson.layout;\r\n        grid.hexes = {};\r\n        var hexes = [];\r\n        Object.keys(hexjson.hexes).forEach(function (key) {\r\n            hexes.push(hexjson.hexes[key]);\r\n        });\r\n        var qmax = d3Array.max(hexes, function (d) { return +d.q; }), qmin = d3Array.min(hexes, function (d) { return +d.q; }), rmax = d3Array.max(hexes, function (d) { return +d.r; }), rmin = d3Array.min(hexes, function (d) { return +d.r; });\r\n        var i, j, fkey;\r\n        for (i = qmin; i <= qmax; i++) {\r\n            for (j = rmin; j <= rmax; j++) {\r\n                fkey = \"Q\" + i + \"R\" + j;\r\n                grid.hexes[fkey] = { q: i, r: j };\r\n            }\r\n        }\r\n        return grid;\r\n    }\r\n    exports.renderHexJSON = renderHexJSON;\r\n    exports.getGridForHexJSON = getGridForHexJSON;\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n}));\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hexjson\\build\\d3-hexjson.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hexjson\\build\\d3-hexjson.js"],"names":[],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n\t(factory((global.d3 = global.d3 || {}),global.d3));\n}(this, function (exports,d3Array) { 'use strict';\n\n\t// Main render method\n\tfunction renderHexJSON (hexjson, width, height) {\n\t\t// Get the layout\n\t\tvar layout = hexjson.layout;\n\n\t\t// Get the hex objects as an array\n\t\tvar hexes = [];\n\t\tvar hexRadius = 0;\n\n\t\tObject.keys(hexjson.hexes).forEach(function (key) {\n\t\t\thexjson.hexes[key].key = key;\n\t\t\thexes.push(hexjson.hexes[key]);\n\t\t});\n\n\t\t// Calculate the number of rows and columns\n\t\tvar qmax = d3Array.max(hexes, function (d) { return +d.q }),\n\t\t\tqmin = d3Array.min(hexes, function (d) { return +d.q }),\n\t\t\trmax = d3Array.max(hexes, function (d) { return +d.r }),\n\t\t\trmin = d3Array.min(hexes, function (d) { return +d.r });\n\n\t\tvar qnum = qmax - qmin + 1,\n\t\t\trnum = rmax - rmin + 1;\n\n\t\t// Calculate maximum radius the hexagons can have to fit the svg\n\t\tif (layout === \"odd-r\" || layout === \"even-r\") {\n\t\t\thexRadius = d3Array.min([(width) / ((qnum + 0.5) * Math.sqrt(3)),\n\t\t\t\theight / ((rnum + 1 / 3) * 1.5)]);\n\t\t} else {\n\t\t\thexRadius = d3Array.min([(height) / ((rnum + 0.5) * Math.sqrt(3)),\n\t\t\t\twidth / ((qnum + 1 / 3) * 1.5)]);\n\t\t}\n\n\t\t// Calculate the hexagon width\n\t\tvar hexWidth = hexRadius * Math.sqrt(3);\n\n\t\t// Get the vertices and points for this layout\n\t\tvar vertices = getVertices(layout, hexWidth, hexRadius);\n\t\tvar points = getPoints(vertices);\n\n\t\t// Calculate the values needed to render each hex and add to hexes\n\t\thexes.forEach(function (hex) {\n\t\t\t// Calculate the absolute co-ordinates of each hex\n\t\t\thex.qc = hex.q - qmin;\n\t\t\thex.rc = rmax - hex.r;\n\n\t\t\t// Calculate the x and y position of each hex for this svg\n\t\t\thex.x = getX(hex, layout, hexWidth, hexRadius);\n\t\t\thex.y = getY(hex, layout, hexWidth, hexRadius);\n\n\t\t\t// Add the vertex positions and points relative to x and y\n\t\t\thex.vertices = vertices;\n\t\t\thex.points = points;\n\t\t});\n\n\t\treturn hexes;\n\t}\n\n\t// Get the x position for a hex\n\tfunction getX (hex, layout, hexWidth, hexRadius) {\n\t\tvar x = 0,\n\t\t\txOffset = 0;\n\n\t\tswitch (layout) {\n\t\t\tcase \"odd-r\":\n\t\t\t\txOffset = (hex.rc % 2 === 1) ? hexWidth : (hexWidth / 2);\n\t\t\t\tx = (hex.qc * hexWidth) + xOffset;\n\t\t\t\tbreak;\n\n\t\t\tcase \"even-r\":\n\t\t\t\txOffset = (hex.rc % 2 === 0) ? hexWidth : (hexWidth / 2);\n\t\t\t\tx = (hex.qc * hexWidth) + xOffset;\n\t\t\t\tbreak;\n\n\t\t\tcase \"odd-q\":\n\t\t\tcase \"even-q\":\n\t\t\t\tx = (hex.qc * hexRadius * 1.5) + hexRadius;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn x;\n\t}\n\n\t// Get the y position for a hex\n\tfunction getY (hex, layout, hexWidth, hexRadius) {\n\t\tvar y = 0,\n\t\t\tyOffset = 0;\n\n\t\tswitch (layout) {\n\t\t\tcase \"odd-r\":\n\t\t\tcase \"even-r\":\n\t\t\t\ty = (hex.rc * hexRadius * 1.5) + hexRadius;\n\t\t\t\tbreak;\n\n\t\t\tcase \"odd-q\":\n\t\t\t\tyOffset = (hex.qc % 2 === 1) ? hexWidth : (hexWidth / 2);\n\t\t\t\ty = (hex.rc * hexWidth) + yOffset;\n\t\t\t\tbreak;\n\n\t\t\tcase \"even-q\":\n\t\t\t\tyOffset = (hex.qc % 2 === 0) ? hexWidth : (hexWidth / 2);\n\t\t\t\ty = (hex.rc * hexWidth) + yOffset;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn y;\n\t}\n\n\t// Get the positions of the vertices for the hex:\n\t// - Row layouts are ordered from the topmost vertex clockwise\n\t// - Column layouts are ordered from the leftmost vertex clockwise\n\tfunction getVertices (layout, hexWidth, hexRadius) {\n\t\tvar vertices = [];\n\n\t\tswitch (layout) {\n\t\t\tcase \"odd-r\":\n\t\t\tcase \"even-r\":\n\n\t\t\t\tvertices.push({x: 0, y: (0 - hexRadius)});\n\t\t\t\tvertices.push({x: (0 + hexWidth * 0.5), y: (0 - 0.5 * hexRadius)});\n\t\t\t\tvertices.push({x: (0 + hexWidth * 0.5), y: (0 + 0.5 * hexRadius)});\n\t\t\t\tvertices.push({x: 0, y: (0 + hexRadius)});\n\t\t\t\tvertices.push({x: (0 - hexWidth * 0.5), y: (0 + 0.5 * hexRadius)});\n\t\t\t\tvertices.push({x: (0 - hexWidth * 0.5), y: (0 - 0.5 * hexRadius)});\n\t\t\t\tbreak;\n\n\t\t\tcase \"odd-q\":\n\t\t\tcase \"even-q\":\n\n\t\t\t\tvertices.push({x: (0 - hexRadius), y: 0});\n\t\t\t\tvertices.push({x: (0 - 0.5 * hexRadius), y: (0 - hexWidth * 0.5)});\n\t\t\t\tvertices.push({x: (0 + 0.5 * hexRadius), y: (0 - hexWidth * 0.5)});\n\t\t\t\tvertices.push({x: (0 + hexRadius), y: 0});\n\t\t\t\tvertices.push({x: (0 + 0.5 * hexRadius), y: (0 + hexWidth * 0.5)});\n\t\t\t\tvertices.push({x: (0 - 0.5 * hexRadius), y: (0 + hexWidth * 0.5)});\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn vertices;\n\t}\n\n\t// Get the points attribute for a polygon with these vertices\n\tfunction getPoints (vertices) {\n\t\tvar points = \"\";\n\t\tvertices.forEach(function (v) { points += v.x + \",\" + v.y + \" \" });\n\t\treturn points.substring(0, points.length - 1);\n\t}\n\n\t// Creates a hexjson grid with the layout and dimensions of the given hexjson\n\tfunction getGridForHexJSON (hexjson) {\n\t\t// Create a new HexJSON object for the grid\n\t\tvar grid = {};\n\t\tgrid.layout = hexjson.layout;\n\t\tgrid.hexes = {};\n\n\t\t// Get the hex objects from the hexjson as an array\n\t\tvar hexes = [];\n\n\t\tObject.keys(hexjson.hexes).forEach(function (key) {\n\t\t\thexes.push(hexjson.hexes[key]);\n\t\t});\n\n\t\t// Calculate the number of rows and columns in the grid\n\t\tvar qmax = d3Array.max(hexes, function (d) { return +d.q }),\n\t\t\tqmin = d3Array.min(hexes, function (d) { return +d.q }),\n\t\t\trmax = d3Array.max(hexes, function (d) { return +d.r }),\n\t\t\trmin = d3Array.min(hexes, function (d) { return +d.r });\n\n\t\t// Create the hexjson grid\n\t\tvar i, j, fkey;\n\t\tfor (i = qmin; i <= qmax; i++) {\n\t\t\tfor (j = rmin; j <= rmax; j++) {\n\t\t\t\tfkey = \"Q\" + i + \"R\" + j;\n\t\t\t\tgrid.hexes[fkey] = {q: i, r: j};\n\t\t\t}\n\t\t}\n\n\t\treturn grid;\n\t}\n\n\texports.renderHexJSON = renderHexJSON;\n\texports.getGridForHexJSON = getGridForHexJSON;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n}));"]}]}