{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\dijkstra.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\dijkstra.js","mtime":1514665454000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var _ = require(\"../lodash\"), PriorityQueue = require(\"../data/priority-queue\");\r\nmodule.exports = dijkstra;\r\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\r\nfunction dijkstra(g, source, weightFn, edgeFn) {\r\n    return runDijkstra(g, String(source), weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) { return g.outEdges(v); });\r\n}\r\nfunction runDijkstra(g, source, weightFn, edgeFn) {\r\n    var results = {}, pq = new PriorityQueue(), v, vEntry;\r\n    var updateNeighbors = function (edge) {\r\n        var w = edge.v !== v ? edge.v : edge.w, wEntry = results[w], weight = weightFn(edge), distance = vEntry.distance + weight;\r\n        if (weight < 0) {\r\n            throw new Error(\"dijkstra does not allow negative edge weights. \" +\r\n                \"Bad edge: \" + edge + \" Weight: \" + weight);\r\n        }\r\n        if (distance < wEntry.distance) {\r\n            wEntry.distance = distance;\r\n            wEntry.predecessor = v;\r\n            pq.decrease(w, distance);\r\n        }\r\n    };\r\n    g.nodes().forEach(function (v) {\r\n        var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\r\n        results[v] = { distance: distance };\r\n        pq.add(v, distance);\r\n    });\r\n    while (pq.size() > 0) {\r\n        v = pq.removeMin();\r\n        vEntry = results[v];\r\n        if (vEntry.distance === Number.POSITIVE_INFINITY) {\r\n            break;\r\n        }\r\n        edgeFn(v).forEach(updateNeighbors);\r\n    }\r\n    return results;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\dijkstra.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\dijkstra.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,EACxB,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAEtD,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC;AAE1B,IAAI,mBAAmB,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAExC,SAAS,QAAQ,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAC3C,OAAO,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,EACjB,QAAQ,IAAI,mBAAmB,EAC/B,MAAM,IAAI,UAAS,CAAC,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACtE,CAAC;AAED,SAAS,WAAW,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM;IAC9C,IAAI,OAAO,GAAG,EAAE,EACZ,EAAE,GAAG,IAAI,aAAa,EAAE,EACxB,CAAC,EAAE,MAAM,CAAC;IAEd,IAAI,eAAe,GAAG,UAAS,IAAI;QACjC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAClC,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,EACnB,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,EACvB,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC;QAExC,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,iDAAiD;gBACjD,YAAY,GAAG,IAAI,GAAG,WAAW,GAAG,MAAM,CAAC,CAAC;SAC7D;QAED,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE;YAC9B,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC;YACvB,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;SAC1B;IACH,CAAC,CAAC;IAEF,CAAC,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,UAAS,CAAC;QAC1B,IAAI,QAAQ,GAAG,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC;QAC3D,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;QACpC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;QACpB,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QACnB,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,iBAAiB,EAAE;YAChD,MAAM;SACP;QAED,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;KACpC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["var _ = require(\"../lodash\"),\n    PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = dijkstra;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(g, String(source),\n                     weightFn || DEFAULT_WEIGHT_FUNC,\n                     edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {},\n      pq = new PriorityQueue(),\n      v, vEntry;\n\n  var updateNeighbors = function(edge) {\n    var w = edge.v !== v ? edge.v : edge.w,\n        wEntry = results[w],\n        weight = weightFn(edge),\n        distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\"dijkstra does not allow negative edge weights. \" +\n                      \"Bad edge: \" + edge + \" Weight: \" + weight);\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function(v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n"]}]}