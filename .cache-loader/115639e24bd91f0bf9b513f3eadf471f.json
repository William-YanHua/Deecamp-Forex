{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\pie\\component\\label\\spider-label.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\pie\\component\\label\\spider-label.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { deepMix, clone, each, isString, mix } from '@antv/util';\r\nvar ANCHOR_OFFSET = 0;\r\nvar INFLECTION_OFFSET = 15;\r\nvar DEFAULT_COLOR = '#CCC';\r\nvar LABEL1_OFFSETY = 2;\r\nvar LABEL2_OFFSETY = -2;\r\nvar ADJUSTOFFSET = 15;\r\nfunction getEndPoint(center, angle, r) {\r\n    return {\r\n        x: center.x + r * Math.cos(angle),\r\n        y: center.y + r * Math.sin(angle),\r\n    };\r\n}\r\nvar SpiderLabel = (function () {\r\n    function SpiderLabel(cfg) {\r\n        this.destroyed = false;\r\n        this.view = cfg.view;\r\n        this.options = deepMix({}, this.getDefaultOptions(), cfg);\r\n        this._adjustOptions(this.options);\r\n        this.init();\r\n    }\r\n    SpiderLabel.prototype.init = function () {\r\n        var _this = this;\r\n        this.container = this.view.geometries[0].labelsContainer;\r\n        this.view.on('beforerender', function () {\r\n            _this.clear();\r\n        });\r\n    };\r\n    SpiderLabel.prototype.render = function () {\r\n        var _this = this;\r\n        if (!this.view || this.view.destroyed) {\r\n            return;\r\n        }\r\n        var data = clone(this.view.getData());\r\n        this.halves = [[], []];\r\n        var shapes = [];\r\n        var elements = this.view.geometries[0].elements;\r\n        each(elements, function (ele) {\r\n            shapes.push(ele.shape);\r\n        });\r\n        this.coord = this.view.geometries[0].coordinate;\r\n        var angleField = this.options.fields[0];\r\n        var scale = this.view.getScalesByDim('y')[angleField];\r\n        var center = this.coord.getCenter();\r\n        var startAngle = this.coord.startAngle;\r\n        var radius = this.coord.polarRadius;\r\n        var _a = this.view.coordinateBBox, width = _a.width, height = _a.height;\r\n        this.width = width;\r\n        this.height = height;\r\n        var angle = startAngle;\r\n        var _loop_1 = function (idx) {\r\n            var d = data[idx];\r\n            var angleValue = scale.scale(d[angleField]);\r\n            var targetAngle = angle + Math.PI * 2 * angleValue;\r\n            var middleAngle = angle + (targetAngle - angle) / 2;\r\n            angle = targetAngle;\r\n            var anchorPoint = getEndPoint(center, middleAngle, radius + ANCHOR_OFFSET);\r\n            var inflectionPoint = getEndPoint(center, middleAngle, radius + INFLECTION_OFFSET);\r\n            var color = DEFAULT_COLOR;\r\n            if (this_1.options.fields.length === 2) {\r\n                var colorField = this_1.options.fields[1];\r\n                var colorScale = this_1.view.geometries[0].scales[colorField];\r\n                var colorIndex = colorScale.scale(d[colorField]);\r\n                var shapeIndex = Math.floor(colorIndex * (shapes.length - 1));\r\n                color = shapes[shapeIndex].attr('fill');\r\n            }\r\n            var label = {\r\n                _anchor: anchorPoint,\r\n                _inflection: inflectionPoint,\r\n                _data: d,\r\n                x: inflectionPoint.x,\r\n                y: inflectionPoint.y,\r\n                r: radius + INFLECTION_OFFSET,\r\n                fill: color,\r\n                textGroup: null,\r\n                _side: null,\r\n            };\r\n            var texts = [];\r\n            each(this_1.options.fields, function (f) {\r\n                texts.push(d[f]);\r\n            });\r\n            if (this_1.options.formatter) {\r\n                var formatted = this_1.options.formatter(d[angleField], { _origin: d, color: color }, idx);\r\n                if (isString(formatted)) {\r\n                    formatted = [formatted];\r\n                }\r\n                texts = formatted;\r\n            }\r\n            var textGroup = this_1.container.addGroup({\r\n                capture: false,\r\n            });\r\n            var textAttrs = {\r\n                x: 0,\r\n                y: 0,\r\n                fontSize: this_1.options.text.fontSize,\r\n                lineHeight: this_1.options.text.fontSize,\r\n                fontWeight: this_1.options.text.fontWeight,\r\n                fill: this_1.options.text.fill,\r\n            };\r\n            var lowerText = d[angleField];\r\n            if (this_1.options.formatter) {\r\n                lowerText = texts[0];\r\n            }\r\n            var lowerTextAttrs = clone(textAttrs);\r\n            if (texts.length === 2) {\r\n                lowerTextAttrs.fontWeight = 700;\r\n            }\r\n            var lowerTextShape = textGroup.addShape('text', {\r\n                attrs: mix({\r\n                    textBaseline: texts.length === 2 ? 'top' : 'middle',\r\n                    text: lowerText,\r\n                }, lowerTextAttrs),\r\n                data: d,\r\n                offsetY: texts.length === 2 ? LABEL1_OFFSETY : 0,\r\n                name: 'label',\r\n            });\r\n            lowerTextShape.name = 'label';\r\n            if (texts.length === 2) {\r\n                var topTextShape = textGroup.addShape('text', {\r\n                    attrs: mix({\r\n                        textBaseline: 'bottom',\r\n                        text: texts[1],\r\n                    }, textAttrs),\r\n                    data: d,\r\n                    offsetY: LABEL2_OFFSETY,\r\n                    name: 'label',\r\n                });\r\n                topTextShape.name = 'label';\r\n            }\r\n            label.textGroup = textGroup;\r\n            if (anchorPoint.x < center.x) {\r\n                label._side = 'left';\r\n                this_1.halves[0].push(label);\r\n            }\r\n            else {\r\n                label._side = 'right';\r\n                this_1.halves[1].push(label);\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var idx = 0; idx < data.length; idx++) {\r\n            _loop_1(idx);\r\n        }\r\n        var maxCountForOneSide = Math.floor(height / this.options.lineHeight);\r\n        each(this.halves, function (half) {\r\n            if (half.length > maxCountForOneSide) {\r\n                half.splice(maxCountForOneSide, half.length - maxCountForOneSide);\r\n            }\r\n            half.sort(function (a, b) {\r\n                return a.y - b.y;\r\n            });\r\n            _this._antiCollision(half);\r\n        });\r\n        this.view.canvas.draw();\r\n    };\r\n    SpiderLabel.prototype.clear = function () {\r\n        if (this.container) {\r\n            this.container.clear();\r\n        }\r\n    };\r\n    SpiderLabel.prototype.hide = function () {\r\n        this.container.set('visible', false);\r\n        this.view.canvas.draw();\r\n    };\r\n    SpiderLabel.prototype.show = function () {\r\n        this.container.set('visible', true);\r\n        this.view.canvas.draw();\r\n    };\r\n    SpiderLabel.prototype.destroy = function () {\r\n        if (this.container) {\r\n            this.container.remove();\r\n        }\r\n        this.destroyed = true;\r\n    };\r\n    SpiderLabel.prototype.getDefaultOptions = function () {\r\n        return {\r\n            text: {\r\n                fill: 'rgba(0, 0, 0, 0.65)',\r\n                fontSize: 12,\r\n            },\r\n            line: {\r\n                lineWidth: 0.5,\r\n                stroke: 'rgba(0, 0, 0, 0.45)',\r\n            },\r\n            lineHeight: 32,\r\n            sidePadding: 20,\r\n        };\r\n    };\r\n    SpiderLabel.prototype._antiCollision = function (half) {\r\n        var _this = this;\r\n        var coord = this.coord;\r\n        var canvasHeight = coord.getHeight();\r\n        var center = coord.center;\r\n        var radius = coord.getRadius();\r\n        var startY = center.y - radius - INFLECTION_OFFSET - this.options.lineHeight;\r\n        var overlapping = true;\r\n        var totalH = canvasHeight;\r\n        var i;\r\n        var maxY = 0;\r\n        var minY = Number.MIN_VALUE;\r\n        var maxLabelWidth = 0;\r\n        var boxes = half.map(function (label) {\r\n            var labelY = label.y;\r\n            if (labelY > maxY) {\r\n                maxY = labelY;\r\n            }\r\n            if (labelY < minY) {\r\n                minY = labelY;\r\n            }\r\n            var textGroup = label.textGroup;\r\n            var labelWidth = textGroup.getBBox().width;\r\n            if (labelWidth >= maxLabelWidth) {\r\n                maxLabelWidth = labelWidth;\r\n            }\r\n            return {\r\n                size: _this.options.lineHeight,\r\n                targets: [labelY - startY],\r\n            };\r\n        });\r\n        if (maxY - startY > totalH) {\r\n            totalH = maxY - startY;\r\n        }\r\n        var iteratorBoxed = function (items) {\r\n            items.forEach(function (box) {\r\n                var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\r\n                box.pos = Math.min(Math.max(minY, target - box.size / 2), totalH - box.size);\r\n            });\r\n        };\r\n        while (overlapping) {\r\n            iteratorBoxed(boxes);\r\n            overlapping = false;\r\n            i = boxes.length;\r\n            while (i--) {\r\n                if (i > 0) {\r\n                    var previousBox = boxes[i - 1];\r\n                    var box = boxes[i];\r\n                    if (previousBox.pos + previousBox.size > box.pos) {\r\n                        previousBox.size += box.size;\r\n                        previousBox.targets = previousBox.targets.concat(box.targets);\r\n                        if (previousBox.pos + previousBox.size > totalH) {\r\n                            previousBox.pos = totalH - previousBox.size;\r\n                        }\r\n                        boxes.splice(i, 1);\r\n                        overlapping = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        i = 0;\r\n        boxes.forEach(function (b) {\r\n            var posInCompositeBox = startY;\r\n            b.targets.forEach(function () {\r\n                half[i].y = b.pos + posInCompositeBox + _this.options.lineHeight / 2;\r\n                posInCompositeBox += _this.options.lineHeight;\r\n                i++;\r\n            });\r\n        });\r\n        var drawnLabels = [];\r\n        half.forEach(function (label) {\r\n            var textGroup = _this._drawLabel(label);\r\n            _this._drawLabelLine(label, maxLabelWidth, textGroup);\r\n            drawnLabels.push(textGroup);\r\n        });\r\n    };\r\n    SpiderLabel.prototype._drawLabel = function (label) {\r\n        var coord = this.coord;\r\n        var center = coord.getCenter();\r\n        var radius = coord.getRadius();\r\n        var y = label.y, textGroup = label.textGroup;\r\n        var children = textGroup.get('children');\r\n        var x_dir = label._side === 'left' ? 1 : -1;\r\n        var textAttrs = {\r\n            textAlign: label._side === 'left' ? 'right' : 'left',\r\n            x: label._side === 'left'\r\n                ? center.x - radius - this.options.sidePadding\r\n                : center.x + radius + this.options.sidePadding,\r\n        };\r\n        if (this.options.offsetX) {\r\n            textAttrs.x += this.options.offsetX * x_dir;\r\n        }\r\n        children.forEach(function (child) {\r\n            var offsetY = child.get('offsetY');\r\n            var yPosition = y + offsetY;\r\n            child.attr(textAttrs);\r\n            child.attr('y', yPosition);\r\n        });\r\n        return textGroup;\r\n    };\r\n    SpiderLabel.prototype._drawLabelLine = function (label, maxLabelWidth, container) {\r\n        var _anchor = [label._anchor.x, label._anchor.y];\r\n        var _inflection = [label._inflection.x, label._inflection.y];\r\n        var y = label.y, textGroup = label.textGroup;\r\n        if (!textGroup)\r\n            return;\r\n        var lastPoint = [label._side === 'left' ? textGroup.getBBox().maxX + 4 : textGroup.getBBox().minX - 4, y];\r\n        var points = [_anchor, _inflection, lastPoint];\r\n        if (_inflection[1] !== y) {\r\n            if ((_inflection[1] < this.height / 2 && _inflection[1] < y) ||\r\n                (_inflection[1] >= this.height / 2 && _inflection[1] > y)) {\r\n                var point1 = _inflection;\r\n                var leftPoint = lastPoint[0] + ADJUSTOFFSET;\r\n                var rightPoint = lastPoint[0] - ADJUSTOFFSET;\r\n                var point2 = [label._side === 'left' ? leftPoint : rightPoint, _inflection[1]];\r\n                points = [_anchor, point1, point2, lastPoint];\r\n                if ((label._side === 'right' && point2[0] < point1[0]) || (label._side === 'left' && point2[0] > point1[0])) {\r\n                    points = [_anchor, point1, lastPoint];\r\n                }\r\n            }\r\n            else {\r\n                points = [_anchor, [_inflection[0], y], lastPoint];\r\n            }\r\n        }\r\n        var path = [];\r\n        for (var i = 0; i < points.length; i++) {\r\n            var p = points[i];\r\n            var starter = 'L';\r\n            if (i === 0) {\r\n                starter = 'M';\r\n            }\r\n            path.push([starter, p[0], p[1]]);\r\n        }\r\n        container.addShape('path', {\r\n            attrs: {\r\n                path: path,\r\n                lineWidth: this.options.line.lineWidth,\r\n                stroke: this.options.line.stroke,\r\n            },\r\n        });\r\n    };\r\n    SpiderLabel.prototype._adjustOptions = function (config) {\r\n        if (config.text.fontSize) {\r\n            config.lineHeight = config.text.fontSize * 3;\r\n        }\r\n    };\r\n    return SpiderLabel;\r\n}());\r\nexport default SpiderLabel;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\pie\\component\\label\\spider-label.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\pie\\component\\label\\spider-label.js"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, clone, each, isString, mix } from '@antv/util';\nvar ANCHOR_OFFSET = 0; // 锚点偏移量\nvar INFLECTION_OFFSET = 15; // 拐点偏移量\nvar DEFAULT_COLOR = '#CCC';\nvar LABEL1_OFFSETY = 2;\nvar LABEL2_OFFSETY = -2;\nvar ADJUSTOFFSET = 15;\nfunction getEndPoint(center, angle, r) {\n    return {\n        x: center.x + r * Math.cos(angle),\n        y: center.y + r * Math.sin(angle),\n    };\n}\nvar SpiderLabel = /** @class */ (function () {\n    function SpiderLabel(cfg) {\n        this.destroyed = false;\n        this.view = cfg.view;\n        this.options = deepMix({}, this.getDefaultOptions(), cfg);\n        this._adjustOptions(this.options);\n        this.init();\n    }\n    SpiderLabel.prototype.init = function () {\n        var _this = this;\n        this.container = this.view.geometries[0].labelsContainer;\n        this.view.on('beforerender', function () {\n            _this.clear();\n        });\n    };\n    SpiderLabel.prototype.render = function () {\n        var _this = this;\n        if (!this.view || this.view.destroyed) {\n            return;\n        }\n        /** 如果有formatter则事先处理数据 */\n        var data = clone(this.view.getData());\n        this.halves = [[], []];\n        var shapes = [];\n        var elements = this.view.geometries[0].elements;\n        each(elements, function (ele) {\n            shapes.push(ele.shape);\n        });\n        this.coord = this.view.geometries[0].coordinate;\n        var angleField = this.options.fields[0];\n        var scale = this.view.getScalesByDim('y')[angleField];\n        var center = this.coord.getCenter();\n        var startAngle = this.coord.startAngle;\n        var radius = this.coord.polarRadius;\n        var _a = this.view.coordinateBBox, width = _a.width, height = _a.height;\n        this.width = width;\n        this.height = height;\n        var angle = startAngle;\n        var _loop_1 = function (idx) {\n            var d = data[idx];\n            // 计算每个切片的middle angle\n            var angleValue = scale.scale(d[angleField]);\n            var targetAngle = angle + Math.PI * 2 * angleValue;\n            var middleAngle = angle + (targetAngle - angle) / 2;\n            angle = targetAngle;\n            // 根据middle angle计算锚点和拐点距离\n            var anchorPoint = getEndPoint(center, middleAngle, radius + ANCHOR_OFFSET);\n            var inflectionPoint = getEndPoint(center, middleAngle, radius + INFLECTION_OFFSET);\n            // 获取对应shape的color\n            var color = DEFAULT_COLOR;\n            if (this_1.options.fields.length === 2) {\n                var colorField = this_1.options.fields[1];\n                var colorScale = this_1.view.geometries[0].scales[colorField];\n                var colorIndex = colorScale.scale(d[colorField]);\n                var shapeIndex = Math.floor(colorIndex * (shapes.length - 1));\n                color = shapes[shapeIndex].attr('fill');\n            }\n            // 组装label数据\n            var label = {\n                _anchor: anchorPoint,\n                _inflection: inflectionPoint,\n                _data: d,\n                x: inflectionPoint.x,\n                y: inflectionPoint.y,\n                r: radius + INFLECTION_OFFSET,\n                fill: color,\n                textGroup: null,\n                _side: null,\n            };\n            // 创建label文本\n            var texts = [];\n            each(this_1.options.fields, function (f) {\n                texts.push(d[f]);\n            });\n            if (this_1.options.formatter) {\n                var formatted = this_1.options.formatter(d[angleField], { _origin: d, color: color }, idx);\n                if (isString(formatted)) {\n                    formatted = [formatted];\n                }\n                texts = formatted;\n            }\n            var textGroup = this_1.container.addGroup({\n                capture: false,\n            });\n            var textAttrs = {\n                x: 0,\n                y: 0,\n                fontSize: this_1.options.text.fontSize,\n                lineHeight: this_1.options.text.fontSize,\n                fontWeight: this_1.options.text.fontWeight,\n                fill: this_1.options.text.fill,\n            };\n            // label1:下部label\n            var lowerText = d[angleField];\n            if (this_1.options.formatter) {\n                lowerText = texts[0];\n            }\n            var lowerTextAttrs = clone(textAttrs);\n            if (texts.length === 2) {\n                lowerTextAttrs.fontWeight = 700;\n            }\n            var lowerTextShape = textGroup.addShape('text', {\n                attrs: mix({\n                    textBaseline: texts.length === 2 ? 'top' : 'middle',\n                    text: lowerText,\n                }, lowerTextAttrs),\n                data: d,\n                offsetY: texts.length === 2 ? LABEL1_OFFSETY : 0,\n                name: 'label',\n            });\n            lowerTextShape.name = 'label'; // 用于事件标记 shapeName\n            /** label2:上部label */\n            if (texts.length === 2) {\n                var topTextShape = textGroup.addShape('text', {\n                    attrs: mix({\n                        textBaseline: 'bottom',\n                        text: texts[1],\n                    }, textAttrs),\n                    data: d,\n                    offsetY: LABEL2_OFFSETY,\n                    name: 'label',\n                });\n                topTextShape.name = 'label'; // 用于事件标记 shapeName\n            }\n            label.textGroup = textGroup;\n            /** 将label分组 */\n            if (anchorPoint.x < center.x) {\n                label._side = 'left';\n                this_1.halves[0].push(label);\n            }\n            else {\n                label._side = 'right';\n                this_1.halves[1].push(label);\n            }\n        };\n        var this_1 = this;\n        // tslint:disable-next-line: prefer-for-of\n        for (var idx = 0; idx < data.length; idx++) {\n            _loop_1(idx);\n        }\n        /** 绘制label */\n        var maxCountForOneSide = Math.floor(height / this.options.lineHeight);\n        each(this.halves, function (half) {\n            if (half.length > maxCountForOneSide) {\n                half.splice(maxCountForOneSide, half.length - maxCountForOneSide);\n            }\n            half.sort(function (a, b) {\n                return a.y - b.y;\n            });\n            _this._antiCollision(half);\n        });\n        this.view.canvas.draw();\n    };\n    SpiderLabel.prototype.clear = function () {\n        if (this.container) {\n            this.container.clear();\n        }\n    };\n    SpiderLabel.prototype.hide = function () {\n        this.container.set('visible', false);\n        this.view.canvas.draw();\n    };\n    SpiderLabel.prototype.show = function () {\n        this.container.set('visible', true);\n        this.view.canvas.draw();\n    };\n    SpiderLabel.prototype.destroy = function () {\n        if (this.container) {\n            this.container.remove();\n        }\n        this.destroyed = true;\n    };\n    SpiderLabel.prototype.getDefaultOptions = function () {\n        return {\n            text: {\n                fill: 'rgba(0, 0, 0, 0.65)',\n                fontSize: 12,\n            },\n            line: {\n                lineWidth: 0.5,\n                stroke: 'rgba(0, 0, 0, 0.45)',\n            },\n            lineHeight: 32,\n            /** distance between label and edge */\n            sidePadding: 20,\n        };\n    };\n    SpiderLabel.prototype._antiCollision = function (half) {\n        var _this = this;\n        var coord = this.coord;\n        var canvasHeight = coord.getHeight();\n        var center = coord.center;\n        var radius = coord.getRadius();\n        var startY = center.y - radius - INFLECTION_OFFSET - this.options.lineHeight;\n        var overlapping = true;\n        var totalH = canvasHeight;\n        var i;\n        var maxY = 0;\n        var minY = Number.MIN_VALUE;\n        var maxLabelWidth = 0;\n        var boxes = half.map(function (label) {\n            var labelY = label.y;\n            if (labelY > maxY) {\n                maxY = labelY;\n            }\n            if (labelY < minY) {\n                minY = labelY;\n            }\n            var textGroup = label.textGroup;\n            var labelWidth = textGroup.getBBox().width;\n            if (labelWidth >= maxLabelWidth) {\n                maxLabelWidth = labelWidth;\n            }\n            return {\n                size: _this.options.lineHeight,\n                targets: [labelY - startY],\n            };\n        });\n        if (maxY - startY > totalH) {\n            totalH = maxY - startY;\n        }\n        var iteratorBoxed = function (items) {\n            items.forEach(function (box) {\n                var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n                box.pos = Math.min(Math.max(minY, target - box.size / 2), totalH - box.size);\n            });\n        };\n        while (overlapping) {\n            iteratorBoxed(boxes);\n            // detect overlapping and join boxes\n            overlapping = false;\n            i = boxes.length;\n            while (i--) {\n                if (i > 0) {\n                    var previousBox = boxes[i - 1];\n                    var box = boxes[i];\n                    if (previousBox.pos + previousBox.size > box.pos) {\n                        // overlapping\n                        previousBox.size += box.size;\n                        previousBox.targets = previousBox.targets.concat(box.targets);\n                        // overflow, shift up\n                        if (previousBox.pos + previousBox.size > totalH) {\n                            previousBox.pos = totalH - previousBox.size;\n                        }\n                        boxes.splice(i, 1); // removing box\n                        overlapping = true;\n                    }\n                }\n            }\n        }\n        i = 0;\n        boxes.forEach(function (b) {\n            var posInCompositeBox = startY; // middle of the label\n            b.targets.forEach(function () {\n                half[i].y = b.pos + posInCompositeBox + _this.options.lineHeight / 2;\n                posInCompositeBox += _this.options.lineHeight;\n                i++;\n            });\n        });\n        var drawnLabels = [];\n        half.forEach(function (label) {\n            var textGroup = _this._drawLabel(label);\n            _this._drawLabelLine(label, maxLabelWidth, textGroup);\n            drawnLabels.push(textGroup);\n        });\n    };\n    SpiderLabel.prototype._drawLabel = function (label) {\n        var coord = this.coord;\n        var center = coord.getCenter();\n        var radius = coord.getRadius();\n        var y = label.y, textGroup = label.textGroup;\n        var children = textGroup.get('children');\n        var x_dir = label._side === 'left' ? 1 : -1;\n        var textAttrs = {\n            textAlign: label._side === 'left' ? 'right' : 'left',\n            x: label._side === 'left'\n                ? center.x - radius - this.options.sidePadding\n                : center.x + radius + this.options.sidePadding,\n        };\n        if (this.options.offsetX) {\n            textAttrs.x += this.options.offsetX * x_dir;\n        }\n        children.forEach(function (child) {\n            var offsetY = child.get('offsetY');\n            var yPosition = y + offsetY;\n            child.attr(textAttrs);\n            child.attr('y', yPosition);\n        });\n        return textGroup;\n    };\n    SpiderLabel.prototype._drawLabelLine = function (label, maxLabelWidth, container) {\n        var _anchor = [label._anchor.x, label._anchor.y];\n        var _inflection = [label._inflection.x, label._inflection.y];\n        var y = label.y, textGroup = label.textGroup;\n        if (!textGroup)\n            return;\n        var lastPoint = [label._side === 'left' ? textGroup.getBBox().maxX + 4 : textGroup.getBBox().minX - 4, y];\n        var points = [_anchor, _inflection, lastPoint];\n        if (_inflection[1] !== y) {\n            // 展示全部文本文本位置做过调整\n            if ((_inflection[1] < this.height / 2 && _inflection[1] < y) ||\n                (_inflection[1] >= this.height / 2 && _inflection[1] > y)) {\n                // 文本被调整下去了，则添加拐点连接线\n                var point1 = _inflection;\n                var leftPoint = lastPoint[0] + ADJUSTOFFSET;\n                var rightPoint = lastPoint[0] - ADJUSTOFFSET;\n                var point2 = [label._side === 'left' ? leftPoint : rightPoint, _inflection[1]];\n                points = [_anchor, point1, point2, lastPoint];\n                if ((label._side === 'right' && point2[0] < point1[0]) || (label._side === 'left' && point2[0] > point1[0])) {\n                    points = [_anchor, point1, lastPoint];\n                }\n            }\n            else {\n                points = [_anchor, [_inflection[0], y], lastPoint];\n            }\n        }\n        var path = [];\n        for (var i = 0; i < points.length; i++) {\n            var p = points[i];\n            var starter = 'L';\n            if (i === 0) {\n                starter = 'M';\n            }\n            path.push([starter, p[0], p[1]]);\n        }\n        container.addShape('path', {\n            attrs: {\n                path: path,\n                lineWidth: this.options.line.lineWidth,\n                stroke: this.options.line.stroke,\n            },\n        });\n        // 绘制锚点\n        // container.addShape('circle', {\n        //   attrs: {\n        //     x: _anchor[0],\n        //     y: _anchor[1],\n        //     r: this.config.anchorSize,\n        //     fill,\n        //   },\n        // });\n    };\n    SpiderLabel.prototype._adjustOptions = function (config) {\n        if (config.text.fontSize) {\n            config.lineHeight = config.text.fontSize * 3;\n        }\n    };\n    return SpiderLabel;\n}());\nexport default SpiderLabel;\n//# sourceMappingURL=spider-label.js.map"]}]}