{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/api/InvreqService.ts","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/api/InvreqService.ts","mtime":1596379644439},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Inject, Injectable } from \"react.di\";\nimport { HttpService } from \"./HttpService\";\nimport { HttpMethod } from \"./utils\";\nimport { getTodayDate } from \"../../utils/Date\";\nvar InvreqService = (function () {\n    function InvreqService(httpService) {\n        this.httpService = httpService;\n    }\n    InvreqService.prototype.getAllInvreqAccounts = function () {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getInvreqAccount = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId,\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.createInvreq = function (params) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq\",\n                            body: params,\n                            method: HttpMethod.POST,\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getOverview = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/overview\",\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2, data.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getMatching = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/matchings\",\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2, data.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getDetailMatching = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/matchings/detail\",\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2, data.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getTransactionLog = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/transactions\",\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        console.log(data.response);\n                        return [2, data.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getDailyTransaction = function (invreqId, date) {\n        if (date === void 0) { date = getTodayDate(); }\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/dailyTransactions\",\n                            queryParams: { date: date },\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getReallocationLog = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/position/reallocation\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        console.log(res.response);\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getReallocation = function (invreqId, date) {\n        if (date === void 0) { date = getTodayDate(); }\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/position/reallocation/\" + date,\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getBoughtTranSetting = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/settings\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        console.log(res.response);\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.setBoughtTranSetting = function (invreqId, setting) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/settings\",\n                            method: HttpMethod.PUT,\n                            body: setting,\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.redeemAccount = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId,\n                            method: HttpMethod.DELETE,\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getEarningList = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/earnings\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        console.log(\"earning!\" + res.response);\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getPlanTransaction = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/plannedTransactions\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.confirmPlanTran = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/plannedTransactions\",\n                            method: HttpMethod.POST,\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.cancelPlanTran = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/plannedTransactions\",\n                            method: HttpMethod.DELETE,\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2];\n                }\n            });\n        });\n    };\n    InvreqService.prototype.getDailyPositionList = function (invreqId) {\n        return __awaiter(this, void 0, Promise, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this.httpService.fetch({\n                            path: \"invreq/\" + invreqId + \"/position/dailyPosition\",\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2, res.response];\n                }\n            });\n        });\n    };\n    var _a;\n    InvreqService = __decorate([\n        Injectable,\n        __param(0, Inject),\n        __metadata(\"design:paramtypes\", [typeof (_a = typeof HttpService !== \"undefined\" && HttpService) === \"function\" ? _a : Object])\n    ], InvreqService);\n    return InvreqService;\n}());\nexport { InvreqService };\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/api/InvreqService.ts","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/api/InvreqService.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from \"react.di\";\r\nimport { HttpService } from \"./HttpService\";\r\nimport { InvReq, InvReqList } from \"../models/invreq/InvReq\";\r\nimport { InvReqInit } from \"../models/invreq/InvReqInit\";\r\nimport { HttpMethod } from \"./utils\";\r\nimport { OverviewData } from \"../models/invreq/Bought/OverviewData\";\r\nimport { MatchingList, OverviewMatching } from \"../models/invreq/Bought/MatchingList\";\r\nimport {\r\n  DailyTransaction, DailyTransactionRespense,\r\n  PlanTransaction,\r\n  TransactionDetailList,\r\n  TransactionLog,\r\n} from \"../models/invreq/Bought/TransactionLog\";\r\nimport { ReallocationDetail, ReallocationLog } from \"../models/invreq/Bought/ReallocationLog\";\r\nimport { BoughtTranSetting } from \"../models/invreq/Bought/BoughtTranSetting\";\r\nimport { EarningList } from \"../models/invreq/Bought/EarnList\";\r\nimport {StockOverviewData} from \"../models/invreq/Bought/Stock/StockOverviewData\";\r\nimport {DailyPositionList} from \"../models/invreq/Bought/DailyPosition\";\r\nimport { getTodayDate } from \"../../utils/Date\";\r\nimport { waitForMs } from \"../../utils/Wait\";\r\n\r\n@Injectable\r\nexport class InvreqService {\r\n\r\n  constructor(@Inject private httpService: HttpService) { }\r\n\r\n  /**\r\n   * 得到用户所有的资产账户\r\n   * @returns {Promise<InvReqList>} 资产账户列表\r\n   */\r\n  async getAllInvreqAccounts(): Promise<InvReqList> {\r\n    const res = await this.httpService.fetch({\r\n      path: \"invreq\",\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 得到某个资产账户\r\n   * @param {string} invreqId 资产账户ID\r\n   * @returns {Promise<InvReq>} 资产账户\r\n   */\r\n  async getInvreqAccount(invreqId: string): Promise<InvReq> {\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}`,\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 提交初始化需求\r\n   * @param {InvReqInit} params 初始化需求表格\r\n   * @returns {Promise<void>}\r\n   */\r\n  async createInvreq(params: InvReqInit): Promise<{ invreqId: string }> {\r\n    const res = await this.httpService.fetch({\r\n      path: \"invreq\",\r\n      body: params,\r\n      method: HttpMethod.POST,\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 得到用户总览信息数据\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<OverviewData>} 账户信息总览\r\n   */\r\n  async getOverview(invreqId: string): Promise<OverviewData> {\r\n    const data = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/overview`,\r\n\r\n    });\r\n\r\n    return data.response;\r\n  }\r\n  /**\r\n   * 得到投资需求中股票、债券、商品市场的配比详情\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<OverviewMatching>} 股票、债券、商品市场的配比详情\r\n   */\r\n  async getMatching(invreqId: string): Promise<OverviewMatching> {\r\n\r\n    const data = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/matchings`,\r\n    });\r\n\r\n    return data.response;\r\n  }\r\n\r\n  /**\r\n   * 得到投资需求中股票、债券、商品市场的配比详情\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<OverviewMatching>} 股票、债券、商品市场的配比详情\r\n   */\r\n  async getDetailMatching(invreqId: string): Promise<MatchingList> {\r\n\r\n    const data = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/matchings/detail`,\r\n    });\r\n\r\n    return data.response;\r\n  }\r\n\r\n  /**\r\n   * 得到投资需求的交易记录\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<TransactionLog>} 交易记录列表\r\n   */\r\n  async getTransactionLog(invreqId: string): Promise<TransactionLog> {\r\n\r\n    const data = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/transactions`,\r\n    });\r\n\r\n    console.log(data.response);\r\n    return data.response;\r\n  }\r\n\r\n  /**\r\n   * 根据资产配置id及交易ID得到交易记录（用于调仓界面查看详细交易记录）\r\n   * @param {string} invreqId 投资需求id\r\n   * @param {string} date 交易日期，格式2018-9-7\r\n   * @returns {Promise<TransactionDetailList>} 当天的交易列表\r\n   */\r\n  async getDailyTransaction(invreqId: string, date: string = getTodayDate()): Promise<DailyTransactionRespense> {\r\n\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/dailyTransactions`,\r\n      queryParams: { date },\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 根据投资需求id得到所有调仓的记录\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<ReallocationLog>} 每次调仓的配资比例列表\r\n   */\r\n  async getReallocationLog(invreqId: string): Promise<ReallocationLog> {\r\n\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/position/reallocation`,\r\n\r\n    });\r\n    console.log(res.response);\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 根据日期得到调仓记录\r\n   * @param {string} invreqId 投资需求id\r\n   * @param {string} date 交易日期，格式2018-9-7\r\n   * @returns {Promise<ReallocationDetail>}\r\n   */\r\n  async getReallocation(invreqId: string, date: string = getTodayDate()): Promise<ReallocationDetail> {\r\n\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/position/reallocation/${date}`,\r\n\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 得到当前投资需求的交易设置\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<BoughtTranSetting>} 交易设置数据\r\n   */\r\n  async getBoughtTranSetting(invreqId: string): Promise<BoughtTranSetting> {\r\n\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/settings`,\r\n\r\n    });\r\n    console.log(res.response);\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 提交一次更改后的交易设置信息\r\n   * @param {string} invreqId 投资需求id\r\n   * @param {BoughtTranSetting} setting 交易设置\r\n   * @returns {Promise<void>}\r\n   */\r\n  async setBoughtTranSetting(invreqId: string, setting: BoughtTranSetting): Promise<void> {\r\n    await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/settings`,\r\n      method: HttpMethod.PUT,\r\n      body: setting,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 赎回（取消）此资产账户\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<void>}\r\n   */\r\n  async redeemAccount(invreqId: string): Promise<void> {\r\n    await this.httpService.fetch({\r\n      path: `invreq/${invreqId}`,\r\n      method: HttpMethod.DELETE,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 得到收益列表\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<EarningList>}\r\n   */\r\n  async getEarningList(invreqId: string): Promise<EarningList> {\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/earnings`,\r\n    });\r\n\r\n    console.log(\"earning!\" + res.response);\r\n    return res.response;\r\n  }\r\n\r\n  /**\r\n   * 得到计划交易的信息\r\n   * 需要前端连续的向后端请求，若为null则为无计划交易\r\n   * @param {string} invreqId 投资需求id\r\n   * @returns {Promise<PlanTransaction>} 交易信息\r\n   */\r\n  async getPlanTransaction(invreqId: string): Promise<PlanTransaction> {\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/plannedTransactions`,\r\n\r\n    });\r\n\r\n    return res.response;\r\n\r\n  }\r\n\r\n  /**\r\n   * 确认进行计划交易\r\n   * @param {string} invreqId invreq ID\r\n   * @returns {Promise<void>}\r\n   */\r\n  async confirmPlanTran(invreqId: string): Promise<void> {\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/plannedTransactions`,\r\n      method: HttpMethod.POST,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 取消计划交易\r\n   * @param {string} invreqId 需求ID\r\n   * @param {string} tranId 交易ID\r\n   * @returns {Promise<void>}\r\n   */\r\n  async cancelPlanTran(invreqId: string): Promise<void> {\r\n\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/plannedTransactions`,\r\n      method: HttpMethod.DELETE,\r\n    });\r\n\r\n    // if (Math.random() <= 0.5) {\r\n    //   throw {\r\n    //     statusCode: 400,\r\n    //   } as NetworkError;\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * 得到每日持仓\r\n   * @param {string} invreqId\r\n   * @returns {Promise<DailyPositionList>}\r\n   */\r\n  async getDailyPositionList(invreqId: string): Promise<DailyPositionList> {\r\n    const res = await this.httpService.fetch({\r\n      path: `invreq/${invreqId}/position/dailyPosition`,\r\n\r\n    });\r\n\r\n    return res.response;\r\n  }\r\n}\r\n"]}]}