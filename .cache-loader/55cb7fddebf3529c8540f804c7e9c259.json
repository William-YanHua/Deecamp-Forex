{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\main.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\main.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { isFunction, has, isString, isArray } from '@antv/util';\r\nimport ElementParser from '../base';\r\nvar LineParser = (function (_super) {\r\n    __extends(LineParser, _super);\r\n    function LineParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    LineParser.prototype.init = function () {\r\n        var props = this.plot.options;\r\n        this.config = {\r\n            type: 'line',\r\n            position: {\r\n                fields: [props.xField, props.yField],\r\n            },\r\n            connectNulls: props.connectNulls,\r\n        };\r\n        if (props.lineSize) {\r\n            this.parseSize();\r\n        }\r\n        if (props.smooth) {\r\n            this.config.shape = { values: ['smooth'] };\r\n        }\r\n        if (props.step) {\r\n            this.config.shape = { values: [props.step] };\r\n        }\r\n        if (props.seriesField || props.color) {\r\n            this.parseColor();\r\n        }\r\n        if (props.lineStyle) {\r\n            this.parseStyle();\r\n        }\r\n    };\r\n    LineParser.prototype.parseSize = function () {\r\n        var sizeProps = this.plot.options.lineSize;\r\n        var config = {};\r\n        if (isFunction(sizeProps)) {\r\n            config.callback = sizeProps;\r\n        }\r\n        else {\r\n            config.values = [sizeProps];\r\n        }\r\n        this.config.size = config;\r\n    };\r\n    LineParser.prototype.parseColor = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        if (props.seriesField) {\r\n            config.fields = [props.seriesField];\r\n        }\r\n        if (has(props, 'color')) {\r\n            var color = props.color;\r\n            if (isString(color)) {\r\n                config.values = [color];\r\n            }\r\n            else if (isFunction(color)) {\r\n                config.callback = color;\r\n            }\r\n            else if (isArray(color)) {\r\n                if (props.seriesField) {\r\n                    config.values = color;\r\n                }\r\n                else {\r\n                    if (color.length > 0) {\r\n                        config.values = [color[0]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.config.color = config;\r\n    };\r\n    LineParser.prototype.parseStyle = function () {\r\n        var props = this.plot.options;\r\n        var styleProps = props.lineStyle;\r\n        var config = {\r\n            fields: null,\r\n            callback: null,\r\n            cfg: null,\r\n        };\r\n        if (isFunction(styleProps) && props.seriesField) {\r\n            config.fields = [props.seriesField];\r\n            config.callback = styleProps;\r\n        }\r\n        else {\r\n            config.cfg = styleProps;\r\n        }\r\n        this.config.style = config;\r\n    };\r\n    return LineParser;\r\n}(ElementParser));\r\nexport default LineParser;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\main.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\main.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { isFunction, has, isString, isArray } from '@antv/util';\nimport ElementParser from '../base';\nvar LineParser = /** @class */ (function (_super) {\n    __extends(LineParser, _super);\n    function LineParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    LineParser.prototype.init = function () {\n        var props = this.plot.options;\n        this.config = {\n            type: 'line',\n            position: {\n                fields: [props.xField, props.yField],\n            },\n            connectNulls: props.connectNulls,\n        };\n        if (props.lineSize) {\n            this.parseSize();\n        }\n        if (props.smooth) {\n            this.config.shape = { values: ['smooth'] };\n        }\n        if (props.step) {\n            this.config.shape = { values: [props.step] };\n        }\n        if (props.seriesField || props.color) {\n            this.parseColor();\n        }\n        if (props.lineStyle) {\n            this.parseStyle();\n        }\n    };\n    LineParser.prototype.parseSize = function () {\n        var sizeProps = this.plot.options.lineSize;\n        var config = {};\n        if (isFunction(sizeProps)) {\n            config.callback = sizeProps;\n        }\n        else {\n            config.values = [sizeProps];\n        }\n        this.config.size = config;\n    };\n    LineParser.prototype.parseColor = function () {\n        var props = this.plot.options;\n        var config = {};\n        if (props.seriesField) {\n            config.fields = [props.seriesField];\n        }\n        if (has(props, 'color')) {\n            var color = props.color;\n            if (isString(color)) {\n                config.values = [color];\n            }\n            else if (isFunction(color)) {\n                config.callback = color;\n            }\n            else if (isArray(color)) {\n                if (props.seriesField) {\n                    config.values = color;\n                }\n                else {\n                    if (color.length > 0) {\n                        config.values = [color[0]];\n                    }\n                }\n            }\n        }\n        this.config.color = config;\n    };\n    LineParser.prototype.parseStyle = function () {\n        var props = this.plot.options;\n        var styleProps = props.lineStyle;\n        var config = {\n            fields: null,\n            callback: null,\n            cfg: null,\n        };\n        if (isFunction(styleProps) && props.seriesField) {\n            config.fields = [props.seriesField];\n            config.callback = styleProps;\n        }\n        else {\n            config.cfg = styleProps;\n        }\n        this.config.style = config;\n    };\n    return LineParser;\n}(ElementParser));\nexport default LineParser;\n//# sourceMappingURL=main.js.map"]}]}