{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\fbjs\\lib\\invariant.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\fbjs\\lib\\invariant.js","mtime":1506381455000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar validateFormat = function validateFormat(format) { };\r\nif (process.env.NODE_ENV !== 'production') {\r\n    validateFormat = function validateFormat(format) {\r\n        if (format === undefined) {\r\n            throw new Error('invariant requires an error message argument');\r\n        }\r\n    };\r\n}\r\nfunction invariant(condition, format, a, b, c, d, e, f) {\r\n    validateFormat(format);\r\n    if (!condition) {\r\n        var error;\r\n        if (format === undefined) {\r\n            error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\r\n        }\r\n        else {\r\n            var args = [a, b, c, d, e, f];\r\n            var argIndex = 0;\r\n            error = new Error(format.replace(/%s/g, function () {\r\n                return args[argIndex++];\r\n            }));\r\n            error.name = 'Invariant Violation';\r\n        }\r\n        error.framesToPop = 1;\r\n        throw error;\r\n    }\r\n}\r\nmodule.exports = invariant;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\fbjs\\lib\\invariant.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\fbjs\\lib\\invariant.js"],"names":[],"mappings":"AAQA,YAAY,CAAC;AAab,IAAI,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM,IAAG,CAAC,CAAC;AAExD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;IACzC,cAAc,GAAG,SAAS,cAAc,CAAC,MAAM;QAC7C,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACjE;IACH,CAAC,CAAC;CACH;AAED,SAAS,SAAS,CAAC,SAAS,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IACpD,cAAc,CAAC,MAAM,CAAC,CAAC;IAEvB,IAAI,CAAC,SAAS,EAAE;QACd,IAAI,KAAK,CAAC;QACV,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,KAAK,GAAG,IAAI,KAAK,CAAC,oEAAoE,GAAG,6DAA6D,CAAC,CAAC;SACzJ;aAAM;YACL,IAAI,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC9B,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE;gBACtC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC,CAAC;YACJ,KAAK,CAAC,IAAI,GAAG,qBAAqB,CAAC;SACpC;QAED,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;QACtB,MAAM,KAAK,CAAC;KACb;AACH,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;"]}]}