{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\geo\\centroid.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\geo\\centroid.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar registerTransform = require('../../data-set').registerTransform;\r\nvar getField = require('../../util/option-parser').getField;\r\nvar DEFAULT_OPTIONS = {\r\n    as: ['_centroid_x', '_centroid_y']\r\n};\r\nfunction transform(view, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var field = getField(options);\r\n    var geoView = options.geoView || options.geoDataView;\r\n    if (isString(geoView)) {\r\n        geoView = view.dataSet.getView(geoView);\r\n    }\r\n    if (!geoView || geoView.dataType !== 'geo') {\r\n        throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');\r\n    }\r\n    var as = options.as;\r\n    if (!isArray(as) || as.length !== 2) {\r\n        throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"cX\", \"cY\" ])!');\r\n    }\r\n    var centroidX = as[0];\r\n    var centroidY = as[1];\r\n    view.rows.forEach(function (row) {\r\n        var feature = geoView.geoFeatureByName(row[field]);\r\n        if (feature) {\r\n            if (geoView._projectedAs) {\r\n                row[centroidX] = feature[geoView._projectedAs[2]];\r\n                row[centroidY] = feature[geoView._projectedAs[3]];\r\n            }\r\n            else {\r\n                row[centroidX] = feature.centroidX;\r\n                row[centroidY] = feature.centroidY;\r\n            }\r\n        }\r\n    });\r\n}\r\nregisterTransform('geo.centroid', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\geo\\centroid.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\geo\\centroid.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAExD,IAAA,+DAAiB,CACW;AAE5B,IAAA,uDAAQ,CAC8B;AAExC,IAAM,eAAe,GAAG;IAItB,EAAE,EAAE,CAAE,aAAa,EAAE,aAAa,CAAE;CACrC,CAAC;AAEF,SAAS,SAAS,CAAC,IAAI,EAAE,OAAO;IAC9B,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC;IACrD,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KACzC;IACD,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC1C,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;KAC7E;IACD,IAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACnC,MAAM,IAAI,SAAS,CAAC,uEAAuE,CAAC,CAAC;KAC9F;IAED,IAAM,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,IAAM,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACnB,IAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACrD,IAAI,OAAO,EAAE;YACX,IAAI,OAAO,CAAC,YAAY,EAAE;gBACxB,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClD,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD;iBAAM;gBACL,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;gBACnC,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;aACpC;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,iBAAiB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst {\n  getField\n} = require('../../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  // field: 'name', // required\n  // geoView: view, // required\n  // geoDataView: view, // alias\n  as: [ '_centroid_x', '_centroid_y' ]\n};\n\nfunction transform(view, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const field = getField(options);\n  let geoView = options.geoView || options.geoDataView; // alias\n  if (isString(geoView)) {\n    geoView = view.dataSet.getView(geoView);\n  }\n  if (!geoView || geoView.dataType !== 'geo') {\n    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');\n  }\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"cX\", \"cY\" ])!');\n  }\n\n  const centroidX = as[0];\n  const centroidY = as[1];\n  view.rows.forEach(row => {\n    const feature = geoView.geoFeatureByName(row[field]);\n    if (feature) {\n      if (geoView._projectedAs) {\n        row[centroidX] = feature[geoView._projectedAs[2]];\n        row[centroidY] = feature[geoView._projectedAs[3]];\n      } else {\n        row[centroidX] = feature.centroidX;\n        row[centroidY] = feature.centroidY;\n      }\n    }\n  });\n}\n\nregisterTransform('geo.centroid', transform);\n"]}]}