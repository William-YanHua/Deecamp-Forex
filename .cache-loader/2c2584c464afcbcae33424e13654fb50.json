{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/adjust/esm/adjusts/jitter.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/adjust/esm/adjusts/jitter.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n    return (max - min) * Math.random() + min;\n}\nvar Jitter = (function (_super) {\n    __extends(Jitter, _super);\n    function Jitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Jitter.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        var mergeData = _.flatten(groupedDataArray);\n        this.adjustData(groupedDataArray, mergeData);\n        return groupedDataArray;\n    };\n    Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n        var _this = this;\n        var groupDataArray = this.groupData(dataArray, dim);\n        return _.each(groupDataArray, function (data, dimValue) {\n            return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n        });\n    };\n    Jitter.prototype.getAdjustOffset = function (range) {\n        var pre = range.pre, next = range.next;\n        var margin = (next - pre) * GAP;\n        return randomNumber(pre + margin, next - margin);\n    };\n    Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n        var _this = this;\n        var range = this.getAdjustRange(dim, dimValue, values);\n        _.each(group, function (data) {\n            data[dim] = _this.getAdjustOffset(range);\n        });\n        return group;\n    };\n    return Jitter;\n}(Adjust));\nexport default Jitter;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/adjust/esm/adjusts/jitter.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/adjust/esm/adjusts/jitter.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAClC,OAAO,KAAK,CAAC,MAAM,YAAY,CAAC;AAChC,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAClC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG;IAC1B,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;AAC7C,CAAC;AACD,IAAI,MAAM,GAAiB,CAAC,UAAU,MAAM;IACxC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1B,SAAS,MAAM;QACX,OAAO,MAAM,KAAK,IAAI,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC;IACpE,CAAC;IACD,MAAM,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,cAAc;QAC/C,IAAI,gBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAE/C,IAAI,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAE5C,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAC7C,OAAO,gBAAgB,CAAC;IAC5B,CAAC,CAAC;IAOF,MAAM,CAAC,SAAS,CAAC,SAAS,GAAG,UAAU,GAAG,EAAE,MAAM,EAAE,SAAS;QACzD,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACpD,OAAO,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,UAAU,IAAI,EAAE,QAAQ;YAClD,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,CAAC,SAAS,CAAC,eAAe,GAAG,UAAU,KAAK;QAC9C,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QAEvC,IAAI,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAChC,OAAO,YAAY,CAAC,GAAG,GAAG,MAAM,EAAE,IAAI,GAAG,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC;IAEF,MAAM,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,KAAK,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM;QACjE,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;QACvD,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,IAAI;YACxB,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;AACX,eAAe,MAAM,CAAC","sourcesContent":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n    return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */ (function (_super) {\n    __extends(Jitter, _super);\n    function Jitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Jitter.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n        var mergeData = _.flatten(groupedDataArray);\n        // 返回值\n        this.adjustData(groupedDataArray, mergeData);\n        return groupedDataArray;\n    };\n    /**\n     * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n     * @param dim\n     * @param values\n     * @param dataArray\n     */\n    Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n        var _this = this;\n        // 在每一个分组中，将数据再按照 dim 分组，用于散列\n        var groupDataArray = this.groupData(dataArray, dim);\n        return _.each(groupDataArray, function (data, dimValue) {\n            return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n        });\n    };\n    // 随机出来的字段值\n    Jitter.prototype.getAdjustOffset = function (range) {\n        var pre = range.pre, next = range.next;\n        // 随机的范围\n        var margin = (next - pre) * GAP;\n        return randomNumber(pre + margin, next - margin);\n    };\n    // adjust group data\n    Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n        var _this = this;\n        // 调整范围\n        var range = this.getAdjustRange(dim, dimValue, values);\n        _.each(group, function (data) {\n            data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n        });\n        return group;\n    };\n    return Jitter;\n}(Adjust));\nexport default Jitter;\n//# sourceMappingURL=jitter.js.map"]}]}