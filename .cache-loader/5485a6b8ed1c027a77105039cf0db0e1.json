{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\grid\\base.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\grid\\base.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { each, isString, mix } from '@antv/util';\r\nimport GroupComponent from '../abstract/group-component';\r\nimport Theme from '../util/theme';\r\nvar GridBase = (function (_super) {\r\n    __extends(GridBase, _super);\r\n    function GridBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GridBase.prototype.getDefaultCfg = function () {\r\n        var cfg = _super.prototype.getDefaultCfg.call(this);\r\n        return __assign(__assign({}, cfg), { name: 'grid', line: {}, alternateColor: null, capture: false, items: [], closed: false, defaultCfg: {\r\n                line: {\r\n                    type: 'line',\r\n                    style: {\r\n                        lineWidth: 1,\r\n                        stroke: Theme.lineColor,\r\n                    },\r\n                },\r\n            } });\r\n    };\r\n    GridBase.prototype.getLineType = function () {\r\n        var line = this.get('line') || this.get('defaultCfg').line;\r\n        return line.type;\r\n    };\r\n    GridBase.prototype.renderInner = function (group) {\r\n        this.drawGrid(group);\r\n    };\r\n    GridBase.prototype.getAlternatePath = function (prePoints, points) {\r\n        var regionPath = this.getGridPath(prePoints);\r\n        var reversePoints = points.slice(0).reverse();\r\n        var nextPath = this.getGridPath(reversePoints, true);\r\n        var closed = this.get('closed');\r\n        if (closed) {\r\n            regionPath = regionPath.concat(nextPath);\r\n        }\r\n        else {\r\n            nextPath[0][0] = 'L';\r\n            regionPath = regionPath.concat(nextPath);\r\n            regionPath.push(['Z']);\r\n        }\r\n        return regionPath;\r\n    };\r\n    GridBase.prototype.getPathStyle = function () {\r\n        return this.get('line').style;\r\n    };\r\n    GridBase.prototype.drawGrid = function (group) {\r\n        var _this = this;\r\n        var line = this.get('line');\r\n        var items = this.get('items');\r\n        var alternateColor = this.get('alternateColor');\r\n        var preItem = null;\r\n        each(items, function (item, index) {\r\n            var id = item.id || index;\r\n            if (line) {\r\n                var style = _this.getPathStyle();\r\n                var lineId = _this.getElementId(\"line-\" + id);\r\n                var gridPath = _this.getGridPath(item.points);\r\n                _this.addShape(group, {\r\n                    type: 'path',\r\n                    name: 'grid-line',\r\n                    id: lineId,\r\n                    attrs: mix({\r\n                        path: gridPath,\r\n                    }, style),\r\n                });\r\n            }\r\n            if (alternateColor && index > 0) {\r\n                var regionId = _this.getElementId(\"region-\" + id);\r\n                var isEven = index % 2 === 0;\r\n                if (isString(alternateColor)) {\r\n                    if (isEven) {\r\n                        _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\r\n                    }\r\n                }\r\n                else {\r\n                    var color = isEven ? alternateColor[1] : alternateColor[0];\r\n                    _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\r\n                }\r\n            }\r\n            preItem = item;\r\n        });\r\n    };\r\n    GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\r\n        var regionPath = this.getAlternatePath(prePoints, points);\r\n        this.addShape(group, {\r\n            type: 'path',\r\n            id: id,\r\n            name: 'grid-region',\r\n            attrs: {\r\n                path: regionPath,\r\n                fill: color,\r\n            },\r\n        });\r\n    };\r\n    return GridBase;\r\n}(GroupComponent));\r\nexport default GridBase;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\grid\\base.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\grid\\base.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */ (function (_super) {\n    __extends(GridBase, _super);\n    function GridBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'grid', line: {}, alternateColor: null, capture: false, items: [], closed: false, defaultCfg: {\n                line: {\n                    type: 'line',\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n            } });\n    };\n    /**\n     * 获取栅格线的类型\n     * @return {string} 栅格线类型\n     */\n    GridBase.prototype.getLineType = function () {\n        var line = this.get('line') || this.get('defaultCfg').line;\n        return line.type;\n    };\n    GridBase.prototype.renderInner = function (group) {\n        this.drawGrid(group);\n    };\n    GridBase.prototype.getAlternatePath = function (prePoints, points) {\n        var regionPath = this.getGridPath(prePoints);\n        var reversePoints = points.slice(0).reverse();\n        var nextPath = this.getGridPath(reversePoints, true);\n        var closed = this.get('closed');\n        if (closed) {\n            regionPath = regionPath.concat(nextPath);\n        }\n        else {\n            nextPath[0][0] = 'L'; // 更新第一个节点\n            regionPath = regionPath.concat(nextPath);\n            regionPath.push(['Z']);\n        }\n        return regionPath;\n    };\n    // 获取路径的配置项\n    GridBase.prototype.getPathStyle = function () {\n        return this.get('line').style;\n    };\n    // 绘制栅格\n    GridBase.prototype.drawGrid = function (group) {\n        var _this = this;\n        var line = this.get('line');\n        var items = this.get('items');\n        var alternateColor = this.get('alternateColor');\n        var preItem = null;\n        each(items, function (item, index) {\n            var id = item.id || index;\n            // 绘制栅格线\n            if (line) {\n                var style = _this.getPathStyle();\n                var lineId = _this.getElementId(\"line-\" + id);\n                var gridPath = _this.getGridPath(item.points);\n                _this.addShape(group, {\n                    type: 'path',\n                    name: 'grid-line',\n                    id: lineId,\n                    attrs: mix({\n                        path: gridPath,\n                    }, style),\n                });\n            }\n            // 如果存在 alternateColor 则绘制矩形\n            // 从第二个栅格线开始绘制\n            if (alternateColor && index > 0) {\n                var regionId = _this.getElementId(\"region-\" + id);\n                var isEven = index % 2 === 0;\n                if (isString(alternateColor)) {\n                    // 如果颜色是单值，则是仅绘制偶数时的区域\n                    if (isEven) {\n                        _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n                    }\n                }\n                else {\n                    var color = isEven ? alternateColor[1] : alternateColor[0];\n                    _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n                }\n            }\n            preItem = item;\n        });\n    };\n    // 绘制栅格线间的间隔\n    GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n        var regionPath = this.getAlternatePath(prePoints, points);\n        this.addShape(group, {\n            type: 'path',\n            id: id,\n            name: 'grid-region',\n            attrs: {\n                path: regionPath,\n                fill: color,\n            },\n        });\n    };\n    return GridBase;\n}(GroupComponent));\nexport default GridBase;\n//# sourceMappingURL=base.js.map"]}]}