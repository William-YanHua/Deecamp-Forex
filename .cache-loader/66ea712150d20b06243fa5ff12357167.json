{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\waffle.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\waffle.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar assign = require('@antv/util/lib/mix');\r\nvar each = require('@antv/util/lib/each');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar keys = require('@antv/util/lib/object/keys');\r\nvar map = require('@antv/util/lib/map');\r\nvar pick = require('@antv/util/lib/pick');\r\nvar sum = require('simple-statistics').sum;\r\nvar partition = require('../util/partition');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar getFields = require('../util/option-parser').getFields;\r\nvar DEFAULT_OPTIONS = {\r\n    fields: ['name', 'value'],\r\n    rows: 5,\r\n    size: [1, 1],\r\n    scale: 1,\r\n    groupBy: [],\r\n    maxCount: 1000,\r\n    gapRatio: 0.1,\r\n    as: ['x', 'y']\r\n};\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var fields = getFields(options);\r\n    var _a = __read(fields, 2), nameField = _a[0], valueField = _a[1];\r\n    var _b = __read(options.as, 2), asX = _b[0], asY = _b[1];\r\n    var groupBy = options.groupBy;\r\n    var groups = partition(dataView.rows, groupBy);\r\n    var groupKeys = keys(groups);\r\n    var _c = __read(options.size, 2), width = _c[0], height = _c[1];\r\n    var maxCount = options.maxCount;\r\n    var groupCount = groupKeys.length;\r\n    var partHeight = height / groupCount;\r\n    var rows = options.rows;\r\n    var gapRatio = options.gapRatio;\r\n    var result = [];\r\n    var scale = options.scale;\r\n    var currentGroupIndex = 0;\r\n    var wStep = 0;\r\n    forIn(groups, function (group) {\r\n        var totalValue = sum(map(group, function (row) { return row[valueField]; }));\r\n        var cols = Math.ceil(totalValue * scale / rows);\r\n        if (totalValue * scale > maxCount) {\r\n            scale = maxCount / totalValue;\r\n            cols = Math.ceil(totalValue * scale / rows);\r\n        }\r\n        wStep = width / cols;\r\n    });\r\n    forIn(groups, function (group) {\r\n        var heightRange = [currentGroupIndex * partHeight, (currentGroupIndex + 1) * partHeight];\r\n        var h = heightRange[1] - heightRange[0];\r\n        var hStep = h * (1 - gapRatio) / rows;\r\n        var currentCol = 0;\r\n        var currentRow = 0;\r\n        each(group, function (row) {\r\n            var value = row[valueField];\r\n            var count = Math.round(value * scale);\r\n            for (var i = 0; i < count; i++) {\r\n                if (currentRow === rows) {\r\n                    currentRow = 0;\r\n                    currentCol++;\r\n                }\r\n                var resultRow = pick(row, [nameField, valueField].concat(groupBy));\r\n                resultRow[asX] = currentCol * wStep + wStep / 2;\r\n                resultRow[asY] = currentRow * hStep + hStep / 2 + heightRange[0];\r\n                resultRow._wStep = wStep;\r\n                resultRow._hStep = hStep;\r\n                currentRow++;\r\n                result.push(resultRow);\r\n            }\r\n        });\r\n        currentGroupIndex += 1;\r\n    });\r\n    dataView.rows = result;\r\n}\r\nregisterTransform('waffle', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\waffle.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\waffle.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst each = require('@antv/util/lib/each');\nconst forIn = require('@antv/util/lib/each');\nconst keys = require('@antv/util/lib/object/keys');\nconst map = require('@antv/util/lib/map');\nconst pick = require('@antv/util/lib/pick');\nconst {\n  sum\n} = require('simple-statistics');\nconst partition = require('../util/partition');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  getFields\n} = require('../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  fields: [ 'name', 'value' ], // fields\n  rows: 5,\n  size: [ 1, 1 ],\n  scale: 1,\n  groupBy: [],\n  maxCount: 1000,\n  gapRatio: 0.1,\n  as: [ 'x', 'y' ]\n};\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const fields = getFields(options);\n  const [ nameField, valueField ] = fields;\n  const [ asX, asY ] = options.as;\n  const groupBy = options.groupBy;\n  const groups = partition(dataView.rows, groupBy);\n  const groupKeys = keys(groups);\n  const [ width, height ] = options.size;\n  const maxCount = options.maxCount;\n  const groupCount = groupKeys.length;\n  const partHeight = height / groupCount;\n  const rows = options.rows;\n  const gapRatio = options.gapRatio;\n  const result = [];\n  let scale = options.scale;\n  let currentGroupIndex = 0;\n  let wStep = 0;\n\n  // getting suitable scale and width step\n  forIn(groups, group => {\n    const totalValue = sum(map(group, row => row[valueField]));\n    let cols = Math.ceil(totalValue * scale / rows);\n    if (totalValue * scale > maxCount) {\n      scale = maxCount / totalValue;\n      cols = Math.ceil(totalValue * scale / rows);\n    }\n    wStep = width / cols;\n  });\n\n  // distributing values into grid\n  forIn(groups, group => {\n    const heightRange = [ currentGroupIndex * partHeight, (currentGroupIndex + 1) * partHeight ];\n    const h = heightRange[1] - heightRange[0];\n    const hStep = h * (1 - gapRatio) / rows;\n    let currentCol = 0;\n    let currentRow = 0;\n    each(group, row => {\n      const value = row[valueField];\n      const count = Math.round(value * scale);\n      for (let i = 0; i < count; i++) {\n        if (currentRow === rows) {\n          currentRow = 0;\n          currentCol++;\n        }\n        const resultRow = pick(row, [ nameField, valueField ].concat(groupBy));\n        resultRow[asX] = currentCol * wStep + wStep / 2;\n        resultRow[asY] = currentRow * hStep + hStep / 2 + heightRange[0];\n        resultRow._wStep = wStep;\n        resultRow._hStep = hStep;\n        currentRow++;\n        result.push(resultRow);\n      }\n    });\n    currentGroupIndex += 1;\n  });\n\n  dataView.rows = result;\n}\n\nregisterTransform('waffle', transform);\n\n"]}]}