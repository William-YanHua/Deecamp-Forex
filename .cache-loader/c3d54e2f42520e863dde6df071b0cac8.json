{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/graphlib/lib/alg/prim.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/graphlib/lib/alg/prim.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _ = require(\"../lodash\");\nvar Graph = require(\"../graph\");\nvar PriorityQueue = require(\"../data/priority-queue\");\nmodule.exports = prim;\nfunction prim(g, weightFunc) {\n    var result = new Graph();\n    var parents = {};\n    var pq = new PriorityQueue();\n    var v;\n    function updateNeighbors(edge) {\n        var w = edge.v === v ? edge.w : edge.v;\n        var pri = pq.priority(w);\n        if (pri !== undefined) {\n            var edgeWeight = weightFunc(edge);\n            if (edgeWeight < pri) {\n                parents[w] = v;\n                pq.decrease(w, edgeWeight);\n            }\n        }\n    }\n    if (g.nodeCount() === 0) {\n        return result;\n    }\n    _.each(g.nodes(), function (v) {\n        pq.add(v, Number.POSITIVE_INFINITY);\n        result.setNode(v);\n    });\n    pq.decrease(g.nodes()[0], 0);\n    var init = false;\n    while (pq.size() > 0) {\n        v = pq.removeMin();\n        if (_.has(parents, v)) {\n            result.setEdge(v, parents[v]);\n        }\n        else if (init) {\n            throw new Error(\"Input graph is not connected: \" + g);\n        }\n        else {\n            init = true;\n        }\n        g.nodeEdges(v).forEach(updateNeighbors);\n    }\n    return result;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/graphlib/lib/alg/prim.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/graphlib/lib/alg/prim.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAC7B,IAAI,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAChC,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAEtD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAEtB,SAAS,IAAI,CAAC,CAAC,EAAE,UAAU;IACzB,IAAI,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;IACzB,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,EAAE,GAAG,IAAI,aAAa,EAAE,CAAC;IAC7B,IAAI,CAAC,CAAC;IAEN,SAAS,eAAe,CAAC,IAAI;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,IAAI,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,UAAU,GAAG,GAAG,EAAE;gBACpB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACf,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAED,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;QACvB,OAAO,MAAM,CAAC;KACf;IAED,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAS,CAAC;QAC1B,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE7B,IAAI,IAAI,GAAG,KAAK,CAAC;IACjB,OAAO,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;QACpB,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;YACrB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;aAAM,IAAI,IAAI,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,CAAC,CAAC,CAAC;SACvD;aAAM;YACL,IAAI,GAAG,IAAI,CAAC;SACb;QAED,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;KACzC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["var _ = require(\"../lodash\");\nvar Graph = require(\"../graph\");\nvar PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph();\n  var parents = {};\n  var pq = new PriorityQueue();\n  var v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v;\n    var pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function(v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n"]}]}