{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/unist-util-is/convert.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/unist-util-is/convert.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict';\nmodule.exports = convert;\nfunction convert(test) {\n    if (typeof test === 'string') {\n        return typeFactory(test);\n    }\n    if (test === null || test === undefined) {\n        return ok;\n    }\n    if (typeof test === 'object') {\n        return ('length' in test ? anyFactory : matchesFactory)(test);\n    }\n    if (typeof test === 'function') {\n        return test;\n    }\n    throw new Error('Expected function, string, or object as test');\n}\nfunction convertAll(tests) {\n    var results = [];\n    var length = tests.length;\n    var index = -1;\n    while (++index < length) {\n        results[index] = convert(tests[index]);\n    }\n    return results;\n}\nfunction matchesFactory(test) {\n    return matches;\n    function matches(node) {\n        var key;\n        for (key in test) {\n            if (node[key] !== test[key]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction anyFactory(tests) {\n    var checks = convertAll(tests);\n    var length = checks.length;\n    return matches;\n    function matches() {\n        var index = -1;\n        while (++index < length) {\n            if (checks[index].apply(this, arguments)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nfunction typeFactory(test) {\n    return type;\n    function type(node) {\n        return Boolean(node && node.type === test);\n    }\n}\nfunction ok() {\n    return true;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/unist-util-is/convert.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/unist-util-is/convert.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAEZ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;AAExB,SAAS,OAAO,CAAC,IAAI;IACnB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,WAAW,CAAC,IAAI,CAAC,CAAA;KACzB;IAED,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;QACvC,OAAO,EAAE,CAAA;KACV;IAED,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAA;KAC9D;IAED,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;QAC9B,OAAO,IAAI,CAAA;KACZ;IAED,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAA;AACjE,CAAC;AAED,SAAS,UAAU,CAAC,KAAK;IACvB,IAAI,OAAO,GAAG,EAAE,CAAA;IAChB,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAA;IACzB,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;IAEd,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;QACvB,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;KACvC;IAED,OAAO,OAAO,CAAA;AAChB,CAAC;AAID,SAAS,cAAc,CAAC,IAAI;IAC1B,OAAO,OAAO,CAAA;IAEd,SAAS,OAAO,CAAC,IAAI;QACnB,IAAI,GAAG,CAAA;QAEP,KAAK,GAAG,IAAI,IAAI,EAAE;YAChB,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE;gBAC3B,OAAO,KAAK,CAAA;aACb;SACF;QAED,OAAO,IAAI,CAAA;IACb,CAAC;AACH,CAAC;AAED,SAAS,UAAU,CAAC,KAAK;IACvB,IAAI,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;IAC9B,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;IAE1B,OAAO,OAAO,CAAA;IAEd,SAAS,OAAO;QACd,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;QAEd,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;YACvB,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAA;aACZ;SACF;QAED,OAAO,KAAK,CAAA;IACd,CAAC;AACH,CAAC;AAID,SAAS,WAAW,CAAC,IAAI;IACvB,OAAO,IAAI,CAAA;IAEX,SAAS,IAAI,CAAC,IAAI;QAChB,OAAO,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;IAC5C,CAAC;AACH,CAAC;AAGD,SAAS,EAAE;IACT,OAAO,IAAI,CAAA;AACb,CAAC","sourcesContent":["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return ok\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\nfunction convertAll(tests) {\n  var results = []\n  var length = tests.length\n  var index = -1\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction matchesFactory(test) {\n  return matches\n\n  function matches(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node’s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"]}]}