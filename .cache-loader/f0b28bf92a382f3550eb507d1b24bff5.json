{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/remark-parse/lib/tokenize/reference.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/remark-parse/lib/tokenize/reference.js","mtime":1516450982000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["'use strict';\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/link');\nvar normalize = require('../util/normalize');\nmodule.exports = reference;\nreference.locator = locate;\nvar T_LINK = 'link';\nvar T_IMAGE = 'image';\nvar T_FOOTNOTE = 'footnote';\nvar REFERENCE_TYPE_SHORTCUT = 'shortcut';\nvar REFERENCE_TYPE_COLLAPSED = 'collapsed';\nvar REFERENCE_TYPE_FULL = 'full';\nvar C_CARET = '^';\nvar C_BACKSLASH = '\\\\';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\nfunction reference(eat, value, silent) {\n    var self = this;\n    var character = value.charAt(0);\n    var index = 0;\n    var length = value.length;\n    var subvalue = '';\n    var intro = '';\n    var type = T_LINK;\n    var referenceType = REFERENCE_TYPE_SHORTCUT;\n    var content;\n    var identifier;\n    var now;\n    var node;\n    var exit;\n    var queue;\n    var bracketed;\n    var depth;\n    if (character === '!') {\n        type = T_IMAGE;\n        intro = character;\n        character = value.charAt(++index);\n    }\n    if (character !== C_BRACKET_OPEN) {\n        return;\n    }\n    index++;\n    intro += character;\n    queue = '';\n    if (self.options.footnotes && value.charAt(index) === C_CARET) {\n        if (type === T_IMAGE) {\n            return;\n        }\n        intro += C_CARET;\n        index++;\n        type = T_FOOTNOTE;\n    }\n    depth = 0;\n    while (index < length) {\n        character = value.charAt(index);\n        if (character === C_BRACKET_OPEN) {\n            bracketed = true;\n            depth++;\n        }\n        else if (character === C_BRACKET_CLOSE) {\n            if (!depth) {\n                break;\n            }\n            depth--;\n        }\n        if (character === C_BACKSLASH) {\n            queue += C_BACKSLASH;\n            character = value.charAt(++index);\n        }\n        queue += character;\n        index++;\n    }\n    subvalue = queue;\n    content = queue;\n    character = value.charAt(index);\n    if (character !== C_BRACKET_CLOSE) {\n        return;\n    }\n    index++;\n    subvalue += character;\n    queue = '';\n    while (index < length) {\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n            break;\n        }\n        queue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {\n        identifier = '';\n        queue += character;\n        index++;\n        while (index < length) {\n            character = value.charAt(index);\n            if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {\n                break;\n            }\n            if (character === C_BACKSLASH) {\n                identifier += C_BACKSLASH;\n                character = value.charAt(++index);\n            }\n            identifier += character;\n            index++;\n        }\n        character = value.charAt(index);\n        if (character === C_BRACKET_CLOSE) {\n            referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;\n            queue += identifier + character;\n            index++;\n        }\n        else {\n            identifier = '';\n        }\n        subvalue += queue;\n        queue = '';\n    }\n    else {\n        if (!content) {\n            return;\n        }\n        identifier = content;\n    }\n    if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {\n        return;\n    }\n    subvalue = intro + subvalue;\n    if (type === T_LINK && self.inLink) {\n        return null;\n    }\n    if (silent) {\n        return true;\n    }\n    if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {\n        return eat(subvalue)({\n            type: 'footnote',\n            children: this.tokenizeInline(content, eat.now())\n        });\n    }\n    now = eat.now();\n    now.column += intro.length;\n    now.offset += intro.length;\n    identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;\n    node = {\n        type: type + 'Reference',\n        identifier: normalize(identifier)\n    };\n    if (type === T_LINK || type === T_IMAGE) {\n        node.referenceType = referenceType;\n    }\n    if (type === T_LINK) {\n        exit = self.enterLink();\n        node.children = self.tokenizeInline(content, now);\n        exit();\n    }\n    else if (type === T_IMAGE) {\n        node.alt = self.decode.raw(self.unescape(content), now) || null;\n    }\n    return eat(subvalue)(node);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/remark-parse/lib/tokenize/reference.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/remark-parse/lib/tokenize/reference.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/link');\nvar normalize = require('../util/normalize');\n\nmodule.exports = reference;\nreference.locator = locate;\n\nvar T_LINK = 'link';\nvar T_IMAGE = 'image';\nvar T_FOOTNOTE = 'footnote';\nvar REFERENCE_TYPE_SHORTCUT = 'shortcut';\nvar REFERENCE_TYPE_COLLAPSED = 'collapsed';\nvar REFERENCE_TYPE_FULL = 'full';\nvar C_CARET = '^';\nvar C_BACKSLASH = '\\\\';\nvar C_BRACKET_OPEN = '[';\nvar C_BRACKET_CLOSE = ']';\n\nfunction reference(eat, value, silent) {\n  var self = this;\n  var character = value.charAt(0);\n  var index = 0;\n  var length = value.length;\n  var subvalue = '';\n  var intro = '';\n  var type = T_LINK;\n  var referenceType = REFERENCE_TYPE_SHORTCUT;\n  var content;\n  var identifier;\n  var now;\n  var node;\n  var exit;\n  var queue;\n  var bracketed;\n  var depth;\n\n  /* Check whether we’re eating an image. */\n  if (character === '!') {\n    type = T_IMAGE;\n    intro = character;\n    character = value.charAt(++index);\n  }\n\n  if (character !== C_BRACKET_OPEN) {\n    return;\n  }\n\n  index++;\n  intro += character;\n  queue = '';\n\n  /* Check whether we’re eating a footnote. */\n  if (self.options.footnotes && value.charAt(index) === C_CARET) {\n    /* Exit if `![^` is found, so the `!` will be seen as text after this,\n     * and we’ll enter this function again when `[^` is found. */\n    if (type === T_IMAGE) {\n      return;\n    }\n\n    intro += C_CARET;\n    index++;\n    type = T_FOOTNOTE;\n  }\n\n  /* Eat the text. */\n  depth = 0;\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_OPEN) {\n      bracketed = true;\n      depth++;\n    } else if (character === C_BRACKET_CLOSE) {\n      if (!depth) {\n        break;\n      }\n\n      depth--;\n    }\n\n    if (character === C_BACKSLASH) {\n      queue += C_BACKSLASH;\n      character = value.charAt(++index);\n    }\n\n    queue += character;\n    index++;\n  }\n\n  subvalue = queue;\n  content = queue;\n  character = value.charAt(index);\n\n  if (character !== C_BRACKET_CLOSE) {\n    return;\n  }\n\n  index++;\n  subvalue += character;\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (!whitespace(character)) {\n      break;\n    }\n\n    queue += character;\n    index++;\n  }\n\n  character = value.charAt(index);\n\n  /* Inline footnotes cannot have an identifier. */\n  if (type !== T_FOOTNOTE && character === C_BRACKET_OPEN) {\n    identifier = '';\n    queue += character;\n    index++;\n\n    while (index < length) {\n      character = value.charAt(index);\n\n      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {\n        break;\n      }\n\n      if (character === C_BACKSLASH) {\n        identifier += C_BACKSLASH;\n        character = value.charAt(++index);\n      }\n\n      identifier += character;\n      index++;\n    }\n\n    character = value.charAt(index);\n\n    if (character === C_BRACKET_CLOSE) {\n      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;\n      queue += identifier + character;\n      index++;\n    } else {\n      identifier = '';\n    }\n\n    subvalue += queue;\n    queue = '';\n  } else {\n    if (!content) {\n      return;\n    }\n\n    identifier = content;\n  }\n\n  /* Brackets cannot be inside the identifier. */\n  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {\n    return;\n  }\n\n  subvalue = intro + subvalue;\n\n  if (type === T_LINK && self.inLink) {\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {\n    return eat(subvalue)({\n      type: 'footnote',\n      children: this.tokenizeInline(content, eat.now())\n    });\n  }\n\n  now = eat.now();\n  now.column += intro.length;\n  now.offset += intro.length;\n  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;\n\n  node = {\n    type: type + 'Reference',\n    identifier: normalize(identifier)\n  };\n\n  if (type === T_LINK || type === T_IMAGE) {\n    node.referenceType = referenceType;\n  }\n\n  if (type === T_LINK) {\n    exit = self.enterLink();\n    node.children = self.tokenizeInline(content, now);\n    exit();\n  } else if (type === T_IMAGE) {\n    node.alt = self.decode.raw(self.unescape(content), now) || null;\n  }\n\n  return eat(subvalue)(node);\n}\n"]}]}