{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/geoms/area/mini.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/geoms/area/mini.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { registerShape } from '../../dependents';\nimport { deepMix, each } from '@antv/util';\nimport { lineSimplification } from '../../util/math';\nimport { getSplinePath } from '../../util/path';\nimport AreaParser from './main';\nimport { getGlobalTheme } from '../../theme';\nregisterShape('area', 'miniArea', {\n    draw: function (cfg, container) {\n        var opacity = cfg.style ? cfg.style.opacity : null;\n        var path = getPath(cfg, this, false);\n        var style = deepMix({}, {\n            lineJoin: 'round',\n            lineCap: 'round',\n        }, cfg.style);\n        var shape = container.addShape('path', {\n            attrs: {\n                path: path,\n                fill: parseGradient(cfg.color || getGlobalTheme().defaultColor),\n                opacity: opacity || 0.4,\n            },\n            style: style,\n        });\n        return shape;\n    },\n});\nregisterShape('area', 'miniAreaSmooth', {\n    draw: function (cfg, container) {\n        var opacity = cfg.style ? cfg.style.opacity : null;\n        var path = getPath(cfg, this, true);\n        var shape = container.addShape('path', {\n            attrs: {\n                path: path,\n                fill: parseGradient(cfg.color || getGlobalTheme().defaultColor),\n                opacity: opacity || 0.5,\n            },\n        });\n        return shape;\n    },\n});\nfunction getPath(cfg, shape, isSmooth) {\n    var constraint = [\n        [0, 0],\n        [1, 1],\n    ];\n    var topLinePoints = [];\n    var bottomLinePoints = [];\n    each(cfg.points, function (point) {\n        topLinePoints.push(point[1]);\n        bottomLinePoints.push(point[0]);\n    });\n    bottomLinePoints = shape.parsePoints(bottomLinePoints.reverse());\n    topLinePoints = lineSimplification(shape.parsePoints(topLinePoints));\n    var topPath = isSmooth ? getSplinePath(topLinePoints, false, constraint) : getStraightPath(topLinePoints);\n    var bottomPath = getStraightPath(bottomLinePoints);\n    bottomPath[0][0] = 'L';\n    var path = topPath.concat(bottomPath);\n    return path;\n}\nfunction getStraightPath(points) {\n    var path = [];\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        var flag = i === 0 ? 'M' : 'L';\n        path.push([flag, p.x, p.y]);\n    }\n    return path;\n}\nfunction parseGradient(color) {\n    return \"l(90) 0:\" + color + \" 1:#ffffff\";\n}\nvar MiniAreaParser = (function (_super) {\n    __extends(MiniAreaParser, _super);\n    function MiniAreaParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MiniAreaParser.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.parseShape();\n    };\n    MiniAreaParser.prototype.parseShape = function () {\n        var props = this.plot.options;\n        if (props.smooth) {\n            this.config.shape = { values: ['miniAreaSmooth'] };\n        }\n        else {\n            this.config.shape = { values: ['miniArea'] };\n        }\n    };\n    return MiniAreaParser;\n}(AreaParser));\nexport default MiniAreaParser;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/geoms/area/mini.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/geoms/area/mini.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\n/** 简化折线点 */\nimport { registerShape } from '../../dependents';\nimport { deepMix, each } from '@antv/util';\nimport { lineSimplification } from '../../util/math';\nimport { getSplinePath } from '../../util/path';\nimport AreaParser from './main';\nimport { getGlobalTheme } from '../../theme';\nregisterShape('area', 'miniArea', {\n    draw: function (cfg, container) {\n        var opacity = cfg.style ? cfg.style.opacity : null;\n        var path = getPath(cfg, this, false);\n        var style = deepMix({}, {\n            lineJoin: 'round',\n            lineCap: 'round',\n        }, cfg.style);\n        var shape = container.addShape('path', {\n            attrs: {\n                path: path,\n                fill: parseGradient(cfg.color || getGlobalTheme().defaultColor),\n                opacity: opacity || 0.4,\n            },\n            style: style,\n        });\n        return shape;\n    },\n});\nregisterShape('area', 'miniAreaSmooth', {\n    draw: function (cfg, container) {\n        var opacity = cfg.style ? cfg.style.opacity : null;\n        var path = getPath(cfg, this, true);\n        var shape = container.addShape('path', {\n            attrs: {\n                path: path,\n                fill: parseGradient(cfg.color || getGlobalTheme().defaultColor),\n                opacity: opacity || 0.5,\n            },\n        });\n        return shape;\n    },\n});\nfunction getPath(cfg, shape, isSmooth) {\n    var constraint = [\n        [0, 0],\n        [1, 1],\n    ];\n    var topLinePoints = [];\n    var bottomLinePoints = [];\n    each(cfg.points, function (point) {\n        topLinePoints.push(point[1]);\n        bottomLinePoints.push(point[0]);\n    });\n    bottomLinePoints = shape.parsePoints(bottomLinePoints.reverse());\n    topLinePoints = lineSimplification(shape.parsePoints(topLinePoints));\n    var topPath = isSmooth ? getSplinePath(topLinePoints, false, constraint) : getStraightPath(topLinePoints);\n    var bottomPath = getStraightPath(bottomLinePoints);\n    bottomPath[0][0] = 'L';\n    var path = topPath.concat(bottomPath);\n    return path;\n}\nfunction getStraightPath(points) {\n    var path = [];\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        var flag = i === 0 ? 'M' : 'L';\n        path.push([flag, p.x, p.y]);\n    }\n    return path;\n}\nfunction parseGradient(color) {\n    return \"l(90) 0:\" + color + \" 1:#ffffff\";\n}\nvar MiniAreaParser = /** @class */ (function (_super) {\n    __extends(MiniAreaParser, _super);\n    function MiniAreaParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MiniAreaParser.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.parseShape();\n    };\n    MiniAreaParser.prototype.parseShape = function () {\n        var props = this.plot.options;\n        if (props.smooth) {\n            this.config.shape = { values: ['miniAreaSmooth'] };\n        }\n        else {\n            this.config.shape = { values: ['miniArea'] };\n        }\n    };\n    return MiniAreaParser;\n}(AreaParser));\nexport default MiniAreaParser;\n//# sourceMappingURL=mini.js.map"]}]}