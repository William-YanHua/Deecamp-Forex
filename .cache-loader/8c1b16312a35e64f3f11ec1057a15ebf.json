{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\code-inline.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\code-inline.js","mtime":1516191690000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar whitespace = require('is-whitespace-character');\r\nvar locate = require('../locate/code-inline');\r\nmodule.exports = inlineCode;\r\ninlineCode.locator = locate;\r\nvar C_TICK = '`';\r\nfunction inlineCode(eat, value, silent) {\r\n    var length = value.length;\r\n    var index = 0;\r\n    var queue = '';\r\n    var tickQueue = '';\r\n    var contentQueue;\r\n    var subqueue;\r\n    var count;\r\n    var openingCount;\r\n    var subvalue;\r\n    var character;\r\n    var found;\r\n    var next;\r\n    while (index < length) {\r\n        if (value.charAt(index) !== C_TICK) {\r\n            break;\r\n        }\r\n        queue += C_TICK;\r\n        index++;\r\n    }\r\n    if (!queue) {\r\n        return;\r\n    }\r\n    subvalue = queue;\r\n    openingCount = index;\r\n    queue = '';\r\n    next = value.charAt(index);\r\n    count = 0;\r\n    while (index < length) {\r\n        character = next;\r\n        next = value.charAt(index + 1);\r\n        if (character === C_TICK) {\r\n            count++;\r\n            tickQueue += character;\r\n        }\r\n        else {\r\n            count = 0;\r\n            queue += character;\r\n        }\r\n        if (count && next !== C_TICK) {\r\n            if (count === openingCount) {\r\n                subvalue += queue + tickQueue;\r\n                found = true;\r\n                break;\r\n            }\r\n            queue += tickQueue;\r\n            tickQueue = '';\r\n        }\r\n        index++;\r\n    }\r\n    if (!found) {\r\n        if (openingCount % 2 !== 0) {\r\n            return;\r\n        }\r\n        queue = '';\r\n    }\r\n    if (silent) {\r\n        return true;\r\n    }\r\n    contentQueue = '';\r\n    subqueue = '';\r\n    length = queue.length;\r\n    index = -1;\r\n    while (++index < length) {\r\n        character = queue.charAt(index);\r\n        if (whitespace(character)) {\r\n            subqueue += character;\r\n            continue;\r\n        }\r\n        if (subqueue) {\r\n            if (contentQueue) {\r\n                contentQueue += subqueue;\r\n            }\r\n            subqueue = '';\r\n        }\r\n        contentQueue += character;\r\n    }\r\n    return eat(subvalue)({\r\n        type: 'inlineCode',\r\n        value: contentQueue\r\n    });\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\code-inline.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\code-inline.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/code-inline');\n\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\n\nvar C_TICK = '`';\n\n/* Tokenise inline code. */\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var tickQueue = '';\n  var contentQueue;\n  var subqueue;\n  var count;\n  var openingCount;\n  var subvalue;\n  var character;\n  var found;\n  var next;\n\n  while (index < length) {\n    if (value.charAt(index) !== C_TICK) {\n      break;\n    }\n\n    queue += C_TICK;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  subvalue = queue;\n  openingCount = index;\n  queue = '';\n  next = value.charAt(index);\n  count = 0;\n\n  while (index < length) {\n    character = next;\n    next = value.charAt(index + 1);\n\n    if (character === C_TICK) {\n      count++;\n      tickQueue += character;\n    } else {\n      count = 0;\n      queue += character;\n    }\n\n    if (count && next !== C_TICK) {\n      if (count === openingCount) {\n        subvalue += queue + tickQueue;\n        found = true;\n        break;\n      }\n\n      queue += tickQueue;\n      tickQueue = '';\n    }\n\n    index++;\n  }\n\n  if (!found) {\n    if (openingCount % 2 !== 0) {\n      return;\n    }\n\n    queue = '';\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  contentQueue = '';\n  subqueue = '';\n  length = queue.length;\n  index = -1;\n\n  while (++index < length) {\n    character = queue.charAt(index);\n\n    if (whitespace(character)) {\n      subqueue += character;\n      continue;\n    }\n\n    if (subqueue) {\n      if (contentQueue) {\n        contentQueue += subqueue;\n      }\n\n      subqueue = '';\n    }\n\n    contentQueue += character;\n  }\n\n  return eat(subvalue)({\n    type: 'inlineCode',\n    value: contentQueue\n  });\n}\n"]}]}