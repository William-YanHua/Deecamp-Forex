{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\scale\\lib\\auto\\number.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\scale\\lib\\auto\\number.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var isNil = require('@antv/util/lib/type/is-nil');\r\nvar isNumber = require('@antv/util/lib/type/is-number');\r\nvar AutoUtil = require('./util');\r\nvar MIN_COUNT = 5;\r\nvar MAX_COUNT = 7;\r\nvar SNAP_COUNT_ARRAY = [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10];\r\nvar SNAP_ARRAY = [0, 1, 2, 4, 5, 10];\r\nmodule.exports = function (info) {\r\n    var min = info.min;\r\n    var max = info.max;\r\n    var interval = info.interval;\r\n    var minTickInterval = info.minTickInterval;\r\n    var ticks = [];\r\n    var minCount = info.minCount || MIN_COUNT;\r\n    var maxCount = info.maxCount || MAX_COUNT;\r\n    var isFixedCount = minCount === maxCount;\r\n    var minLimit = isNil(info.minLimit) ? -Infinity : info.minLimit;\r\n    var maxLimit = isNil(info.maxLimit) ? Infinity : info.maxLimit;\r\n    var avgCount = (minCount + maxCount) / 2;\r\n    var count = avgCount;\r\n    var snapArray = info.snapArray ? info.snapArray : isFixedCount ? SNAP_COUNT_ARRAY : SNAP_ARRAY;\r\n    if (min === minLimit && max === maxLimit && isFixedCount) {\r\n        interval = (max - min) / (count - 1);\r\n    }\r\n    if (isNil(min)) {\r\n        min = 0;\r\n    }\r\n    if (isNil(max)) {\r\n        max = 0;\r\n    }\r\n    if (max === min) {\r\n        if (min === 0) {\r\n            max = 1;\r\n        }\r\n        else {\r\n            if (min > 0) {\r\n                min = 0;\r\n            }\r\n            else {\r\n                max = 0;\r\n            }\r\n        }\r\n        if (max - min < 5 && !interval && max - min >= 1) {\r\n            interval = 1;\r\n        }\r\n    }\r\n    if (isNil(interval)) {\r\n        var temp = (max - min) / (avgCount - 1);\r\n        interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');\r\n        if (maxCount !== minCount) {\r\n            count = parseInt((max - min) / interval, 10);\r\n            if (count > maxCount) {\r\n                count = maxCount;\r\n            }\r\n            if (count < minCount) {\r\n                count = minCount;\r\n            }\r\n            interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');\r\n        }\r\n    }\r\n    if (isNumber(minTickInterval) && interval < minTickInterval) {\r\n        interval = minTickInterval;\r\n    }\r\n    if (info.interval || maxCount !== minCount) {\r\n        max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit);\r\n        min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit);\r\n        count = Math.round((max - min) / interval);\r\n        min = AutoUtil.fixedBase(min, interval);\r\n        max = AutoUtil.fixedBase(max, interval);\r\n    }\r\n    else {\r\n        avgCount = parseInt(avgCount, 10);\r\n        var avg = (max + min) / 2;\r\n        var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');\r\n        var sideCount = Math.floor((avgCount - 2) / 2);\r\n        var maxTick = avgTick + sideCount * interval;\r\n        var minTick;\r\n        if (avgCount % 2 === 0) {\r\n            minTick = avgTick - sideCount * interval;\r\n        }\r\n        else {\r\n            minTick = avgTick - (sideCount + 1) * interval;\r\n        }\r\n        if (maxTick < max) {\r\n            maxTick = maxTick + interval;\r\n        }\r\n        if (minTick > min) {\r\n            minTick = minTick - interval;\r\n        }\r\n        max = AutoUtil.fixedBase(maxTick, interval);\r\n        min = AutoUtil.fixedBase(minTick, interval);\r\n    }\r\n    max = Math.min(max, maxLimit);\r\n    min = Math.max(min, minLimit);\r\n    ticks.push(min);\r\n    for (var i = 1; i < count; i++) {\r\n        var tickValue = AutoUtil.fixedBase(interval * i + min, interval);\r\n        if (tickValue < max) {\r\n            ticks.push(tickValue);\r\n        }\r\n    }\r\n    if (ticks[ticks.length - 1] < max) {\r\n        ticks.push(max);\r\n    }\r\n    return {\r\n        min: min,\r\n        max: max,\r\n        interval: interval,\r\n        count: count,\r\n        ticks: ticks\r\n    };\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\scale\\lib\\auto\\number.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\scale\\lib\\auto\\number.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview 自动计算数字坐标轴\n * @author dxq613@gmail.com\n */\nvar isNil = require('@antv/util/lib/type/is-nil');\n\nvar isNumber = require('@antv/util/lib/type/is-number');\n\nvar AutoUtil = require('./util');\n\nvar MIN_COUNT = 5;\nvar MAX_COUNT = 7;\nvar SNAP_COUNT_ARRAY = [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10];\nvar SNAP_ARRAY = [0, 1, 2, 4, 5, 10];\n\nmodule.exports = function (info) {\n  var min = info.min;\n  var max = info.max;\n  var interval = info.interval;\n  var minTickInterval = info.minTickInterval;\n  var ticks = [];\n  var minCount = info.minCount || MIN_COUNT;\n  var maxCount = info.maxCount || MAX_COUNT;\n  var isFixedCount = minCount === maxCount; // 是否限定死了个数\n\n  var minLimit = isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值\n\n  var maxLimit = isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值\n\n  var avgCount = (minCount + maxCount) / 2;\n  var count = avgCount; // 用户传入的逼近数组\n\n  var snapArray = info.snapArray ? info.snapArray : isFixedCount ? SNAP_COUNT_ARRAY : SNAP_ARRAY; // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分\n\n  if (min === minLimit && max === maxLimit && isFixedCount) {\n    interval = (max - min) / (count - 1);\n  }\n\n  if (isNil(min)) {\n    min = 0;\n  }\n\n  if (isNil(max)) {\n    max = 0;\n  }\n\n  if (max === min) {\n    if (min === 0) {\n      max = 1;\n    } else {\n      if (min > 0) {\n        min = 0;\n      } else {\n        max = 0;\n      }\n    }\n\n    if (max - min < 5 && !interval && max - min >= 1) {\n      interval = 1;\n    }\n  }\n\n  if (isNil(interval)) {\n    // 计算间距\n    var temp = (max - min) / (avgCount - 1);\n    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');\n\n    if (maxCount !== minCount) {\n      count = parseInt((max - min) / interval, 10);\n\n      if (count > maxCount) {\n        count = maxCount;\n      }\n\n      if (count < minCount) {\n        count = minCount;\n      } // 不确定tick的个数时，使得tick偏小\n\n\n      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');\n    }\n  } // interval should not be less than minTickInterval\n\n\n  if (isNumber(minTickInterval) && interval < minTickInterval) {\n    interval = minTickInterval;\n  }\n\n  if (info.interval || maxCount !== minCount) {\n    // 校正 max 和 min\n    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近\n\n    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近\n\n    count = Math.round((max - min) / interval);\n    min = AutoUtil.fixedBase(min, interval);\n    max = AutoUtil.fixedBase(max, interval);\n  } else {\n    avgCount = parseInt(avgCount, 10); // 取整\n\n    var avg = (max + min) / 2;\n    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');\n    var sideCount = Math.floor((avgCount - 2) / 2);\n    var maxTick = avgTick + sideCount * interval;\n    var minTick;\n\n    if (avgCount % 2 === 0) {\n      minTick = avgTick - sideCount * interval;\n    } else {\n      minTick = avgTick - (sideCount + 1) * interval;\n    }\n\n    if (maxTick < max) {\n      maxTick = maxTick + interval;\n    }\n\n    if (minTick > min) {\n      minTick = minTick - interval;\n    }\n\n    max = AutoUtil.fixedBase(maxTick, interval);\n    min = AutoUtil.fixedBase(minTick, interval);\n  }\n\n  max = Math.min(max, maxLimit);\n  min = Math.max(min, minLimit);\n  ticks.push(min);\n\n  for (var i = 1; i < count; i++) {\n    var tickValue = AutoUtil.fixedBase(interval * i + min, interval);\n\n    if (tickValue < max) {\n      ticks.push(tickValue);\n    }\n  }\n\n  if (ticks[ticks.length - 1] < max) {\n    ticks.push(max);\n  }\n\n  return {\n    min: min,\n    max: max,\n    interval: interval,\n    count: count,\n    ticks: ticks\n  };\n};"]}]}