{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\paragraph.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\paragraph.js","mtime":1516191690000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar trim = require('trim');\r\nvar decimal = require('is-decimal');\r\nvar trimTrailingLines = require('trim-trailing-lines');\r\nvar interrupt = require('../util/interrupt');\r\nmodule.exports = paragraph;\r\nvar C_NEWLINE = '\\n';\r\nvar C_TAB = '\\t';\r\nvar C_SPACE = ' ';\r\nvar TAB_SIZE = 4;\r\nfunction paragraph(eat, value, silent) {\r\n    var self = this;\r\n    var settings = self.options;\r\n    var commonmark = settings.commonmark;\r\n    var gfm = settings.gfm;\r\n    var tokenizers = self.blockTokenizers;\r\n    var interruptors = self.interruptParagraph;\r\n    var index = value.indexOf(C_NEWLINE);\r\n    var length = value.length;\r\n    var position;\r\n    var subvalue;\r\n    var character;\r\n    var size;\r\n    var now;\r\n    while (index < length) {\r\n        if (index === -1) {\r\n            index = length;\r\n            break;\r\n        }\r\n        if (value.charAt(index + 1) === C_NEWLINE) {\r\n            break;\r\n        }\r\n        if (commonmark) {\r\n            size = 0;\r\n            position = index + 1;\r\n            while (position < length) {\r\n                character = value.charAt(position);\r\n                if (character === C_TAB) {\r\n                    size = TAB_SIZE;\r\n                    break;\r\n                }\r\n                else if (character === C_SPACE) {\r\n                    size++;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n                position++;\r\n            }\r\n            if (size >= TAB_SIZE) {\r\n                index = value.indexOf(C_NEWLINE, index + 1);\r\n                continue;\r\n            }\r\n        }\r\n        subvalue = value.slice(index + 1);\r\n        if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\r\n            break;\r\n        }\r\n        if (tokenizers.list.call(self, eat, subvalue, true) &&\r\n            (self.inList ||\r\n                commonmark ||\r\n                (gfm && !decimal(trim.left(subvalue).charAt(0))))) {\r\n            break;\r\n        }\r\n        position = index;\r\n        index = value.indexOf(C_NEWLINE, index + 1);\r\n        if (index !== -1 && trim(value.slice(position, index)) === '') {\r\n            index = position;\r\n            break;\r\n        }\r\n    }\r\n    subvalue = value.slice(0, index);\r\n    if (trim(subvalue) === '') {\r\n        eat(subvalue);\r\n        return null;\r\n    }\r\n    if (silent) {\r\n        return true;\r\n    }\r\n    now = eat.now();\r\n    subvalue = trimTrailingLines(subvalue);\r\n    return eat(subvalue)({\r\n        type: 'paragraph',\r\n        children: self.tokenizeInline(subvalue, now)\r\n    });\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\paragraph.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\paragraph.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nvar trim = require('trim');\nvar decimal = require('is-decimal');\nvar trimTrailingLines = require('trim-trailing-lines');\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = paragraph;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\n\nvar TAB_SIZE = 4;\n\n/* Tokenise paragraph. */\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var gfm = settings.gfm;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(C_NEWLINE);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n\n  while (index < length) {\n    /* Eat everything if thereâ€™s no following newline. */\n    if (index === -1) {\n      index = length;\n      break;\n    }\n\n    /* Stop if the next character is NEWLINE. */\n    if (value.charAt(index + 1) === C_NEWLINE) {\n      break;\n    }\n\n    /* In commonmark-mode, following indented lines\n     * are part of the paragraph. */\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n\n      while (position < length) {\n        character = value.charAt(position);\n\n        if (character === C_TAB) {\n          size = TAB_SIZE;\n          break;\n        } else if (character === C_SPACE) {\n          size++;\n        } else {\n          break;\n        }\n\n        position++;\n      }\n\n      if (size >= TAB_SIZE) {\n        index = value.indexOf(C_NEWLINE, index + 1);\n        continue;\n      }\n    }\n\n    subvalue = value.slice(index + 1);\n\n    /* Check if the following code contains a possible\n     * block. */\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n\n    /* Break if the following line starts a list, when\n     * already in a list, or when in commonmark, or when\n     * in gfm mode and the bullet is *not* numeric. */\n    if (\n      tokenizers.list.call(self, eat, subvalue, true) &&\n      (\n        self.inList ||\n        commonmark ||\n        (gfm && !decimal(trim.left(subvalue).charAt(0)))\n      )\n    ) {\n      break;\n    }\n\n    position = index;\n    index = value.indexOf(C_NEWLINE, index + 1);\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n\n  if (trim(subvalue) === '') {\n    eat(subvalue);\n\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}\n"]}]}