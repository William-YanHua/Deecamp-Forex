{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\Circle.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\Circle.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { RedBlackNode } from \"./RedBlackTree\";\r\nimport { circles, epsilon2 } from \"./Diagram\";\r\nvar circlePool = [];\r\nexport var firstCircle;\r\nfunction Circle() {\r\n    RedBlackNode(this);\r\n    this.x =\r\n        this.y =\r\n            this.arc =\r\n                this.site =\r\n                    this.cy = null;\r\n}\r\nexport function attachCircle(arc) {\r\n    var lArc = arc.P, rArc = arc.N;\r\n    if (!lArc || !rArc)\r\n        return;\r\n    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;\r\n    if (lSite === rSite)\r\n        return;\r\n    var bx = cSite[0], by = cSite[1], ax = lSite[0] - bx, ay = lSite[1] - by, cx = rSite[0] - bx, cy = rSite[1] - by;\r\n    var d = 2 * (ax * cy - ay * cx);\r\n    if (d >= -epsilon2)\r\n        return;\r\n    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d;\r\n    var circle = circlePool.pop() || new Circle;\r\n    circle.arc = arc;\r\n    circle.site = cSite;\r\n    circle.x = x + bx;\r\n    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y);\r\n    arc.circle = circle;\r\n    var before = null, node = circles._;\r\n    while (node) {\r\n        if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\r\n            if (node.L)\r\n                node = node.L;\r\n            else {\r\n                before = node.P;\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            if (node.R)\r\n                node = node.R;\r\n            else {\r\n                before = node;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    circles.insert(before, circle);\r\n    if (!before)\r\n        firstCircle = circle;\r\n}\r\nexport function detachCircle(arc) {\r\n    var circle = arc.circle;\r\n    if (circle) {\r\n        if (!circle.P)\r\n            firstCircle = circle.N;\r\n        circles.remove(circle);\r\n        circlePool.push(circle);\r\n        RedBlackNode(circle);\r\n        arc.circle = null;\r\n    }\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\Circle.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\Circle.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAC,OAAO,EAAE,QAAQ,EAAC,MAAM,WAAW,CAAC;AAE5C,IAAI,UAAU,GAAG,EAAE,CAAC;AAEpB,MAAM,CAAC,IAAI,WAAW,CAAC;AAEvB,SAAS,MAAM;IACb,YAAY,CAAC,IAAI,CAAC,CAAC;IACnB,IAAI,CAAC,CAAC;QACN,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,GAAG;gBACR,IAAI,CAAC,IAAI;oBACT,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,GAAG;IAC9B,IAAI,IAAI,GAAG,GAAG,CAAC,CAAC,EACZ,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;IAEjB,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;QAAE,OAAO;IAE3B,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EACjB,KAAK,GAAG,GAAG,CAAC,IAAI,EAChB,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;IAEtB,IAAI,KAAK,KAAK,KAAK;QAAE,OAAO;IAE5B,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EACb,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,EACb,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,EAClB,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,EAClB,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,EAClB,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAEvB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAChC,IAAI,CAAC,IAAI,CAAC,QAAQ;QAAE,OAAO;IAE3B,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EACtB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EACtB,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAC3B,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;IAEhC,IAAI,MAAM,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,IAAI,MAAM,CAAC;IAC5C,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;IACjB,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAClB,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAE3D,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;IAEpB,IAAI,MAAM,GAAG,IAAI,EACb,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;IAErB,OAAO,IAAI,EAAE;QACX,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;YACpE,IAAI,IAAI,CAAC,CAAC;gBAAE,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;iBACrB;gBAAE,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;gBAAC,MAAM;aAAE;SACjC;aAAM;YACL,IAAI,IAAI,CAAC,CAAC;gBAAE,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;iBACrB;gBAAE,MAAM,GAAG,IAAI,CAAC;gBAAC,MAAM;aAAE;SAC/B;KACF;IAED,OAAO,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC/B,IAAI,CAAC,MAAM;QAAE,WAAW,GAAG,MAAM,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,GAAG;IAC9B,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IACxB,IAAI,MAAM,EAAE;QACV,IAAI,CAAC,MAAM,CAAC,CAAC;YAAE,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACvB,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxB,YAAY,CAAC,MAAM,CAAC,CAAC;QACrB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;KACnB;AACH,CAAC","sourcesContent":["import {RedBlackNode} from \"./RedBlackTree\";\nimport {circles, epsilon2} from \"./Diagram\";\n\nvar circlePool = [];\n\nexport var firstCircle;\n\nfunction Circle() {\n  RedBlackNode(this);\n  this.x =\n  this.y =\n  this.arc =\n  this.site =\n  this.cy = null;\n}\n\nexport function attachCircle(arc) {\n  var lArc = arc.P,\n      rArc = arc.N;\n\n  if (!lArc || !rArc) return;\n\n  var lSite = lArc.site,\n      cSite = arc.site,\n      rSite = rArc.site;\n\n  if (lSite === rSite) return;\n\n  var bx = cSite[0],\n      by = cSite[1],\n      ax = lSite[0] - bx,\n      ay = lSite[1] - by,\n      cx = rSite[0] - bx,\n      cy = rSite[1] - by;\n\n  var d = 2 * (ax * cy - ay * cx);\n  if (d >= -epsilon2) return;\n\n  var ha = ax * ax + ay * ay,\n      hc = cx * cx + cy * cy,\n      x = (cy * ha - ay * hc) / d,\n      y = (ax * hc - cx * ha) / d;\n\n  var circle = circlePool.pop() || new Circle;\n  circle.arc = arc;\n  circle.site = cSite;\n  circle.x = x + bx;\n  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom\n\n  arc.circle = circle;\n\n  var before = null,\n      node = circles._;\n\n  while (node) {\n    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {\n      if (node.L) node = node.L;\n      else { before = node.P; break; }\n    } else {\n      if (node.R) node = node.R;\n      else { before = node; break; }\n    }\n  }\n\n  circles.insert(before, circle);\n  if (!before) firstCircle = circle;\n}\n\nexport function detachCircle(arc) {\n  var circle = arc.circle;\n  if (circle) {\n    if (!circle.P) firstCircle = circle.N;\n    circles.remove(circle);\n    circlePool.push(circle);\n    RedBlackNode(circle);\n    arc.circle = null;\n  }\n}\n"]}]}