{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_baseMergeDeep.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_baseMergeDeep.js","mtime":1517704208000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assignMergeValue = require('./_assignMergeValue'), cloneBuffer = require('./_cloneBuffer'), cloneTypedArray = require('./_cloneTypedArray'), copyArray = require('./_copyArray'), initCloneObject = require('./_initCloneObject'), isArguments = require('./isArguments'), isArray = require('./isArray'), isArrayLikeObject = require('./isArrayLikeObject'), isBuffer = require('./isBuffer'), isFunction = require('./isFunction'), isObject = require('./isObject'), isPlainObject = require('./isPlainObject'), isTypedArray = require('./isTypedArray'), safeGet = require('./_safeGet'), toPlainObject = require('./toPlainObject');\r\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\r\n    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);\r\n    if (stacked) {\r\n        assignMergeValue(object, key, stacked);\r\n        return;\r\n    }\r\n    var newValue = customizer\r\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\r\n        : undefined;\r\n    var isCommon = newValue === undefined;\r\n    if (isCommon) {\r\n        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);\r\n        newValue = srcValue;\r\n        if (isArr || isBuff || isTyped) {\r\n            if (isArray(objValue)) {\r\n                newValue = objValue;\r\n            }\r\n            else if (isArrayLikeObject(objValue)) {\r\n                newValue = copyArray(objValue);\r\n            }\r\n            else if (isBuff) {\r\n                isCommon = false;\r\n                newValue = cloneBuffer(srcValue, true);\r\n            }\r\n            else if (isTyped) {\r\n                isCommon = false;\r\n                newValue = cloneTypedArray(srcValue, true);\r\n            }\r\n            else {\r\n                newValue = [];\r\n            }\r\n        }\r\n        else if (isPlainObject(srcValue) || isArguments(srcValue)) {\r\n            newValue = objValue;\r\n            if (isArguments(objValue)) {\r\n                newValue = toPlainObject(objValue);\r\n            }\r\n            else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\r\n                newValue = initCloneObject(srcValue);\r\n            }\r\n        }\r\n        else {\r\n            isCommon = false;\r\n        }\r\n    }\r\n    if (isCommon) {\r\n        stack.set(srcValue, newValue);\r\n        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\r\n        stack['delete'](srcValue);\r\n    }\r\n    assignMergeValue(object, key, newValue);\r\n}\r\nmodule.exports = baseMergeDeep;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_baseMergeDeep.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_baseMergeDeep.js"],"names":[],"mappings":"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","sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"]}]}