{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_memoizeCapped.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_memoizeCapped.js","mtime":1517704209000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var memoize = require('./memoize');\r\nvar MAX_MEMOIZE_SIZE = 500;\r\nfunction memoizeCapped(func) {\r\n    var result = memoize(func, function (key) {\r\n        if (cache.size === MAX_MEMOIZE_SIZE) {\r\n            cache.clear();\r\n        }\r\n        return key;\r\n    });\r\n    var cache = result.cache;\r\n    return result;\r\n}\r\nmodule.exports = memoizeCapped;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_memoizeCapped.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\lodash\\_memoizeCapped.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAGnC,IAAI,gBAAgB,GAAG,GAAG,CAAC;AAU3B,SAAS,aAAa,CAAC,IAAI;IACzB,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,EAAE,UAAS,GAAG;QACrC,IAAI,KAAK,CAAC,IAAI,KAAK,gBAAgB,EAAE;YACnC,KAAK,CAAC,KAAK,EAAE,CAAC;SACf;QACD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;IAEH,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IACzB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC","sourcesContent":["var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n"]}]}