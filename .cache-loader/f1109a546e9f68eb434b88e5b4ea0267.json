{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/label/pie-labels.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/label/pie-labels.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Util = require('../../util');\nvar PolarLabels = require('./polar-labels');\nvar PathUtil = require('../util/path');\nvar Global = require('../../global');\nvar MARGIN = 5;\nfunction getEndPoint(center, angle, r) {\n    return {\n        x: center.x + r * Math.cos(angle),\n        y: center.y + r * Math.sin(angle)\n    };\n}\nfunction antiCollision(labels, lineHeight, plotRange, center, isRight) {\n    var overlapping = true;\n    var start = plotRange.start;\n    var end = plotRange.end;\n    var startY = Math.min(start.y, end.y);\n    var totalHeight = Math.abs(start.y - end.y);\n    var i;\n    var maxY = 0;\n    var minY = Number.MIN_VALUE;\n    var boxes = labels.map(function (label) {\n        if (label.y > maxY) {\n            maxY = label.y;\n        }\n        if (label.y < minY) {\n            minY = label.y;\n        }\n        return {\n            size: lineHeight,\n            targets: [label.y - startY]\n        };\n    });\n    minY -= startY;\n    if (maxY - startY > totalHeight) {\n        totalHeight = maxY - startY;\n    }\n    while (overlapping) {\n        boxes.forEach(function (box) {\n            var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n            box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);\n        });\n        overlapping = false;\n        i = boxes.length;\n        while (i--) {\n            if (i > 0) {\n                var previousBox = boxes[i - 1];\n                var box = boxes[i];\n                if (previousBox.pos + previousBox.size > box.pos) {\n                    previousBox.size += box.size;\n                    previousBox.targets = previousBox.targets.concat(box.targets);\n                    if (previousBox.pos + previousBox.size > totalHeight) {\n                        previousBox.pos = totalHeight - previousBox.size;\n                    }\n                    boxes.splice(i, 1);\n                    overlapping = true;\n                }\n            }\n        }\n    }\n    i = 0;\n    boxes.forEach(function (b) {\n        var posInCompositeBox = startY + lineHeight / 2;\n        b.targets.forEach(function () {\n            labels[i].y = b.pos + posInCompositeBox;\n            posInCompositeBox += lineHeight;\n            i++;\n        });\n    });\n    labels.forEach(function (label) {\n        var rPow2 = label.r * label.r;\n        var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n        if (rPow2 < dyPow2) {\n            label.x = center.x;\n        }\n        else {\n            var dx = Math.sqrt(rPow2 - dyPow2);\n            if (!isRight) {\n                label.x = center.x - dx;\n            }\n            else {\n                label.x = center.x + dx;\n            }\n        }\n    });\n}\nvar PieLabels = function PieLabels(cfg) {\n    PieLabels.superclass.constructor.call(this, cfg);\n};\nUtil.extend(PieLabels, PolarLabels);\nUtil.augment(PieLabels, {\n    getDefaultCfg: function getDefaultCfg() {\n        return {\n            label: Global.thetaLabels\n        };\n    },\n    getDefaultOffset: function getDefaultOffset(point) {\n        return point.offset || 0;\n    },\n    adjustItems: function adjustItems(items) {\n        var self = this;\n        var offset = items[0] ? items[0].offset : 0;\n        if (offset > 0) {\n            items = self._distribute(items, offset);\n        }\n        return PieLabels.superclass.adjustItems.call(this, items);\n    },\n    _distribute: function _distribute(labels, offset) {\n        var self = this;\n        var coord = self.get('coord');\n        var radius = coord.getRadius();\n        var lineHeight = self.get('label').labelHeight;\n        var center = coord.getCenter();\n        var totalR = radius + offset;\n        var totalHeight = totalR * 2 + lineHeight * 2;\n        var plotRange = {\n            start: coord.start,\n            end: coord.end\n        };\n        var geom = self.get('geom');\n        if (geom) {\n            var view = geom.get('view');\n            plotRange = view.getViewRegion();\n        }\n        var halves = [[],\n            []\n        ];\n        labels.forEach(function (label) {\n            if (!label) {\n                return;\n            }\n            if (label.textAlign === 'right') {\n                halves[0].push(label);\n            }\n            else {\n                halves[1].push(label);\n            }\n        });\n        halves.forEach(function (half, index) {\n            var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);\n            if (half.length > maxLabelsCountForOneSide) {\n                half.sort(function (a, b) {\n                    return b['..percent'] - a['..percent'];\n                });\n                half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n            }\n            half.sort(function (a, b) {\n                return a.y - b.y;\n            });\n            antiCollision(half, lineHeight, plotRange, center, index);\n        });\n        return halves[0].concat(halves[1]);\n    },\n    lineToLabel: function lineToLabel(label) {\n        var self = this;\n        var coord = self.get('coord');\n        var r = coord.getRadius();\n        var distance = label.offset;\n        var angle = label.orignAngle || label.angle;\n        var center = coord.getCenter();\n        var start = getEndPoint(center, angle, r + MARGIN / 2);\n        var inner = getEndPoint(center, angle, r + distance / 2);\n        if (!label.labelLine) {\n            label.labelLine = self.get('label').labelLine || {};\n        }\n        label.labelLine.path = ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(',');\n    },\n    getLabelRotate: function getLabelRotate(angle, offset) {\n        var rotate;\n        if (offset < 0) {\n            rotate = angle * 180 / Math.PI;\n            if (rotate > 90) {\n                rotate = rotate - 180;\n            }\n            if (rotate < -90) {\n                rotate = rotate + 180;\n            }\n        }\n        return rotate / 180 * Math.PI;\n    },\n    getLabelAlign: function getLabelAlign(point) {\n        var self = this;\n        var coord = self.get('coord');\n        var center = coord.getCenter();\n        var align;\n        if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n            align = 'left';\n        }\n        else {\n            align = 'right';\n        }\n        var offset = self.getDefaultOffset(point);\n        if (offset <= 0) {\n            if (align === 'right') {\n                align = 'left';\n            }\n            else {\n                align = 'right';\n            }\n        }\n        return align;\n    },\n    getArcPoint: function getArcPoint(point) {\n        return point;\n    },\n    getPointAngle: function getPointAngle(point) {\n        var self = this;\n        var coord = self.get('coord');\n        var startPoint = {\n            x: Util.isArray(point.x) ? point.x[0] : point.x,\n            y: point.y[0]\n        };\n        self.transLabelPoint(startPoint);\n        var endPoint = {\n            x: Util.isArray(point.x) ? point.x[1] : point.x,\n            y: point.y[1]\n        };\n        self.transLabelPoint(endPoint);\n        var angle;\n        var startAngle = PathUtil.getPointAngle(coord, startPoint);\n        if (point.points && point.points[0].y === point.points[1].y) {\n            angle = startAngle;\n        }\n        else {\n            var endAngle = PathUtil.getPointAngle(coord, endPoint);\n            if (startAngle >= endAngle) {\n                endAngle = endAngle + Math.PI * 2;\n            }\n            angle = startAngle + (endAngle - startAngle) / 2;\n        }\n        return angle;\n    },\n    getCirclePoint: function getCirclePoint(angle, offset) {\n        var self = this;\n        var coord = self.get('coord');\n        var center = coord.getCenter();\n        var r = coord.getRadius() + offset;\n        var point = getEndPoint(center, angle, r);\n        point.angle = angle;\n        point.r = r;\n        return point;\n    }\n});\nmodule.exports = PieLabels;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/label/pie-labels.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/label/pie-labels.js"],"names":[],"mappings":"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","sourcesContent":["var Util = require('../../util');\n\nvar PolarLabels = require('./polar-labels');\n\nvar PathUtil = require('../util/path');\n\nvar Global = require('../../global');\n\nvar MARGIN = 5;\n\nfunction getEndPoint(center, angle, r) {\n  return {\n    x: center.x + r * Math.cos(angle),\n    y: center.y + r * Math.sin(angle)\n  };\n}\n\nfunction antiCollision(labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  var overlapping = true;\n  var start = plotRange.start;\n  var end = plotRange.end;\n  var startY = Math.min(start.y, end.y);\n  var totalHeight = Math.abs(start.y - end.y);\n  var i;\n  var maxY = 0;\n  var minY = Number.MIN_VALUE;\n  var boxes = labels.map(function (label) {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n\n    if (label.y < minY) {\n      minY = label.y;\n    }\n\n    return {\n      size: lineHeight,\n      targets: [label.y - startY]\n    };\n  });\n  minY -= startY;\n\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach(function (box) {\n      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size); // box.pos = Math.max(0, target - box.size / 2);\n    }); // detect overlapping and join boxes\n\n    overlapping = false;\n    i = boxes.length;\n\n    while (i--) {\n      if (i > 0) {\n        var previousBox = boxes[i - 1];\n        var box = boxes[i];\n\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets); // overflow, shift up\n\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n\n          boxes.splice(i, 1); // removing box\n\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0; // step 4: normalize y and adjust x\n\n  boxes.forEach(function (b) {\n    var posInCompositeBox = startY + lineHeight / 2; // middle of the label\n\n    b.targets.forEach(function () {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  }); // (x - cx)^2 + (y - cy)^2 = totalR^2\n\n  labels.forEach(function (label) {\n    var rPow2 = label.r * label.r;\n    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      var dx = Math.sqrt(rPow2 - dyPow2);\n\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    }\n  });\n}\n\nvar PieLabels = function PieLabels(cfg) {\n  PieLabels.superclass.constructor.call(this, cfg);\n};\n\nUtil.extend(PieLabels, PolarLabels);\nUtil.augment(PieLabels, {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      label: Global.thetaLabels\n    };\n  },\n  getDefaultOffset: function getDefaultOffset(point) {\n    return point.offset || 0;\n  },\n\n  /**\n   * @protected\n   * to avoid overlapping\n   * @param {Array} items labels to be placed\n   * @return {Array} items\n   */\n  adjustItems: function adjustItems(items) {\n    var self = this;\n    var offset = items[0] ? items[0].offset : 0;\n\n    if (offset > 0) {\n      items = self._distribute(items, offset);\n    }\n\n    return PieLabels.superclass.adjustItems.call(this, items);\n  },\n\n  /**\n   * @private\n   * distribute labels\n   * @param {Array} labels labels\n   * @param {Number} offset offset\n   * @return {Array} labels\n   */\n  _distribute: function _distribute(labels, offset) {\n    var self = this;\n    var coord = self.get('coord');\n    var radius = coord.getRadius();\n    var lineHeight = self.get('label').labelHeight;\n    var center = coord.getCenter();\n    var totalR = radius + offset;\n    var totalHeight = totalR * 2 + lineHeight * 2;\n    var plotRange = {\n      start: coord.start,\n      end: coord.end\n    };\n    var geom = self.get('geom');\n\n    if (geom) {\n      var view = geom.get('view');\n      plotRange = view.getViewRegion();\n    } // step 1: separate labels\n\n\n    var halves = [[], // left\n    [] // right\n    ];\n    labels.forEach(function (label) {\n      if (!label) {\n        return;\n      }\n\n      if (label.textAlign === 'right') {\n        // left\n        halves[0].push(label);\n      } else {\n        // right or center will be put on the right side\n        halves[1].push(label);\n      }\n    });\n    halves.forEach(function (half, index) {\n      // step 2: reduce labels\n      var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);\n\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort(function (a, b) {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      } // step 3: distribute position (x and y)\n\n\n      half.sort(function (a, b) {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n      antiCollision(half, lineHeight, plotRange, center, index);\n    });\n    return halves[0].concat(halves[1]);\n  },\n  // 连接线\n  lineToLabel: function lineToLabel(label) {\n    var self = this;\n    var coord = self.get('coord');\n    var r = coord.getRadius();\n    var distance = label.offset;\n    var angle = label.orignAngle || label.angle;\n    var center = coord.getCenter();\n    var start = getEndPoint(center, angle, r + MARGIN / 2);\n    var inner = getEndPoint(center, angle, r + distance / 2);\n\n    if (!label.labelLine) {\n      label.labelLine = self.get('label').labelLine || {};\n    }\n\n    label.labelLine.path = ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(',');\n  },\n\n  /**\n   * @protected\n   * get rotation for label\n   * @param {Number} angle angle\n   * @param {Number} offset offset\n   * @return {Number} rotate\n   */\n  getLabelRotate: function getLabelRotate(angle, offset) {\n    var rotate;\n\n    if (offset < 0) {\n      rotate = angle * 180 / Math.PI;\n\n      if (rotate > 90) {\n        rotate = rotate - 180;\n      }\n\n      if (rotate < -90) {\n        rotate = rotate + 180;\n      }\n    }\n\n    return rotate / 180 * Math.PI;\n  },\n\n  /**\n   * @protected\n   * get text align for label\n   * @param {Object} point point\n   * @return {String} align\n   */\n  getLabelAlign: function getLabelAlign(point) {\n    var self = this;\n    var coord = self.get('coord');\n    var center = coord.getCenter();\n    var align;\n\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n\n    var offset = self.getDefaultOffset(point);\n\n    if (offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n\n    return align;\n  },\n  getArcPoint: function getArcPoint(point) {\n    return point;\n  },\n  getPointAngle: function getPointAngle(point) {\n    var self = this;\n    var coord = self.get('coord');\n    var startPoint = {\n      x: Util.isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0]\n    };\n    self.transLabelPoint(startPoint); // 转换到画布坐标，如果坐标系发生改变\n\n    var endPoint = {\n      x: Util.isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1]\n    };\n    self.transLabelPoint(endPoint); // 转换到画布坐标，如果坐标系发生改变\n\n    var angle;\n    var startAngle = PathUtil.getPointAngle(coord, startPoint);\n\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      var endAngle = PathUtil.getPointAngle(coord, endPoint);\n\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n\n    return angle;\n  },\n  getCirclePoint: function getCirclePoint(angle, offset) {\n    var self = this;\n    var coord = self.get('coord');\n    var center = coord.getCenter();\n    var r = coord.getRadius() + offset;\n    var point = getEndPoint(center, angle, r);\n    point.angle = angle;\n    point.r = r;\n    return point;\n  }\n});\nmodule.exports = PieLabels;"]}]}