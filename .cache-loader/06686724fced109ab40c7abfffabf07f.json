{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-browserify\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-browserify\\index.js","mtime":1386099726000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["function normalizeArray(parts, allowAboveRoot) {\r\n    var up = 0;\r\n    for (var i = parts.length - 1; i >= 0; i--) {\r\n        var last = parts[i];\r\n        if (last === '.') {\r\n            parts.splice(i, 1);\r\n        }\r\n        else if (last === '..') {\r\n            parts.splice(i, 1);\r\n            up++;\r\n        }\r\n        else if (up) {\r\n            parts.splice(i, 1);\r\n            up--;\r\n        }\r\n    }\r\n    if (allowAboveRoot) {\r\n        for (; up--; up) {\r\n            parts.unshift('..');\r\n        }\r\n    }\r\n    return parts;\r\n}\r\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar splitPath = function (filename) {\r\n    return splitPathRe.exec(filename).slice(1);\r\n};\r\nexports.resolve = function () {\r\n    var resolvedPath = '', resolvedAbsolute = false;\r\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n        var path = (i >= 0) ? arguments[i] : process.cwd();\r\n        if (typeof path !== 'string') {\r\n            throw new TypeError('Arguments to path.resolve must be strings');\r\n        }\r\n        else if (!path) {\r\n            continue;\r\n        }\r\n        resolvedPath = path + '/' + resolvedPath;\r\n        resolvedAbsolute = path.charAt(0) === '/';\r\n    }\r\n    resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {\r\n        return !!p;\r\n    }), !resolvedAbsolute).join('/');\r\n    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\nexports.normalize = function (path) {\r\n    var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';\r\n    path = normalizeArray(filter(path.split('/'), function (p) {\r\n        return !!p;\r\n    }), !isAbsolute).join('/');\r\n    if (!path && !isAbsolute) {\r\n        path = '.';\r\n    }\r\n    if (path && trailingSlash) {\r\n        path += '/';\r\n    }\r\n    return (isAbsolute ? '/' : '') + path;\r\n};\r\nexports.isAbsolute = function (path) {\r\n    return path.charAt(0) === '/';\r\n};\r\nexports.join = function () {\r\n    var paths = Array.prototype.slice.call(arguments, 0);\r\n    return exports.normalize(filter(paths, function (p, index) {\r\n        if (typeof p !== 'string') {\r\n            throw new TypeError('Arguments to path.join must be strings');\r\n        }\r\n        return p;\r\n    }).join('/'));\r\n};\r\nexports.relative = function (from, to) {\r\n    from = exports.resolve(from).substr(1);\r\n    to = exports.resolve(to).substr(1);\r\n    function trim(arr) {\r\n        var start = 0;\r\n        for (; start < arr.length; start++) {\r\n            if (arr[start] !== '')\r\n                break;\r\n        }\r\n        var end = arr.length - 1;\r\n        for (; end >= 0; end--) {\r\n            if (arr[end] !== '')\r\n                break;\r\n        }\r\n        if (start > end)\r\n            return [];\r\n        return arr.slice(start, end - start + 1);\r\n    }\r\n    var fromParts = trim(from.split('/'));\r\n    var toParts = trim(to.split('/'));\r\n    var length = Math.min(fromParts.length, toParts.length);\r\n    var samePartsLength = length;\r\n    for (var i = 0; i < length; i++) {\r\n        if (fromParts[i] !== toParts[i]) {\r\n            samePartsLength = i;\r\n            break;\r\n        }\r\n    }\r\n    var outputParts = [];\r\n    for (var i = samePartsLength; i < fromParts.length; i++) {\r\n        outputParts.push('..');\r\n    }\r\n    outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n    return outputParts.join('/');\r\n};\r\nexports.sep = '/';\r\nexports.delimiter = ':';\r\nexports.dirname = function (path) {\r\n    var result = splitPath(path), root = result[0], dir = result[1];\r\n    if (!root && !dir) {\r\n        return '.';\r\n    }\r\n    if (dir) {\r\n        dir = dir.substr(0, dir.length - 1);\r\n    }\r\n    return root + dir;\r\n};\r\nexports.basename = function (path, ext) {\r\n    var f = splitPath(path)[2];\r\n    if (ext && f.substr(-1 * ext.length) === ext) {\r\n        f = f.substr(0, f.length - ext.length);\r\n    }\r\n    return f;\r\n};\r\nexports.extname = function (path) {\r\n    return splitPath(path)[3];\r\n};\r\nfunction filter(xs, f) {\r\n    if (xs.filter)\r\n        return xs.filter(f);\r\n    var res = [];\r\n    for (var i = 0; i < xs.length; i++) {\r\n        if (f(xs[i], i, xs))\r\n            res.push(xs[i]);\r\n    }\r\n    return res;\r\n}\r\nvar substr = 'ab'.substr(-1) === 'b'\r\n    ? function (str, start, len) { return str.substr(start, len); }\r\n    : function (str, start, len) {\r\n        if (start < 0)\r\n            start = str.length + start;\r\n        return str.substr(start, len);\r\n    };\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-browserify\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-browserify\\index.js"],"names":[],"mappings":"AAyBA,SAAS,cAAc,CAAC,KAAK,EAAE,cAAc;IAE3C,IAAI,EAAE,GAAG,CAAC,CAAC;IACX,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC1C,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,IAAI,KAAK,GAAG,EAAE;YAChB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SACpB;aAAM,IAAI,IAAI,KAAK,IAAI,EAAE;YACxB,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,EAAE,EAAE,CAAC;SACN;aAAM,IAAI,EAAE,EAAE;YACb,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACnB,EAAE,EAAE,CAAC;SACN;KACF;IAGD,IAAI,cAAc,EAAE;QAClB,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE;YACf,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SACrB;KACF;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAID,IAAI,WAAW,GACX,+DAA+D,CAAC;AACpE,IAAI,SAAS,GAAG,UAAS,QAAQ;IAC/B,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7C,CAAC,CAAC;AAIF,OAAO,CAAC,OAAO,GAAG;IAChB,IAAI,YAAY,GAAG,EAAE,EACjB,gBAAgB,GAAG,KAAK,CAAC;IAE7B,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,EAAE,EAAE;QACpE,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;QAGnD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,MAAM,IAAI,SAAS,CAAC,2CAA2C,CAAC,CAAC;SAClE;aAAM,IAAI,CAAC,IAAI,EAAE;YAChB,SAAS;SACV;QAED,YAAY,GAAG,IAAI,GAAG,GAAG,GAAG,YAAY,CAAC;QACzC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;KAC3C;IAMD,YAAY,GAAG,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,UAAS,CAAC;QACtE,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAEjC,OAAO,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,GAAG,CAAC;AAC/D,CAAC,CAAC;AAIF,OAAO,CAAC,SAAS,GAAG,UAAS,IAAI;IAC/B,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EACrC,aAAa,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IAG7C,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,UAAS,CAAC;QACtD,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE3B,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,EAAE;QACxB,IAAI,GAAG,GAAG,CAAC;KACZ;IACD,IAAI,IAAI,IAAI,aAAa,EAAE;QACzB,IAAI,IAAI,GAAG,CAAC;KACb;IAED,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;AACxC,CAAC,CAAC;AAGF,OAAO,CAAC,UAAU,GAAG,UAAS,IAAI;IAChC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;AAChC,CAAC,CAAC;AAGF,OAAO,CAAC,IAAI,GAAG;IACb,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACrD,OAAO,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,UAAS,CAAC,EAAE,KAAK;QACtD,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;YACzB,MAAM,IAAI,SAAS,CAAC,wCAAwC,CAAC,CAAC;SAC/D;QACD,OAAO,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAChB,CAAC,CAAC;AAKF,OAAO,CAAC,QAAQ,GAAG,UAAS,IAAI,EAAE,EAAE;IAClC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACvC,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEnC,SAAS,IAAI,CAAC,GAAG;QACf,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,OAAO,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YAClC,IAAI,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE;gBAAE,MAAM;SAC9B;QAED,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;QACzB,OAAO,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,EAAE;YACtB,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE;gBAAE,MAAM;SAC5B;QAED,IAAI,KAAK,GAAG,GAAG;YAAE,OAAO,EAAE,CAAC;QAC3B,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,IAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAElC,IAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IACxD,IAAI,eAAe,GAAG,MAAM,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QAC/B,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;YAC/B,eAAe,GAAG,CAAC,CAAC;YACpB,MAAM;SACP;KACF;IAED,IAAI,WAAW,GAAG,EAAE,CAAC;IACrB,KAAK,IAAI,CAAC,GAAG,eAAe,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACvD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACxB;IAED,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;IAEjE,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAClB,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC;AAExB,OAAO,CAAC,OAAO,GAAG,UAAS,IAAI;IAC7B,IAAI,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,EACxB,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,EAChB,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAEpB,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE;QAEjB,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,GAAG,EAAE;QAEP,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KACrC;IAED,OAAO,IAAI,GAAG,GAAG,CAAC;AACpB,CAAC,CAAC;AAGF,OAAO,CAAC,QAAQ,GAAG,UAAS,IAAI,EAAE,GAAG;IACnC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAE3B,IAAI,GAAG,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE;QAC5C,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC;KACxC;IACD,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAGF,OAAO,CAAC,OAAO,GAAG,UAAS,IAAI;IAC7B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF,SAAS,MAAM,CAAE,EAAE,EAAE,CAAC;IAClB,IAAI,EAAE,CAAC,MAAM;QAAE,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACnC,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;KACxC;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAGD,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;IAChC,CAAC,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,GAAG,IAAI,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAA,CAAC,CAAC;IAC9D,CAAC,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,GAAG;QACvB,IAAI,KAAK,GAAG,CAAC;YAAE,KAAK,GAAG,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC;QAC1C,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAClC,CAAC,CACJ","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n"]}]}