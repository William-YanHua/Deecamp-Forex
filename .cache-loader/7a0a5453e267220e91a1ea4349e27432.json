{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\satellite.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\satellite.js","mtime":1467641430000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\r\nimport { acos, asin, atan2, cos, degrees, radians, sin, sqrt } from \"./math\";\r\nfunction satelliteVerticalRaw(P) {\r\n    function forward(lambda, phi) {\r\n        var cosPhi = cos(phi), k = (P - 1) / (P - cosPhi * cos(lambda));\r\n        return [\r\n            k * cosPhi * sin(lambda),\r\n            k * sin(phi)\r\n        ];\r\n    }\r\n    forward.invert = function (x, y) {\r\n        var rho2 = x * x + y * y, rho = sqrt(rho2), sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\r\n        return [\r\n            atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\r\n            rho ? asin(y * sinc / rho) : 0\r\n        ];\r\n    };\r\n    return forward;\r\n}\r\nexport function satelliteRaw(P, omega) {\r\n    var vertical = satelliteVerticalRaw(P);\r\n    if (!omega)\r\n        return vertical;\r\n    var cosOmega = cos(omega), sinOmega = sin(omega);\r\n    function forward(lambda, phi) {\r\n        var coordinates = vertical(lambda, phi), y = coordinates[1], A = y * sinOmega / (P - 1) + cosOmega;\r\n        return [\r\n            coordinates[0] * cosOmega / A,\r\n            y / A\r\n        ];\r\n    }\r\n    forward.invert = function (x, y) {\r\n        var k = (P - 1) / (P - 1 - y * sinOmega);\r\n        return vertical.invert(k * x, k * y * cosOmega);\r\n    };\r\n    return forward;\r\n}\r\nexport default function () {\r\n    var distance = 2, omega = 0, m = projectionMutator(satelliteRaw), p = m(distance, omega);\r\n    p.distance = function (_) {\r\n        if (!arguments.length)\r\n            return distance;\r\n        return m(distance = +_, omega);\r\n    };\r\n    p.tilt = function (_) {\r\n        if (!arguments.length)\r\n            return omega * degrees;\r\n        return m(distance, omega = _ * radians);\r\n    };\r\n    return p\r\n        .scale(432.147)\r\n        .clipAngle(acos(1 / distance) * degrees - 1e-6);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\satellite.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\satellite.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n"]}]}