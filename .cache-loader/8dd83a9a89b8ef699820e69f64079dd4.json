{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\src\\app\\pages\\InvReqPage\\InvReqDetailPage\\Bought\\Product\\Analysis\\ProfitChart.tsx","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\src\\app\\pages\\InvReqPage\\InvReqDetailPage\\Bought\\Product\\Analysis\\ProfitChart.tsx","mtime":1596379644559},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport React from \"react\";\r\nimport { Chart, Axis, Legend, Tooltip, Geom } from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nvar DataView = DataSet.DataView;\r\nvar ProfitChart = (function (_super) {\r\n    __extends(ProfitChart, _super);\r\n    function ProfitChart() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    ProfitChart.prototype.render = function () {\r\n        var dv = new DataView();\r\n        dv.source(this.props.data)\r\n            .transform({\r\n            type: \"rename\",\r\n            map: {\r\n                futuresProfit: \"期货收益率\",\r\n                spotProfit: \"现货收益率\",\r\n                totalIncomeRatio: \"组合收益率\",\r\n            },\r\n        })\r\n            .transform({\r\n            type: \"fold\",\r\n            fields: [\"期货收益率\", \"现货收益率\", \"组合收益率\"],\r\n            key: \"key\",\r\n            value: \"val\",\r\n        });\r\n        var scale = {\r\n            val: {\r\n                formatter: function (val) {\r\n                    return val.toFixed(2) + \"%\";\r\n                },\r\n            },\r\n        };\r\n        return (React.createElement(Chart, { height: 350, data: dv, padding: [30, 30, 80, 60], scale: scale, forceFit: true },\r\n            React.createElement(Axis, { name: \"date\" }),\r\n            React.createElement(Axis, { name: \"val\" }),\r\n            React.createElement(Legend, null),\r\n            React.createElement(Tooltip, { crosshairs: {\r\n                    type: \"y\",\r\n                    style: {\r\n                        lineWidth: 1,\r\n                        stroke: \"#cfcfcf\",\r\n                    },\r\n                } }),\r\n            React.createElement(Geom, { type: \"line\", position: \"date*val\", color: \"key\" }),\r\n            React.createElement(Geom, { type: \"point\", position: \"date*val\", color: \"key\" })));\r\n    };\r\n    return ProfitChart;\r\n}(React.Component));\r\nexport { ProfitChart };\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\src\\app\\pages\\InvReqPage\\InvReqDetailPage\\Bought\\Product\\Analysis\\ProfitChart.tsx","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\src\\app\\pages\\InvReqPage\\InvReqDetailPage\\Bought\\Product\\Analysis\\ProfitChart.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAC/D,OAAO,OAAO,MAAM,gBAAgB,CAAC;AAG9B,IAAA,2BAAQ,CAAY;AAM3B;IAAiC,+BAA0B;IAA3D;;IA+DA,CAAC;IA9DC,4BAAM,GAAN;QACE,IAAM,EAAE,GAAG,IAAI,QAAQ,EAAE,CAAC;QAC1B,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;aACvB,SAAS,CACR;YACE,IAAI,EAAE,QAAQ;YACd,GAAG,EAAE;gBACH,aAAa,EAAE,OAAO;gBACtB,UAAU,EAAE,OAAO;gBACnB,gBAAgB,EAAE,OAAO;aAC1B;SACF,CACF;aACA,SAAS,CACR;YACE,IAAI,EAAE,MAAM;YACZ,MAAM,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;YACnC,GAAG,EAAE,KAAK;YACV,KAAK,EAAE,KAAK;SACb,CACF,CAAC;QAEJ,IAAM,KAAK,GAAG;YACZ,GAAG,EAAE;gBACH,SAAS,EAAE,UAAC,GAAG;oBACb,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;gBAC9B,CAAC;aACF;SACF,CAAC;QAEF,OAAO,CACL,oBAAC,KAAK,IAAC,MAAM,EAAE,GAAG,EACX,IAAI,EAAE,EAAE,EACR,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACzB,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,IAAI;YAEnB,oBAAC,IAAI,IAAC,IAAI,EAAE,MAAM,GAAG;YACrB,oBAAC,IAAI,IAAC,IAAI,EAAE,KAAK,GAAG;YACpB,oBAAC,MAAM,OAAE;YACT,oBAAC,OAAO,IAAC,UAAU,EAAE;oBACnB,IAAI,EAAE,GAAG;oBACT,KAAK,EAAE;wBACL,SAAS,EAAE,CAAC;wBACZ,MAAM,EAAE,SAAS;qBAClB;iBACF,GAAG;YAEJ,oBAAC,IAAI,IACH,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,UAAU,EACpB,KAAK,EAAE,KAAK,GACZ;YACF,oBAAC,IAAI,IACH,IAAI,EAAE,OAAO,EACb,QAAQ,EAAE,UAAU,EACpB,KAAK,EAAE,KAAK,GACZ,CAEI,CACT,CAAC;IACJ,CAAC;IACH,kBAAC;AAAD,CAAC,AA/DD,CAAiC,KAAK,CAAC,SAAS,GA+D/C","sourcesContent":["import React from \"react\";\r\nimport { Chart, Axis, Legend, Tooltip, Geom } from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nimport { ProductDailyProfit } from \"../../../../../../models/invreq/Bought/Product/ProductAnalysis\";\r\n\r\nconst {DataView} = DataSet;\r\n\r\ninterface Props {\r\n  data: ProductDailyProfit[];\r\n}\r\n\r\nexport class ProfitChart extends React.Component<Props, {}> {\r\n  render() {\r\n    const dv = new DataView();\r\n    dv.source(this.props.data)\r\n      .transform(\r\n        {\r\n          type: \"rename\",\r\n          map: {\r\n            futuresProfit: \"期货收益率\",\r\n            spotProfit: \"现货收益率\",\r\n            totalIncomeRatio: \"组合收益率\",\r\n          },\r\n        },\r\n      )\r\n      .transform(\r\n        {\r\n          type: \"fold\",\r\n          fields: [\"期货收益率\", \"现货收益率\", \"组合收益率\"],\r\n          key: \"key\",\r\n          value: \"val\",\r\n        },\r\n      );\r\n\r\n    const scale = {\r\n      val: {\r\n        formatter: (val) => {\r\n          return val.toFixed(2) + \"%\";\r\n        },\r\n      },\r\n    };\r\n\r\n    return (\r\n      <Chart height={350}\r\n             data={dv}\r\n             padding={[30, 30, 80, 60]}\r\n             scale={scale}\r\n             forceFit={true}\r\n      >\r\n        <Axis name={\"date\"}/>\r\n        <Axis name={\"val\"}/>\r\n        <Legend/>\r\n        <Tooltip crosshairs={{\r\n          type: \"y\",\r\n          style: {\r\n            lineWidth: 1,\r\n            stroke: \"#cfcfcf\",\r\n          },\r\n        }}/>\r\n\r\n        <Geom\r\n          type=\"line\"\r\n          position={\"date*val\"}\r\n          color={\"key\"}\r\n        />\r\n        <Geom\r\n          type={\"point\"}\r\n          position={\"date*val\"}\r\n          color={\"key\"}\r\n        />\r\n\r\n      </Chart>\r\n    );\r\n  }\r\n}\r\n"]}]}