{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\percent.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\percent.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar sum = require('simple-statistics').sum;\r\nvar partition = require('../util/partition');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar getField = require('../util/option-parser').getField;\r\nvar DEFAULT_OPTIONS = {\r\n    groupBy: [],\r\n    as: '_percent'\r\n};\r\nfunction transform(dataView, options) {\r\n    if (options === void 0) { options = {}; }\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var field = getField(options);\r\n    var dimension = options.dimension;\r\n    var groupBy = options.groupBy;\r\n    var as = options.as;\r\n    if (!isString(dimension)) {\r\n        throw new TypeError('Invalid dimension: must be a string!');\r\n    }\r\n    if (isArray(as)) {\r\n        console.warn('Invalid as: must be a string, will use the first element of the array specified.');\r\n        as = as[0];\r\n    }\r\n    if (!isString(as)) {\r\n        throw new TypeError('Invalid as: must be a string!');\r\n    }\r\n    var rows = dataView.rows;\r\n    var result = [];\r\n    var groups = partition(rows, groupBy);\r\n    forIn(groups, function (group) {\r\n        var totalSum = sum(group.map(function (row) { return row[field]; }));\r\n        if (totalSum === 0) {\r\n            console.warn(\"Invalid data: total sum of field \" + field + \" is 0!\");\r\n        }\r\n        var innerGroups = partition(group, [dimension]);\r\n        forIn(innerGroups, function (innerGroup) {\r\n            var innerSum = sum(innerGroup.map(function (row) { return row[field]; }));\r\n            var resultRow = innerGroup[0];\r\n            var dimensionValue = resultRow[dimension];\r\n            resultRow[field] = innerSum;\r\n            resultRow[dimension] = dimensionValue;\r\n            if (totalSum === 0) {\r\n                resultRow[as] = 0;\r\n            }\r\n            else {\r\n                resultRow[as] = innerSum / totalSum;\r\n            }\r\n            result.push(resultRow);\r\n        });\r\n    });\r\n    dataView.rows = result;\r\n}\r\nregisterTransform('percent', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\percent.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\percent.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst forIn = require('@antv/util/lib/each');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  sum\n} = require('simple-statistics');\nconst partition = require('../util/partition');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  getField\n} = require('../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  // field: 'y', // required\n  // dimension: 'x', // required\n  groupBy: [], // optional\n  as: '_percent'\n};\n\nfunction transform(dataView, options = {}) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const field = getField(options);\n  const dimension = options.dimension;\n  const groupBy = options.groupBy;\n  let as = options.as;\n  if (!isString(dimension)) {\n    throw new TypeError('Invalid dimension: must be a string!');\n  }\n  if (isArray(as)) {\n    console.warn('Invalid as: must be a string, will use the first element of the array specified.');\n    as = as[0];\n  }\n  if (!isString(as)) {\n    throw new TypeError('Invalid as: must be a string!');\n  }\n  const rows = dataView.rows;\n  const result = [];\n  const groups = partition(rows, groupBy);\n  forIn(groups, group => {\n    const totalSum = sum(group.map(row => row[field]));\n    if (totalSum === 0) {\n      console.warn(`Invalid data: total sum of field ${field} is 0!`);\n    }\n    const innerGroups = partition(group, [ dimension ]);\n    forIn(innerGroups, innerGroup => {\n      const innerSum = sum(innerGroup.map(row => row[field]));\n      // const resultRow = pick(innerGroup[0], union(groupBy, [ dimension ]));\n      const resultRow = innerGroup[0];\n      // FIXME in case dimension and field is the same\n      const dimensionValue = resultRow[dimension];\n      resultRow[field] = innerSum;\n      resultRow[dimension] = dimensionValue;\n      if (totalSum === 0) {\n        resultRow[as] = 0;\n      } else {\n        resultRow[as] = innerSum / totalSum;\n      }\n      result.push(resultRow);\n    });\n  });\n  dataView.rows = result;\n}\n\nregisterTransform('percent', transform);\n"]}]}