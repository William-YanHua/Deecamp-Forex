{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\fill-rows.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\fill-rows.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar partition = require('../util/partition');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar DEFAULT_OPTIONS = {\r\n    fillBy: 'group',\r\n    groupBy: [],\r\n    orderBy: []\r\n};\r\nfunction arrayDifference(arr1, arr2) {\r\n    var shadow = arr1.map(function (item) { return item; });\r\n    arr2.forEach(function (item) {\r\n        var index = shadow.indexOf(item);\r\n        if (index > -1) {\r\n            shadow.splice(index, 1);\r\n        }\r\n    });\r\n    return shadow;\r\n}\r\nfunction transform(dataView, options) {\r\n    if (options === void 0) { options = {}; }\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var rows = dataView.rows;\r\n    var groupBy = options.groupBy;\r\n    var orderBy = options.orderBy;\r\n    var groups = partition(rows, groupBy, orderBy);\r\n    var maxLength = 0;\r\n    var referenceGroup = [];\r\n    forIn(groups, function (group) {\r\n        if (group.length > maxLength) {\r\n            maxLength = group.length;\r\n            referenceGroup = group;\r\n        }\r\n    });\r\n    var referenceOrderByKeys = [];\r\n    var referenceRowByOrderByKey = {};\r\n    referenceGroup.forEach(function (row) {\r\n        var key = orderBy.map(function (col) { return row[col]; }).join('-');\r\n        referenceOrderByKeys.push(key);\r\n        referenceRowByOrderByKey[key] = row;\r\n    });\r\n    if (options.fillBy === 'order') {\r\n        var first_1 = referenceGroup[0];\r\n        var allOrderByKeys_1 = [];\r\n        var rowByOrderByKey_1 = {};\r\n        rows.forEach(function (row) {\r\n            var key = orderBy.map(function (col) { return row[col]; }).join('-');\r\n            if (allOrderByKeys_1.indexOf(key) === -1) {\r\n                allOrderByKeys_1.push(key);\r\n                rowByOrderByKey_1[key] = row;\r\n            }\r\n        });\r\n        var _missingOrderByKeys = arrayDifference(allOrderByKeys_1, referenceOrderByKeys);\r\n        _missingOrderByKeys.forEach(function (key) {\r\n            var row = {};\r\n            groupBy.forEach(function (col) {\r\n                row[col] = first_1[col];\r\n            });\r\n            orderBy.forEach(function (col) {\r\n                row[col] = rowByOrderByKey_1[key][col];\r\n            });\r\n            rows.push(row);\r\n            referenceGroup.push(row);\r\n            referenceOrderByKeys.push(key);\r\n            referenceRowByOrderByKey[key] = row;\r\n        });\r\n        maxLength = referenceGroup.length;\r\n    }\r\n    forIn(groups, function (group) {\r\n        if (group !== referenceGroup && group.length < maxLength) {\r\n            var first_2 = group[0];\r\n            var orderByKeys_1 = [];\r\n            group.forEach(function (row) {\r\n                orderByKeys_1.push(orderBy.map(function (col) { return row[col]; }).join('-'));\r\n            });\r\n            var missingOrderByKeys = arrayDifference(referenceOrderByKeys, orderByKeys_1);\r\n            missingOrderByKeys.some(function (key, i) {\r\n                if (i >= (maxLength - group.length)) {\r\n                    return true;\r\n                }\r\n                var referenceRow = referenceRowByOrderByKey[key];\r\n                var row = {};\r\n                groupBy.forEach(function (col) {\r\n                    row[col] = first_2[col];\r\n                });\r\n                orderBy.forEach(function (col) {\r\n                    row[col] = referenceRow[col];\r\n                });\r\n                rows.push(row);\r\n                return false;\r\n            });\r\n        }\r\n    });\r\n}\r\nregisterTransform('fill-rows', transform);\r\nregisterTransform('fillRows', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\fill-rows.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\fill-rows.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst forIn = require('@antv/util/lib/each');\nconst partition = require('../util/partition');\nconst {\n  registerTransform\n} = require('../data-set');\n\nconst DEFAULT_OPTIONS = {\n  fillBy: 'group', // group | order\n  groupBy: [],\n  orderBy: []\n};\n\nfunction arrayDifference(arr1, arr2) {\n  // arrayDifference([1, 1, 1, 2], [1, 2]) => [1, 1]\n  const shadow = arr1.map(item => item); // shadow copy\n  arr2.forEach(item => {\n    const index = shadow.indexOf(item);\n    if (index > -1) {\n      shadow.splice(index, 1);\n    }\n  });\n  return shadow;\n}\n\nfunction transform(dataView, options = {}) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const rows = dataView.rows;\n  const groupBy = options.groupBy;\n  const orderBy = options.orderBy;\n  const groups = partition(rows, groupBy, orderBy);\n  let maxLength = 0;\n  let referenceGroup = [];\n  forIn(groups, group => {\n    if (group.length > maxLength) {\n      maxLength = group.length;\n      referenceGroup = group;\n    }\n  });\n  const referenceOrderByKeys = [];\n  const referenceRowByOrderByKey = {};\n  referenceGroup.forEach(row => {\n    const key = orderBy.map(col => row[col]).join('-');\n    referenceOrderByKeys.push(key);\n    referenceRowByOrderByKey[key] = row;\n  });\n  if (options.fillBy === 'order') {\n    const first = referenceGroup[0];\n    const allOrderByKeys = [];\n    const rowByOrderByKey = {};\n    rows.forEach(row => {\n      const key = orderBy.map(col => row[col]).join('-');\n      if (allOrderByKeys.indexOf(key) === -1) {\n        allOrderByKeys.push(key);\n        rowByOrderByKey[key] = row;\n      }\n    });\n    const _missingOrderByKeys = arrayDifference(allOrderByKeys, referenceOrderByKeys);\n    _missingOrderByKeys.forEach(key => {\n      const row = {};\n      groupBy.forEach(col => {\n        row[col] = first[col];\n      });\n      orderBy.forEach(col => {\n        row[col] = rowByOrderByKey[key][col];\n      });\n      rows.push(row);\n      referenceGroup.push(row);\n      referenceOrderByKeys.push(key);\n      referenceRowByOrderByKey[key] = row;\n    });\n    maxLength = referenceGroup.length;\n  }\n  forIn(groups, group => {\n    if (group !== referenceGroup && group.length < maxLength) {\n      const first = group[0];\n      // missing orderBy keys\n      const orderByKeys = [];\n      group.forEach(row => {\n        orderByKeys.push(orderBy.map(col => row[col]).join('-'));\n      });\n      const missingOrderByKeys = arrayDifference(referenceOrderByKeys, orderByKeys);\n      missingOrderByKeys.some((key, i) => {\n        if (i >= (maxLength - group.length)) { // group length overflow\n          return true;\n        }\n        const referenceRow = referenceRowByOrderByKey[key];\n        const row = {};\n        groupBy.forEach(col => {\n          row[col] = first[col];\n        });\n        orderBy.forEach(col => {\n          row[col] = referenceRow[col];\n        });\n        rows.push(row);\n        return false;\n      });\n    }\n  });\n}\n\nregisterTransform('fill-rows', transform);\nregisterTransform('fillRows', transform);\n"]}]}