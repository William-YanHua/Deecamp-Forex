{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/statistics.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/statistics.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\nvar flattenDeep = require('@antv/util/lib/array/flatten-deep');\nvar isArray = require('@antv/util/lib/type/is-array');\nvar simpleStatistics = require('simple-statistics');\nvar View = require('../view');\nvar pByFraction = require('../util/p-by-fraction');\nvar STATISTICS_METHODS = require('../constants').STATISTICS_METHODS;\nfunction getColumnValues(me, column) {\n    var values = me.getColumn(column);\n    if (isArray(values) && isArray(values[0])) {\n        values = flattenDeep(values);\n    }\n    return values;\n}\nSTATISTICS_METHODS.forEach(function (method) {\n    View.prototype[method] = function (column) {\n        return simpleStatistics[method](getColumnValues(this, column));\n    };\n});\nvar quantile = simpleStatistics.quantile;\nassign(View.prototype, {\n    average: View.prototype.mean,\n    quantile: function (column, p) {\n        return quantile(getColumnValues(this, column), p);\n    },\n    quantiles: function (column, pArr) {\n        var columnArr = getColumnValues(this, column);\n        return pArr.map(function (p) { return quantile(columnArr, p); });\n    },\n    quantilesByFraction: function (column, fraction) {\n        return this.quantiles(column, pByFraction(fraction));\n    },\n    range: function (column) {\n        var me = this;\n        return [me.min(column), me.max(column)];\n    },\n    extent: function (column) {\n        return this.range(column);\n    }\n});\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/statistics.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/api/statistics.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,WAAW,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AACjE,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,gBAAgB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AACtD,IAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAChC,IAAM,WAAW,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAEnD,IAAA,kBAAkB,GAChB,OAAO,CAAC,cAAc,CAAC,mBADP,CACQ;AAE5B,SAAS,eAAe,CAAC,EAAE,EAAE,MAAM;IACjC,IAAI,MAAM,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAClC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACzC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;KAC9B;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAGD,kBAAkB,CAAC,OAAO,CAAC,UAAA,MAAM;IAC/B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,UAAS,MAAM;QACtC,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IACjE,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC;AAGD,IAAA,QAAQ,GACN,gBAAgB,SADV,CACW;AAErB,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE;IACrB,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;IAC5B,QAAQ,YAAC,MAAM,EAAE,CAAC;QAChB,OAAO,QAAQ,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IACD,SAAS,YAAC,MAAM,EAAE,IAAI;QACpB,IAAM,SAAS,GAAG,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC,EAAtB,CAAsB,CAAC,CAAC;IAC/C,CAAC;IACD,mBAAmB,YAAC,MAAM,EAAE,QAAQ;QAClC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,KAAK,YAAC,MAAM;QACV,IAAM,EAAE,GAAG,IAAI,CAAC;QAChB,OAAO,CAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAE,CAAC;IAC5C,CAAC;IACD,MAAM,YAAC,MAAM;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;CACF,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst flattenDeep = require('@antv/util/lib/array/flatten-deep');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst simpleStatistics = require('simple-statistics');\nconst View = require('../view');\nconst pByFraction = require('../util/p-by-fraction');\nconst {\n  STATISTICS_METHODS\n} = require('../constants');\n\nfunction getColumnValues(me, column) {\n  let values = me.getColumn(column);\n  if (isArray(values) && isArray(values[0])) {\n    values = flattenDeep(values);\n  }\n  return values;\n}\n\n// statistics\nSTATISTICS_METHODS.forEach(method => {\n  View.prototype[method] = function(column) {\n    return simpleStatistics[method](getColumnValues(this, column));\n  };\n});\n\nconst {\n  quantile\n} = simpleStatistics;\n\nassign(View.prototype, {\n  average: View.prototype.mean,\n  quantile(column, p) {\n    return quantile(getColumnValues(this, column), p);\n  },\n  quantiles(column, pArr) {\n    const columnArr = getColumnValues(this, column);\n    return pArr.map(p => quantile(columnArr, p));\n  },\n  quantilesByFraction(column, fraction) {\n    return this.quantiles(column, pByFraction(fraction));\n  },\n  range(column) {\n    const me = this;\n    return [ me.min(column), me.max(column) ];\n  },\n  extent(column) { // alias\n    return this.range(column);\n  }\n});\n"]}]}