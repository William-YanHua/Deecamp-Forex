{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-to-regexp\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-to-regexp\\index.js","mtime":1478629831000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var isarray = require('isarray');\r\nmodule.exports = pathToRegexp;\r\nmodule.exports.parse = parse;\r\nmodule.exports.compile = compile;\r\nmodule.exports.tokensToFunction = tokensToFunction;\r\nmodule.exports.tokensToRegExp = tokensToRegExp;\r\nvar PATH_REGEXP = new RegExp([\r\n    '(\\\\\\\\.)',\r\n    '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\r\n].join('|'), 'g');\r\nfunction parse(str, options) {\r\n    var tokens = [];\r\n    var key = 0;\r\n    var index = 0;\r\n    var path = '';\r\n    var defaultDelimiter = options && options.delimiter || '/';\r\n    var res;\r\n    while ((res = PATH_REGEXP.exec(str)) != null) {\r\n        var m = res[0];\r\n        var escaped = res[1];\r\n        var offset = res.index;\r\n        path += str.slice(index, offset);\r\n        index = offset + m.length;\r\n        if (escaped) {\r\n            path += escaped[1];\r\n            continue;\r\n        }\r\n        var next = str[index];\r\n        var prefix = res[2];\r\n        var name = res[3];\r\n        var capture = res[4];\r\n        var group = res[5];\r\n        var modifier = res[6];\r\n        var asterisk = res[7];\r\n        if (path) {\r\n            tokens.push(path);\r\n            path = '';\r\n        }\r\n        var partial = prefix != null && next != null && next !== prefix;\r\n        var repeat = modifier === '+' || modifier === '*';\r\n        var optional = modifier === '?' || modifier === '*';\r\n        var delimiter = res[2] || defaultDelimiter;\r\n        var pattern = capture || group;\r\n        tokens.push({\r\n            name: name || key++,\r\n            prefix: prefix || '',\r\n            delimiter: delimiter,\r\n            optional: optional,\r\n            repeat: repeat,\r\n            partial: partial,\r\n            asterisk: !!asterisk,\r\n            pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\r\n        });\r\n    }\r\n    if (index < str.length) {\r\n        path += str.substr(index);\r\n    }\r\n    if (path) {\r\n        tokens.push(path);\r\n    }\r\n    return tokens;\r\n}\r\nfunction compile(str, options) {\r\n    return tokensToFunction(parse(str, options));\r\n}\r\nfunction encodeURIComponentPretty(str) {\r\n    return encodeURI(str).replace(/[\\/?#]/g, function (c) {\r\n        return '%' + c.charCodeAt(0).toString(16).toUpperCase();\r\n    });\r\n}\r\nfunction encodeAsterisk(str) {\r\n    return encodeURI(str).replace(/[?#]/g, function (c) {\r\n        return '%' + c.charCodeAt(0).toString(16).toUpperCase();\r\n    });\r\n}\r\nfunction tokensToFunction(tokens) {\r\n    var matches = new Array(tokens.length);\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        if (typeof tokens[i] === 'object') {\r\n            matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\r\n        }\r\n    }\r\n    return function (obj, opts) {\r\n        var path = '';\r\n        var data = obj || {};\r\n        var options = opts || {};\r\n        var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\r\n        for (var i = 0; i < tokens.length; i++) {\r\n            var token = tokens[i];\r\n            if (typeof token === 'string') {\r\n                path += token;\r\n                continue;\r\n            }\r\n            var value = data[token.name];\r\n            var segment;\r\n            if (value == null) {\r\n                if (token.optional) {\r\n                    if (token.partial) {\r\n                        path += token.prefix;\r\n                    }\r\n                    continue;\r\n                }\r\n                else {\r\n                    throw new TypeError('Expected \"' + token.name + '\" to be defined');\r\n                }\r\n            }\r\n            if (isarray(value)) {\r\n                if (!token.repeat) {\r\n                    throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`');\r\n                }\r\n                if (value.length === 0) {\r\n                    if (token.optional) {\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        throw new TypeError('Expected \"' + token.name + '\" to not be empty');\r\n                    }\r\n                }\r\n                for (var j = 0; j < value.length; j++) {\r\n                    segment = encode(value[j]);\r\n                    if (!matches[i].test(segment)) {\r\n                        throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`');\r\n                    }\r\n                    path += (j === 0 ? token.prefix : token.delimiter) + segment;\r\n                }\r\n                continue;\r\n            }\r\n            segment = token.asterisk ? encodeAsterisk(value) : encode(value);\r\n            if (!matches[i].test(segment)) {\r\n                throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"');\r\n            }\r\n            path += token.prefix + segment;\r\n        }\r\n        return path;\r\n    };\r\n}\r\nfunction escapeString(str) {\r\n    return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1');\r\n}\r\nfunction escapeGroup(group) {\r\n    return group.replace(/([=!:$\\/()])/g, '\\\\$1');\r\n}\r\nfunction attachKeys(re, keys) {\r\n    re.keys = keys;\r\n    return re;\r\n}\r\nfunction flags(options) {\r\n    return options.sensitive ? '' : 'i';\r\n}\r\nfunction regexpToRegexp(path, keys) {\r\n    var groups = path.source.match(/\\((?!\\?)/g);\r\n    if (groups) {\r\n        for (var i = 0; i < groups.length; i++) {\r\n            keys.push({\r\n                name: i,\r\n                prefix: null,\r\n                delimiter: null,\r\n                optional: false,\r\n                repeat: false,\r\n                partial: false,\r\n                asterisk: false,\r\n                pattern: null\r\n            });\r\n        }\r\n    }\r\n    return attachKeys(path, keys);\r\n}\r\nfunction arrayToRegexp(path, keys, options) {\r\n    var parts = [];\r\n    for (var i = 0; i < path.length; i++) {\r\n        parts.push(pathToRegexp(path[i], keys, options).source);\r\n    }\r\n    var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\r\n    return attachKeys(regexp, keys);\r\n}\r\nfunction stringToRegexp(path, keys, options) {\r\n    return tokensToRegExp(parse(path, options), keys, options);\r\n}\r\nfunction tokensToRegExp(tokens, keys, options) {\r\n    if (!isarray(keys)) {\r\n        options = (keys || options);\r\n        keys = [];\r\n    }\r\n    options = options || {};\r\n    var strict = options.strict;\r\n    var end = options.end !== false;\r\n    var route = '';\r\n    for (var i = 0; i < tokens.length; i++) {\r\n        var token = tokens[i];\r\n        if (typeof token === 'string') {\r\n            route += escapeString(token);\r\n        }\r\n        else {\r\n            var prefix = escapeString(token.prefix);\r\n            var capture = '(?:' + token.pattern + ')';\r\n            keys.push(token);\r\n            if (token.repeat) {\r\n                capture += '(?:' + prefix + capture + ')*';\r\n            }\r\n            if (token.optional) {\r\n                if (!token.partial) {\r\n                    capture = '(?:' + prefix + '(' + capture + '))?';\r\n                }\r\n                else {\r\n                    capture = prefix + '(' + capture + ')?';\r\n                }\r\n            }\r\n            else {\r\n                capture = prefix + '(' + capture + ')';\r\n            }\r\n            route += capture;\r\n        }\r\n    }\r\n    var delimiter = escapeString(options.delimiter || '/');\r\n    var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\r\n    if (!strict) {\r\n        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\r\n    }\r\n    if (end) {\r\n        route += '$';\r\n    }\r\n    else {\r\n        route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\r\n    }\r\n    return attachKeys(new RegExp('^' + route, flags(options)), keys);\r\n}\r\nfunction pathToRegexp(path, keys, options) {\r\n    if (!isarray(keys)) {\r\n        options = (keys || options);\r\n        keys = [];\r\n    }\r\n    options = options || {};\r\n    if (path instanceof RegExp) {\r\n        return regexpToRegexp(path, (keys));\r\n    }\r\n    if (isarray(path)) {\r\n        return arrayToRegexp((path), (keys), options);\r\n    }\r\n    return stringToRegexp((path), (keys), options);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-to-regexp\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\path-to-regexp\\index.js"],"names":[],"mappings":"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","sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]}]}