{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\dagre.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\dagre.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\r\nvar dagre = require('dagre');\r\nvar registerTransform = require('../../data-set').registerTransform;\r\nvar DEFAULT_OPTIONS = {\r\n    rankdir: 'TB',\r\n    align: 'TB',\r\n    nodesep: 50,\r\n    edgesep: 10,\r\n    ranksep: 50,\r\n    source: function (edge) { return edge.source; },\r\n    target: function (edge) { return edge.target; }\r\n};\r\nfunction transform(dv, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var g = new dagre.graphlib.Graph();\r\n    g.setGraph({});\r\n    g.setDefaultEdgeLabel(function () {\r\n        return {};\r\n    });\r\n    dv.nodes.forEach(function (node) {\r\n        var nodeId = options.nodeId ? options.nodeId(node) : node.id;\r\n        if (!node.height && !node.width) {\r\n            node.height = node.width = options.edgesep;\r\n        }\r\n        g.setNode(nodeId, node);\r\n    });\r\n    dv.edges.forEach(function (edge) {\r\n        g.setEdge(options.source(edge), options.target(edge));\r\n    });\r\n    dagre.layout(g);\r\n    var nodes = [];\r\n    var edges = [];\r\n    g.nodes().forEach(function (node) {\r\n        var n = g.node(node);\r\n        var x = n.x, y = n.y, height = n.height, width = n.width;\r\n        n.x = [x - width / 2, x + width / 2, x + width / 2, x - width / 2];\r\n        n.y = [y + height / 2, y + height / 2, y - height / 2, y - height / 2];\r\n        nodes.push(n);\r\n    });\r\n    g.edges().forEach(function (edge) {\r\n        var points = g.edge(edge).points;\r\n        var e = {};\r\n        e.x = points.map(function (p) { return p.x; });\r\n        e.y = points.map(function (p) { return p.y; });\r\n        edges.push(e);\r\n    });\r\n    dv.nodes = nodes;\r\n    dv.edges = edges;\r\n}\r\nregisterTransform('diagram.dagre', transform);\r\nregisterTransform('dagre', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\dagre.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\diagram\\dagre.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * for DAG\n * graph data required (nodes, edges)\n */\nconst assign = require('@antv/util/lib/mix');\nconst dagre = require('dagre');\nconst {\n  registerTransform\n} = require('../../data-set');\n\nconst DEFAULT_OPTIONS = {\n  // nodeId: node => node.index,\n  rankdir: 'TB',\n  align: 'TB',\n  nodesep: 50,\n  edgesep: 10,\n  ranksep: 50,\n  source: edge => edge.source,\n  target: edge => edge.target\n};\n\nfunction transform(dv, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const g = new dagre.graphlib.Graph();\n  // Set an object for the graph label\n  g.setGraph({});\n  // Default to assigning a new object as a label for each new edge.\n  g.setDefaultEdgeLabel(function() {\n    return {};\n  });\n\n  dv.nodes.forEach(node => {\n    const nodeId = options.nodeId ? options.nodeId(node) : node.id;\n    if (!node.height && !node.width) {\n      node.height = node.width = options.edgesep;\n    }\n    g.setNode(nodeId, node);\n  });\n  dv.edges.forEach(edge => {\n    g.setEdge(options.source(edge), options.target(edge));\n  });\n  dagre.layout(g);\n\n  const nodes = [];\n  const edges = [];\n\n  g.nodes().forEach(node => {\n    const n = g.node(node);\n    const { x, y, height, width } = n;\n    /* points\n     * 3---2\n     * |   |\n     * 0---1\n     */\n    n.x = [ x - width / 2, x + width / 2, x + width / 2, x - width / 2 ];\n    n.y = [ y + height / 2, y + height / 2, y - height / 2, y - height / 2 ];\n    nodes.push(n);\n  });\n\n  g.edges().forEach(edge => {\n    const { points } = g.edge(edge);\n    const e = {};\n    e.x = points.map(p => p.x);\n    e.y = points.map(p => p.y);\n    edges.push(e);\n  });\n\n  dv.nodes = nodes;\n  dv.edges = edges;\n}\n\nregisterTransform('diagram.dagre', transform);\nregisterTransform('dagre', transform);\n"]}]}