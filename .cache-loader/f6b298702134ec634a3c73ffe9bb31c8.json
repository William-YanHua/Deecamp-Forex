{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-regression/src/loess.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-regression/src/loess.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { median } from \"./utils/median\";\nimport { ols } from \"./utils/ols\";\nimport { points } from \"./utils/points\";\nvar maxiters = 2, epsilon = 1e-12;\nexport default function () {\n    var x = function (d) { return d[0]; }, y = function (d) { return d[1]; }, bandwidth = .3;\n    function loess(data) {\n        var _a = __read(points(data, x, y, true), 4), xv = _a[0], yv = _a[1], ux = _a[2], uy = _a[3], n = xv.length, bw = Math.max(2, ~~(bandwidth * n)), yhat = new Float64Array(n), residuals = new Float64Array(n), robustWeights = new Float64Array(n).fill(1);\n        for (var iter = -1; ++iter <= maxiters;) {\n            var interval = [0, bw - 1];\n            for (var i = 0; i < n; ++i) {\n                var dx = xv[i], i0 = interval[0], i1 = interval[1], edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n                var W = 0, X = 0, Y = 0, XY = 0, X2 = 0, denom = 1 / Math.abs(xv[edge] - dx || 1);\n                for (var k = i0; k <= i1; ++k) {\n                    var xk = xv[k], yk = yv[k], w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k], xkw = xk * w;\n                    W += w;\n                    X += xkw;\n                    Y += yk * w;\n                    XY += yk * xkw;\n                    X2 += xk * xkw;\n                }\n                var _b = __read(ols(X / W, Y / W, XY / W, X2 / W), 2), a = _b[0], b = _b[1];\n                yhat[i] = a + b * dx;\n                residuals[i] = Math.abs(yv[i] - yhat[i]);\n                updateInterval(xv, i + 1, interval);\n            }\n            if (iter === maxiters) {\n                break;\n            }\n            var medianResidual = median(residuals);\n            if (Math.abs(medianResidual) < epsilon)\n                break;\n            for (var i = 0, arg = void 0, w = void 0; i < n; ++i) {\n                arg = residuals[i] / (6 * medianResidual);\n                robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n            }\n        }\n        return output(xv, yhat, ux, uy);\n    }\n    loess.bandwidth = function (bw) {\n        return arguments.length ? (bandwidth = bw, loess) : bandwidth;\n    };\n    loess.x = function (fn) {\n        return arguments.length ? (x = fn, loess) : x;\n    };\n    loess.y = function (fn) {\n        return arguments.length ? (y = fn, loess) : y;\n    };\n    return loess;\n}\nfunction tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n}\nfunction updateInterval(xv, i, interval) {\n    var val = xv[i], left = interval[0], right = interval[1] + 1;\n    if (right >= xv.length)\n        return;\n    while (i > left && (xv[right] - val) <= (val - xv[left])) {\n        interval[0] = ++left;\n        interval[1] = right;\n        ++right;\n    }\n}\nfunction output(xv, yhat, ux, uy) {\n    var n = xv.length, out = [];\n    var i = 0, cnt = 0, prev = [], v;\n    for (; i < n; ++i) {\n        v = xv[i] + ux;\n        if (prev[0] === v) {\n            prev[1] += (yhat[i] - prev[1]) / (++cnt);\n        }\n        else {\n            cnt = 0;\n            prev[1] += uy;\n            prev = [v, yhat[i]];\n            out.push(prev);\n        }\n    }\n    prev[1] += uy;\n    return out;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-regression/src/loess.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-regression/src/loess.js"],"names":[],"mappings":"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","sourcesContent":["// Adapted from science.js by Jason Davies\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// Adapted from vega-statistics by Jeffrey Heer\n// License: https://github.com/vega/vega/blob/f058b099decad9db78301405dd0d2e9d8ba3d51a/LICENSE\n// Source: https://github.com/vega/vega/blob/f21cb8792b4e0cbe2b1a3fd44b0f5db370dbaadb/packages/vega-statistics/src/regression/loess.js\nimport { median } from \"./utils/median\";\nimport { ols } from \"./utils/ols\";\nimport { points } from \"./utils/points\";\n\nconst maxiters = 2, epsilon = 1e-12;\n\nexport default function() {\n  let x = d => d[0],\n      y = d => d[1],\n      bandwidth = .3;\n\n  function loess(data) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n          yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters; ) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n        let W = 0, X = 0, Y = 0, XY = 0, X2 = 0,\n            denom = 1 / Math.abs(xv[edge] - dx || 1); // Avoid singularity\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        }\n\n        // Linear regression fit\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i){\n        arg = residuals[i] / (6 * medianResidual);\n        // Default to epsilon (rather than zero) for large deviations\n        // Keeping weights tiny but non-zero prevents singularites\n        robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n      }\n    }\n\n    return output(xv, yhat, ux, uy);\n  }\n\n  loess.bandwidth = function(bw) {\n    return arguments.length ? (bandwidth = bw, loess) : bandwidth;\n  };\n\n  loess.x = function(fn) {\n    return arguments.length ? (x = fn, loess) : x;\n  };\n\n  loess.y = function(fn) {\n    return arguments.length ? (y = fn, loess) : y;\n  };\n\n  return loess;\n}\n\n// Weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// Advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  let val = xv[i],\n      left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // Step right if distance to new right edge is <= distance to old left edge\n  // Step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// Generate smoothed output points\n// Average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // Average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // Add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}"]}]}