{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\heading-atx.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\heading-atx.js","mtime":1516191690000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nmodule.exports = atxHeading;\r\nvar C_NEWLINE = '\\n';\r\nvar C_TAB = '\\t';\r\nvar C_SPACE = ' ';\r\nvar C_HASH = '#';\r\nvar MAX_ATX_COUNT = 6;\r\nfunction atxHeading(eat, value, silent) {\r\n    var self = this;\r\n    var settings = self.options;\r\n    var length = value.length + 1;\r\n    var index = -1;\r\n    var now = eat.now();\r\n    var subvalue = '';\r\n    var content = '';\r\n    var character;\r\n    var queue;\r\n    var depth;\r\n    while (++index < length) {\r\n        character = value.charAt(index);\r\n        if (character !== C_SPACE && character !== C_TAB) {\r\n            index--;\r\n            break;\r\n        }\r\n        subvalue += character;\r\n    }\r\n    depth = 0;\r\n    while (++index <= length) {\r\n        character = value.charAt(index);\r\n        if (character !== C_HASH) {\r\n            index--;\r\n            break;\r\n        }\r\n        subvalue += character;\r\n        depth++;\r\n    }\r\n    if (depth > MAX_ATX_COUNT) {\r\n        return;\r\n    }\r\n    if (!depth ||\r\n        (!settings.pedantic && value.charAt(index + 1) === C_HASH)) {\r\n        return;\r\n    }\r\n    length = value.length + 1;\r\n    queue = '';\r\n    while (++index < length) {\r\n        character = value.charAt(index);\r\n        if (character !== C_SPACE && character !== C_TAB) {\r\n            index--;\r\n            break;\r\n        }\r\n        queue += character;\r\n    }\r\n    if (!settings.pedantic &&\r\n        queue.length === 0 &&\r\n        character &&\r\n        character !== C_NEWLINE) {\r\n        return;\r\n    }\r\n    if (silent) {\r\n        return true;\r\n    }\r\n    subvalue += queue;\r\n    queue = '';\r\n    content = '';\r\n    while (++index < length) {\r\n        character = value.charAt(index);\r\n        if (!character || character === C_NEWLINE) {\r\n            break;\r\n        }\r\n        if (character !== C_SPACE &&\r\n            character !== C_TAB &&\r\n            character !== C_HASH) {\r\n            content += queue + character;\r\n            queue = '';\r\n            continue;\r\n        }\r\n        while (character === C_SPACE || character === C_TAB) {\r\n            queue += character;\r\n            character = value.charAt(++index);\r\n        }\r\n        while (character === C_HASH) {\r\n            queue += character;\r\n            character = value.charAt(++index);\r\n        }\r\n        while (character === C_SPACE || character === C_TAB) {\r\n            queue += character;\r\n            character = value.charAt(++index);\r\n        }\r\n        index--;\r\n    }\r\n    now.column += subvalue.length;\r\n    now.offset += subvalue.length;\r\n    subvalue += content + queue;\r\n    return eat(subvalue)({\r\n        type: 'heading',\r\n        depth: depth,\r\n        children: self.tokenizeInline(content, now)\r\n    });\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\heading-atx.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\tokenize\\heading-atx.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = atxHeading;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\n\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n\n  /* Eat initial spacing. */\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n\n  /* Eat hashes. */\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (\n    !depth ||\n    (!settings.pedantic && value.charAt(index + 1) === C_HASH)\n  ) {\n    return;\n  }\n\n  length = value.length + 1;\n\n  /* Eat intermediate white-space. */\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n\n  /* Exit when not in pedantic mode without spacing. */\n  if (\n    !settings.pedantic &&\n    queue.length === 0 &&\n    character &&\n    character !== C_NEWLINE\n  ) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  /* Eat content. */\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (\n      character !== C_SPACE &&\n      character !== C_TAB &&\n      character !== C_HASH\n    ) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}\n"]}]}