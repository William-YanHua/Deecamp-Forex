{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/vanDerGrinten.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/vanDerGrinten.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math\";\nexport function vanDerGrintenRaw(lambda, phi) {\n    if (abs(phi) < epsilon)\n        return [lambda, 0];\n    var sinTheta = abs(phi / halfPi), theta = asin(sinTheta);\n    if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon)\n        return [0, sign(phi) * pi * tan(theta / 2)];\n    var cosTheta = cos(theta), A = abs(pi / lambda - lambda / pi) / 2, A2 = A * A, G = cosTheta / (sinTheta + cosTheta - 1), P = G * (2 / sinTheta - 1), P2 = P * P, P2_A2 = P2 + A2, G_P2 = G - P2, Q = A2 + G;\n    return [\n        sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n        sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n    ];\n}\nvanDerGrintenRaw.invert = function (x, y) {\n    if (abs(y) < epsilon)\n        return [x, 0];\n    if (abs(x) < epsilon)\n        return [0, halfPi * sin(2 * atan(y / pi))];\n    var x2 = (x /= pi) * x, y2 = (y /= pi) * y, x2_y2 = x2 + y2, z = x2_y2 * x2_y2, c1 = -abs(y) * (1 + x2_y2), c2 = c1 - 2 * y2 + x2, c3 = -2 * c1 + 1 + 2 * y2 + z, d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27, a1 = (c1 - c2 * c2 / (3 * c3)) / c3, m1 = 2 * sqrt(-a1 / 3), theta1 = acos(3 * d / (a1 * m1)) / 3;\n    return [\n        pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n        sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n    ];\n};\nexport default function () {\n    return projection(vanDerGrintenRaw)\n        .scale(79.4183);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/vanDerGrinten.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/vanDerGrinten.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n"]}]}