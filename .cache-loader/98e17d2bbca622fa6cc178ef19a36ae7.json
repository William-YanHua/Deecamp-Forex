{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-sankey\\src\\sankey.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-sankey\\src\\sankey.js","mtime":1497371078000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { ascending, min, sum } from \"d3-array\";\r\nimport { map, nest } from \"d3-collection\";\r\nimport { justify } from \"./align\";\r\nimport constant from \"./constant\";\r\nfunction ascendingSourceBreadth(a, b) {\r\n    return ascendingBreadth(a.source, b.source) || a.index - b.index;\r\n}\r\nfunction ascendingTargetBreadth(a, b) {\r\n    return ascendingBreadth(a.target, b.target) || a.index - b.index;\r\n}\r\nfunction ascendingBreadth(a, b) {\r\n    return a.y0 - b.y0;\r\n}\r\nfunction value(d) {\r\n    return d.value;\r\n}\r\nfunction nodeCenter(node) {\r\n    return (node.y0 + node.y1) / 2;\r\n}\r\nfunction weightedSource(link) {\r\n    return nodeCenter(link.source) * link.value;\r\n}\r\nfunction weightedTarget(link) {\r\n    return nodeCenter(link.target) * link.value;\r\n}\r\nfunction defaultId(d) {\r\n    return d.index;\r\n}\r\nfunction defaultNodes(graph) {\r\n    return graph.nodes;\r\n}\r\nfunction defaultLinks(graph) {\r\n    return graph.links;\r\n}\r\nfunction find(nodeById, id) {\r\n    var node = nodeById.get(id);\r\n    if (!node)\r\n        throw new Error(\"missing: \" + id);\r\n    return node;\r\n}\r\nexport default function () {\r\n    var x0 = 0, y0 = 0, x1 = 1, y1 = 1, dx = 24, py = 8, id = defaultId, align = justify, nodes = defaultNodes, links = defaultLinks, iterations = 32;\r\n    function sankey() {\r\n        var graph = { nodes: nodes.apply(null, arguments), links: links.apply(null, arguments) };\r\n        computeNodeLinks(graph);\r\n        computeNodeValues(graph);\r\n        computeNodeDepths(graph);\r\n        computeNodeBreadths(graph, iterations);\r\n        computeLinkBreadths(graph);\r\n        return graph;\r\n    }\r\n    sankey.update = function (graph) {\r\n        computeLinkBreadths(graph);\r\n        return graph;\r\n    };\r\n    sankey.nodeId = function (_) {\r\n        return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\r\n    };\r\n    sankey.nodeAlign = function (_) {\r\n        return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\r\n    };\r\n    sankey.nodeWidth = function (_) {\r\n        return arguments.length ? (dx = +_, sankey) : dx;\r\n    };\r\n    sankey.nodePadding = function (_) {\r\n        return arguments.length ? (py = +_, sankey) : py;\r\n    };\r\n    sankey.nodes = function (_) {\r\n        return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\r\n    };\r\n    sankey.links = function (_) {\r\n        return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\r\n    };\r\n    sankey.size = function (_) {\r\n        return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\r\n    };\r\n    sankey.extent = function (_) {\r\n        return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\r\n    };\r\n    sankey.iterations = function (_) {\r\n        return arguments.length ? (iterations = +_, sankey) : iterations;\r\n    };\r\n    function computeNodeLinks(graph) {\r\n        graph.nodes.forEach(function (node, i) {\r\n            node.index = i;\r\n            node.sourceLinks = [];\r\n            node.targetLinks = [];\r\n        });\r\n        var nodeById = map(graph.nodes, id);\r\n        graph.links.forEach(function (link, i) {\r\n            link.index = i;\r\n            var source = link.source, target = link.target;\r\n            if (typeof source !== \"object\")\r\n                source = link.source = find(nodeById, source);\r\n            if (typeof target !== \"object\")\r\n                target = link.target = find(nodeById, target);\r\n            source.sourceLinks.push(link);\r\n            target.targetLinks.push(link);\r\n        });\r\n    }\r\n    function computeNodeValues(graph) {\r\n        graph.nodes.forEach(function (node) {\r\n            node.value = Math.max(sum(node.sourceLinks, value), sum(node.targetLinks, value));\r\n        });\r\n    }\r\n    function computeNodeDepths(graph) {\r\n        var nodes, next, x;\r\n        for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\r\n            nodes.forEach(function (node) {\r\n                node.depth = x;\r\n                node.sourceLinks.forEach(function (link) {\r\n                    if (next.indexOf(link.target) < 0) {\r\n                        next.push(link.target);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\r\n            nodes.forEach(function (node) {\r\n                node.height = x;\r\n                node.targetLinks.forEach(function (link) {\r\n                    if (next.indexOf(link.source) < 0) {\r\n                        next.push(link.source);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        var kx = (x1 - x0 - dx) / (x - 1);\r\n        graph.nodes.forEach(function (node) {\r\n            node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\r\n        });\r\n    }\r\n    function computeNodeBreadths(graph) {\r\n        var columns = nest()\r\n            .key(function (d) { return d.x0; })\r\n            .sortKeys(ascending)\r\n            .entries(graph.nodes)\r\n            .map(function (d) { return d.values; });\r\n        initializeNodeBreadth();\r\n        resolveCollisions();\r\n        for (var alpha = 1, n = iterations; n > 0; --n) {\r\n            relaxRightToLeft(alpha *= 0.99);\r\n            resolveCollisions();\r\n            relaxLeftToRight(alpha);\r\n            resolveCollisions();\r\n        }\r\n        function initializeNodeBreadth() {\r\n            var ky = min(columns, function (nodes) {\r\n                return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\r\n            });\r\n            columns.forEach(function (nodes) {\r\n                nodes.forEach(function (node, i) {\r\n                    node.y1 = (node.y0 = i) + node.value * ky;\r\n                });\r\n            });\r\n            graph.links.forEach(function (link) {\r\n                link.width = link.value * ky;\r\n            });\r\n        }\r\n        function relaxLeftToRight(alpha) {\r\n            columns.forEach(function (nodes) {\r\n                nodes.forEach(function (node) {\r\n                    if (node.targetLinks.length) {\r\n                        var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\r\n                        node.y0 += dy, node.y1 += dy;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        function relaxRightToLeft(alpha) {\r\n            columns.slice().reverse().forEach(function (nodes) {\r\n                nodes.forEach(function (node) {\r\n                    if (node.sourceLinks.length) {\r\n                        var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\r\n                        node.y0 += dy, node.y1 += dy;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        function resolveCollisions() {\r\n            columns.forEach(function (nodes) {\r\n                var node, dy, y = y0, n = nodes.length, i;\r\n                nodes.sort(ascendingBreadth);\r\n                for (i = 0; i < n; ++i) {\r\n                    node = nodes[i];\r\n                    dy = y - node.y0;\r\n                    if (dy > 0)\r\n                        node.y0 += dy, node.y1 += dy;\r\n                    y = node.y1 + py;\r\n                }\r\n                dy = y - py - y1;\r\n                if (dy > 0) {\r\n                    y = (node.y0 -= dy), node.y1 -= dy;\r\n                    for (i = n - 2; i >= 0; --i) {\r\n                        node = nodes[i];\r\n                        dy = node.y1 + py - y;\r\n                        if (dy > 0)\r\n                            node.y0 -= dy, node.y1 -= dy;\r\n                        y = node.y0;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    function computeLinkBreadths(graph) {\r\n        graph.nodes.forEach(function (node) {\r\n            node.sourceLinks.sort(ascendingTargetBreadth);\r\n            node.targetLinks.sort(ascendingSourceBreadth);\r\n        });\r\n        graph.nodes.forEach(function (node) {\r\n            var y0 = node.y0, y1 = y0;\r\n            node.sourceLinks.forEach(function (link) {\r\n                link.y0 = y0 + link.width / 2, y0 += link.width;\r\n            });\r\n            node.targetLinks.forEach(function (link) {\r\n                link.y1 = y1 + link.width / 2, y1 += link.width;\r\n            });\r\n        });\r\n    }\r\n    return sankey;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-sankey\\src\\sankey.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-sankey\\src\\sankey.js"],"names":[],"mappings":"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","sourcesContent":["import {ascending, min, sum} from \"d3-array\";\nimport {map, nest} from \"d3-collection\";\nimport {justify} from \"./align\";\nimport constant from \"./constant\";\n\nfunction ascendingSourceBreadth(a, b) {\n  return ascendingBreadth(a.source, b.source) || a.index - b.index;\n}\n\nfunction ascendingTargetBreadth(a, b) {\n  return ascendingBreadth(a.target, b.target) || a.index - b.index;\n}\n\nfunction ascendingBreadth(a, b) {\n  return a.y0 - b.y0;\n}\n\nfunction value(d) {\n  return d.value;\n}\n\nfunction nodeCenter(node) {\n  return (node.y0 + node.y1) / 2;\n}\n\nfunction weightedSource(link) {\n  return nodeCenter(link.source) * link.value;\n}\n\nfunction weightedTarget(link) {\n  return nodeCenter(link.target) * link.value;\n}\n\nfunction defaultId(d) {\n  return d.index;\n}\n\nfunction defaultNodes(graph) {\n  return graph.nodes;\n}\n\nfunction defaultLinks(graph) {\n  return graph.links;\n}\n\nfunction find(nodeById, id) {\n  var node = nodeById.get(id);\n  if (!node) throw new Error(\"missing: \" + id);\n  return node;\n}\n\nexport default function() {\n  var x0 = 0, y0 = 0, x1 = 1, y1 = 1, // extent\n      dx = 24, // nodeWidth\n      py = 8, // nodePadding\n      id = defaultId,\n      align = justify,\n      nodes = defaultNodes,\n      links = defaultLinks,\n      iterations = 32;\n\n  function sankey() {\n    var graph = {nodes: nodes.apply(null, arguments), links: links.apply(null, arguments)};\n    computeNodeLinks(graph);\n    computeNodeValues(graph);\n    computeNodeDepths(graph);\n    computeNodeBreadths(graph, iterations);\n    computeLinkBreadths(graph);\n    return graph;\n  }\n\n  sankey.update = function(graph) {\n    computeLinkBreadths(graph);\n    return graph;\n  };\n\n  sankey.nodeId = function(_) {\n    return arguments.length ? (id = typeof _ === \"function\" ? _ : constant(_), sankey) : id;\n  };\n\n  sankey.nodeAlign = function(_) {\n    return arguments.length ? (align = typeof _ === \"function\" ? _ : constant(_), sankey) : align;\n  };\n\n  sankey.nodeWidth = function(_) {\n    return arguments.length ? (dx = +_, sankey) : dx;\n  };\n\n  sankey.nodePadding = function(_) {\n    return arguments.length ? (py = +_, sankey) : py;\n  };\n\n  sankey.nodes = function(_) {\n    return arguments.length ? (nodes = typeof _ === \"function\" ? _ : constant(_), sankey) : nodes;\n  };\n\n  sankey.links = function(_) {\n    return arguments.length ? (links = typeof _ === \"function\" ? _ : constant(_), sankey) : links;\n  };\n\n  sankey.size = function(_) {\n    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], sankey) : [x1 - x0, y1 - y0];\n  };\n\n  sankey.extent = function(_) {\n    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], sankey) : [[x0, y0], [x1, y1]];\n  };\n\n  sankey.iterations = function(_) {\n    return arguments.length ? (iterations = +_, sankey) : iterations;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks(graph) {\n    graph.nodes.forEach(function(node, i) {\n      node.index = i;\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    var nodeById = map(graph.nodes, id);\n    graph.links.forEach(function(link, i) {\n      link.index = i;\n      var source = link.source, target = link.target;\n      if (typeof source !== \"object\") source = link.source = find(nodeById, source);\n      if (typeof target !== \"object\") target = link.target = find(nodeById, target);\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues(graph) {\n    graph.nodes.forEach(function(node) {\n      node.value = Math.max(\n        sum(node.sourceLinks, value),\n        sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the depth (x-position) for each node.\n  // Nodes are assigned the maximum depth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned depth zero, while\n  // nodes with no outgoing links are assigned the maximum depth.\n  function computeNodeDepths(graph) {\n    var nodes, next, x;\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.depth = x;\n        node.sourceLinks.forEach(function(link) {\n          if (next.indexOf(link.target) < 0) {\n            next.push(link.target);\n          }\n        });\n      });\n    }\n\n    for (nodes = graph.nodes, next = [], x = 0; nodes.length; ++x, nodes = next, next = []) {\n      nodes.forEach(function(node) {\n        node.height = x;\n        node.targetLinks.forEach(function(link) {\n          if (next.indexOf(link.source) < 0) {\n            next.push(link.source);\n          }\n        });\n      });\n    }\n\n    var kx = (x1 - x0 - dx) / (x - 1);\n    graph.nodes.forEach(function(node) {\n      node.x1 = (node.x0 = x0 + Math.max(0, Math.min(x - 1, Math.floor(align.call(null, node, x)))) * kx) + dx;\n    });\n  }\n\n  function computeNodeBreadths(graph) {\n    var columns = nest()\n        .key(function(d) { return d.x0; })\n        .sortKeys(ascending)\n        .entries(graph.nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeBreadth();\n    resolveCollisions();\n    for (var alpha = 1, n = iterations; n > 0; --n) {\n      relaxRightToLeft(alpha *= 0.99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeBreadth() {\n      var ky = min(columns, function(nodes) {\n        return (y1 - y0 - (nodes.length - 1) * py) / sum(nodes, value);\n      });\n\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y1 = (node.y0 = i) + node.value * ky;\n        });\n      });\n\n      graph.links.forEach(function(link) {\n        link.width = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      columns.forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var dy = (sum(node.targetLinks, weightedSource) / sum(node.targetLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function relaxRightToLeft(alpha) {\n      columns.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var dy = (sum(node.sourceLinks, weightedTarget) / sum(node.sourceLinks, value) - nodeCenter(node)) * alpha;\n            node.y0 += dy, node.y1 += dy;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      columns.forEach(function(nodes) {\n        var node,\n            dy,\n            y = y0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingBreadth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y - node.y0;\n          if (dy > 0) node.y0 += dy, node.y1 += dy;\n          y = node.y1 + py;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y - py - y1;\n        if (dy > 0) {\n          y = (node.y0 -= dy), node.y1 -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y1 + py - y;\n            if (dy > 0) node.y0 -= dy, node.y1 -= dy;\n            y = node.y0;\n          }\n        }\n      });\n    }\n  }\n\n  function computeLinkBreadths(graph) {\n    graph.nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetBreadth);\n      node.targetLinks.sort(ascendingSourceBreadth);\n    });\n    graph.nodes.forEach(function(node) {\n      var y0 = node.y0, y1 = y0;\n      node.sourceLinks.forEach(function(link) {\n        link.y0 = y0 + link.width / 2, y0 += link.width;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.y1 = y1 + link.width / 2, y1 += link.width;\n      });\n    });\n  }\n\n  return sankey;\n}\n"]}]}