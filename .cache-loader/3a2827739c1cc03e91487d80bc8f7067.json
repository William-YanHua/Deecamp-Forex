{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\RedBlackTree.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\RedBlackTree.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["function RedBlackTree() {\r\n    this._ = null;\r\n}\r\nexport function RedBlackNode(node) {\r\n    node.U =\r\n        node.C =\r\n            node.L =\r\n                node.R =\r\n                    node.P =\r\n                        node.N = null;\r\n}\r\nRedBlackTree.prototype = {\r\n    constructor: RedBlackTree,\r\n    insert: function (after, node) {\r\n        var parent, grandpa, uncle;\r\n        if (after) {\r\n            node.P = after;\r\n            node.N = after.N;\r\n            if (after.N)\r\n                after.N.P = node;\r\n            after.N = node;\r\n            if (after.R) {\r\n                after = after.R;\r\n                while (after.L)\r\n                    after = after.L;\r\n                after.L = node;\r\n            }\r\n            else {\r\n                after.R = node;\r\n            }\r\n            parent = after;\r\n        }\r\n        else if (this._) {\r\n            after = RedBlackFirst(this._);\r\n            node.P = null;\r\n            node.N = after;\r\n            after.P = after.L = node;\r\n            parent = after;\r\n        }\r\n        else {\r\n            node.P = node.N = null;\r\n            this._ = node;\r\n            parent = null;\r\n        }\r\n        node.L = node.R = null;\r\n        node.U = parent;\r\n        node.C = true;\r\n        after = node;\r\n        while (parent && parent.C) {\r\n            grandpa = parent.U;\r\n            if (parent === grandpa.L) {\r\n                uncle = grandpa.R;\r\n                if (uncle && uncle.C) {\r\n                    parent.C = uncle.C = false;\r\n                    grandpa.C = true;\r\n                    after = grandpa;\r\n                }\r\n                else {\r\n                    if (after === parent.R) {\r\n                        RedBlackRotateLeft(this, parent);\r\n                        after = parent;\r\n                        parent = after.U;\r\n                    }\r\n                    parent.C = false;\r\n                    grandpa.C = true;\r\n                    RedBlackRotateRight(this, grandpa);\r\n                }\r\n            }\r\n            else {\r\n                uncle = grandpa.L;\r\n                if (uncle && uncle.C) {\r\n                    parent.C = uncle.C = false;\r\n                    grandpa.C = true;\r\n                    after = grandpa;\r\n                }\r\n                else {\r\n                    if (after === parent.L) {\r\n                        RedBlackRotateRight(this, parent);\r\n                        after = parent;\r\n                        parent = after.U;\r\n                    }\r\n                    parent.C = false;\r\n                    grandpa.C = true;\r\n                    RedBlackRotateLeft(this, grandpa);\r\n                }\r\n            }\r\n            parent = after.U;\r\n        }\r\n        this._.C = false;\r\n    },\r\n    remove: function (node) {\r\n        if (node.N)\r\n            node.N.P = node.P;\r\n        if (node.P)\r\n            node.P.N = node.N;\r\n        node.N = node.P = null;\r\n        var parent = node.U, sibling, left = node.L, right = node.R, next, red;\r\n        if (!left)\r\n            next = right;\r\n        else if (!right)\r\n            next = left;\r\n        else\r\n            next = RedBlackFirst(right);\r\n        if (parent) {\r\n            if (parent.L === node)\r\n                parent.L = next;\r\n            else\r\n                parent.R = next;\r\n        }\r\n        else {\r\n            this._ = next;\r\n        }\r\n        if (left && right) {\r\n            red = next.C;\r\n            next.C = node.C;\r\n            next.L = left;\r\n            left.U = next;\r\n            if (next !== right) {\r\n                parent = next.U;\r\n                next.U = node.U;\r\n                node = next.R;\r\n                parent.L = node;\r\n                next.R = right;\r\n                right.U = next;\r\n            }\r\n            else {\r\n                next.U = parent;\r\n                parent = next;\r\n                node = next.R;\r\n            }\r\n        }\r\n        else {\r\n            red = node.C;\r\n            node = next;\r\n        }\r\n        if (node)\r\n            node.U = parent;\r\n        if (red)\r\n            return;\r\n        if (node && node.C) {\r\n            node.C = false;\r\n            return;\r\n        }\r\n        do {\r\n            if (node === this._)\r\n                break;\r\n            if (node === parent.L) {\r\n                sibling = parent.R;\r\n                if (sibling.C) {\r\n                    sibling.C = false;\r\n                    parent.C = true;\r\n                    RedBlackRotateLeft(this, parent);\r\n                    sibling = parent.R;\r\n                }\r\n                if ((sibling.L && sibling.L.C)\r\n                    || (sibling.R && sibling.R.C)) {\r\n                    if (!sibling.R || !sibling.R.C) {\r\n                        sibling.L.C = false;\r\n                        sibling.C = true;\r\n                        RedBlackRotateRight(this, sibling);\r\n                        sibling = parent.R;\r\n                    }\r\n                    sibling.C = parent.C;\r\n                    parent.C = sibling.R.C = false;\r\n                    RedBlackRotateLeft(this, parent);\r\n                    node = this._;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                sibling = parent.L;\r\n                if (sibling.C) {\r\n                    sibling.C = false;\r\n                    parent.C = true;\r\n                    RedBlackRotateRight(this, parent);\r\n                    sibling = parent.L;\r\n                }\r\n                if ((sibling.L && sibling.L.C)\r\n                    || (sibling.R && sibling.R.C)) {\r\n                    if (!sibling.L || !sibling.L.C) {\r\n                        sibling.R.C = false;\r\n                        sibling.C = true;\r\n                        RedBlackRotateLeft(this, sibling);\r\n                        sibling = parent.L;\r\n                    }\r\n                    sibling.C = parent.C;\r\n                    parent.C = sibling.L.C = false;\r\n                    RedBlackRotateRight(this, parent);\r\n                    node = this._;\r\n                    break;\r\n                }\r\n            }\r\n            sibling.C = true;\r\n            node = parent;\r\n            parent = parent.U;\r\n        } while (!node.C);\r\n        if (node)\r\n            node.C = false;\r\n    }\r\n};\r\nfunction RedBlackRotateLeft(tree, node) {\r\n    var p = node, q = node.R, parent = p.U;\r\n    if (parent) {\r\n        if (parent.L === p)\r\n            parent.L = q;\r\n        else\r\n            parent.R = q;\r\n    }\r\n    else {\r\n        tree._ = q;\r\n    }\r\n    q.U = parent;\r\n    p.U = q;\r\n    p.R = q.L;\r\n    if (p.R)\r\n        p.R.U = p;\r\n    q.L = p;\r\n}\r\nfunction RedBlackRotateRight(tree, node) {\r\n    var p = node, q = node.L, parent = p.U;\r\n    if (parent) {\r\n        if (parent.L === p)\r\n            parent.L = q;\r\n        else\r\n            parent.R = q;\r\n    }\r\n    else {\r\n        tree._ = q;\r\n    }\r\n    q.U = parent;\r\n    p.U = q;\r\n    p.L = q.R;\r\n    if (p.L)\r\n        p.L.U = p;\r\n    q.R = p;\r\n}\r\nfunction RedBlackFirst(node) {\r\n    while (node.L)\r\n        node = node.L;\r\n    return node;\r\n}\r\nexport default RedBlackTree;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\RedBlackTree.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-voronoi\\src\\RedBlackTree.js"],"names":[],"mappings":"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","sourcesContent":["function RedBlackTree() {\n  this._ = null; // root node\n}\n\nexport function RedBlackNode(node) {\n  node.U = // parent node\n  node.C = // color - true for red, false for black\n  node.L = // left node\n  node.R = // right node\n  node.P = // previous node\n  node.N = null; // next node\n}\n\nRedBlackTree.prototype = {\n  constructor: RedBlackTree,\n\n  insert: function(after, node) {\n    var parent, grandpa, uncle;\n\n    if (after) {\n      node.P = after;\n      node.N = after.N;\n      if (after.N) after.N.P = node;\n      after.N = node;\n      if (after.R) {\n        after = after.R;\n        while (after.L) after = after.L;\n        after.L = node;\n      } else {\n        after.R = node;\n      }\n      parent = after;\n    } else if (this._) {\n      after = RedBlackFirst(this._);\n      node.P = null;\n      node.N = after;\n      after.P = after.L = node;\n      parent = after;\n    } else {\n      node.P = node.N = null;\n      this._ = node;\n      parent = null;\n    }\n    node.L = node.R = null;\n    node.U = parent;\n    node.C = true;\n\n    after = node;\n    while (parent && parent.C) {\n      grandpa = parent.U;\n      if (parent === grandpa.L) {\n        uncle = grandpa.R;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.R) {\n            RedBlackRotateLeft(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateRight(this, grandpa);\n        }\n      } else {\n        uncle = grandpa.L;\n        if (uncle && uncle.C) {\n          parent.C = uncle.C = false;\n          grandpa.C = true;\n          after = grandpa;\n        } else {\n          if (after === parent.L) {\n            RedBlackRotateRight(this, parent);\n            after = parent;\n            parent = after.U;\n          }\n          parent.C = false;\n          grandpa.C = true;\n          RedBlackRotateLeft(this, grandpa);\n        }\n      }\n      parent = after.U;\n    }\n    this._.C = false;\n  },\n\n  remove: function(node) {\n    if (node.N) node.N.P = node.P;\n    if (node.P) node.P.N = node.N;\n    node.N = node.P = null;\n\n    var parent = node.U,\n        sibling,\n        left = node.L,\n        right = node.R,\n        next,\n        red;\n\n    if (!left) next = right;\n    else if (!right) next = left;\n    else next = RedBlackFirst(right);\n\n    if (parent) {\n      if (parent.L === node) parent.L = next;\n      else parent.R = next;\n    } else {\n      this._ = next;\n    }\n\n    if (left && right) {\n      red = next.C;\n      next.C = node.C;\n      next.L = left;\n      left.U = next;\n      if (next !== right) {\n        parent = next.U;\n        next.U = node.U;\n        node = next.R;\n        parent.L = node;\n        next.R = right;\n        right.U = next;\n      } else {\n        next.U = parent;\n        parent = next;\n        node = next.R;\n      }\n    } else {\n      red = node.C;\n      node = next;\n    }\n\n    if (node) node.U = parent;\n    if (red) return;\n    if (node && node.C) { node.C = false; return; }\n\n    do {\n      if (node === this._) break;\n      if (node === parent.L) {\n        sibling = parent.R;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateLeft(this, parent);\n          sibling = parent.R;\n        }\n        if ((sibling.L && sibling.L.C)\n            || (sibling.R && sibling.R.C)) {\n          if (!sibling.R || !sibling.R.C) {\n            sibling.L.C = false;\n            sibling.C = true;\n            RedBlackRotateRight(this, sibling);\n            sibling = parent.R;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.R.C = false;\n          RedBlackRotateLeft(this, parent);\n          node = this._;\n          break;\n        }\n      } else {\n        sibling = parent.L;\n        if (sibling.C) {\n          sibling.C = false;\n          parent.C = true;\n          RedBlackRotateRight(this, parent);\n          sibling = parent.L;\n        }\n        if ((sibling.L && sibling.L.C)\n          || (sibling.R && sibling.R.C)) {\n          if (!sibling.L || !sibling.L.C) {\n            sibling.R.C = false;\n            sibling.C = true;\n            RedBlackRotateLeft(this, sibling);\n            sibling = parent.L;\n          }\n          sibling.C = parent.C;\n          parent.C = sibling.L.C = false;\n          RedBlackRotateRight(this, parent);\n          node = this._;\n          break;\n        }\n      }\n      sibling.C = true;\n      node = parent;\n      parent = parent.U;\n    } while (!node.C);\n\n    if (node) node.C = false;\n  }\n};\n\nfunction RedBlackRotateLeft(tree, node) {\n  var p = node,\n      q = node.R,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.R = q.L;\n  if (p.R) p.R.U = p;\n  q.L = p;\n}\n\nfunction RedBlackRotateRight(tree, node) {\n  var p = node,\n      q = node.L,\n      parent = p.U;\n\n  if (parent) {\n    if (parent.L === p) parent.L = q;\n    else parent.R = q;\n  } else {\n    tree._ = q;\n  }\n\n  q.U = parent;\n  p.U = q;\n  p.L = q.R;\n  if (p.L) p.L.U = p;\n  q.R = p;\n}\n\nfunction RedBlackFirst(node) {\n  while (node.L) node = node.L;\n  return node;\n}\n\nexport default RedBlackTree;\n"]}]}