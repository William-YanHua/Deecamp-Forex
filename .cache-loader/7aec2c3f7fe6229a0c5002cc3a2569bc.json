{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/enquire.js/src/MediaQueryDispatch.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/enquire.js/src/MediaQueryDispatch.js","mtime":1489491799000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\nfunction MediaQueryDispatch() {\n    if (!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\nMediaQueryDispatch.prototype = {\n    constructor: MediaQueryDispatch,\n    register: function (q, options, shouldDegrade) {\n        var queries = this.queries, isUnconditional = shouldDegrade && this.browserIsIncapable;\n        if (!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n        if (isFunction(options)) {\n            options = { match: options };\n        }\n        if (!isArray(options)) {\n            options = [options];\n        }\n        each(options, function (handler) {\n            if (isFunction(handler)) {\n                handler = { match: handler };\n            }\n            queries[q].addHandler(handler);\n        });\n        return this;\n    },\n    unregister: function (q, handler) {\n        var query = this.queries[q];\n        if (query) {\n            if (handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n        return this;\n    }\n};\nmodule.exports = MediaQueryDispatch;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/enquire.js/src/MediaQueryDispatch.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/enquire.js/src/MediaQueryDispatch.js"],"names":[],"mappings":"AAAA,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACzC,IAAI,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACjC,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAQ3B,SAAS,kBAAkB;IACvB,IAAG,CAAC,MAAM,CAAC,UAAU,EAAE;QACnB,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;KACjF;IAED,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IAClB,IAAI,CAAC,kBAAkB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC;AACrE,CAAC;AAED,kBAAkB,CAAC,SAAS,GAAG;IAE3B,WAAW,EAAG,kBAAkB;IAahC,QAAQ,EAAG,UAAS,CAAC,EAAE,OAAO,EAAE,aAAa;QACzC,IAAI,OAAO,GAAW,IAAI,CAAC,OAAO,EAC9B,eAAe,GAAG,aAAa,IAAI,IAAI,CAAC,kBAAkB,CAAC;QAE/D,IAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACZ,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;SACnD;QAGD,IAAG,UAAU,CAAC,OAAO,CAAC,EAAE;YACpB,OAAO,GAAG,EAAE,KAAK,EAAG,OAAO,EAAE,CAAC;SACjC;QACD,IAAG,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;SACvB;QACD,IAAI,CAAC,OAAO,EAAE,UAAS,OAAO;YAC1B,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;gBACrB,OAAO,GAAG,EAAE,KAAK,EAAG,OAAO,EAAE,CAAC;aACjC;YACD,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IAChB,CAAC;IAQD,UAAU,EAAG,UAAS,CAAC,EAAE,OAAO;QAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAE5B,IAAG,KAAK,EAAE;YACN,IAAG,OAAO,EAAE;gBACR,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAChC;iBACI;gBACD,KAAK,CAAC,KAAK,EAAE,CAAC;gBACd,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aAC1B;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ,CAAC;AAEF,MAAM,CAAC,OAAO,GAAG,kBAAkB,CAAC","sourcesContent":["var MediaQuery = require('./MediaQuery');\nvar Util = require('./Util');\nvar each = Util.each;\nvar isFunction = Util.isFunction;\nvar isArray = Util.isArray;\n\n/**\n * Allows for registration of query handlers.\n * Manages the query handler's state and is responsible for wiring up browser events\n *\n * @constructor\n */\nfunction MediaQueryDispatch () {\n    if(!window.matchMedia) {\n        throw new Error('matchMedia not present, legacy browsers require a polyfill');\n    }\n\n    this.queries = {};\n    this.browserIsIncapable = !window.matchMedia('only all').matches;\n}\n\nMediaQueryDispatch.prototype = {\n\n    constructor : MediaQueryDispatch,\n\n    /**\n     * Registers a handler for the given media query\n     *\n     * @param {string} q the media query\n     * @param {object || Array || Function} options either a single query handler object, a function, or an array of query handlers\n     * @param {function} options.match fired when query matched\n     * @param {function} [options.unmatch] fired when a query is no longer matched\n     * @param {function} [options.setup] fired when handler first triggered\n     * @param {boolean} [options.deferSetup=false] whether setup should be run immediately or deferred until query is first matched\n     * @param {boolean} [shouldDegrade=false] whether this particular media query should always run on incapable browsers\n     */\n    register : function(q, options, shouldDegrade) {\n        var queries         = this.queries,\n            isUnconditional = shouldDegrade && this.browserIsIncapable;\n\n        if(!queries[q]) {\n            queries[q] = new MediaQuery(q, isUnconditional);\n        }\n\n        //normalise to object in an array\n        if(isFunction(options)) {\n            options = { match : options };\n        }\n        if(!isArray(options)) {\n            options = [options];\n        }\n        each(options, function(handler) {\n            if (isFunction(handler)) {\n                handler = { match : handler };\n            }\n            queries[q].addHandler(handler);\n        });\n\n        return this;\n    },\n\n    /**\n     * unregisters a query and all it's handlers, or a specific handler for a query\n     *\n     * @param {string} q the media query to target\n     * @param {object || function} [handler] specific handler to unregister\n     */\n    unregister : function(q, handler) {\n        var query = this.queries[q];\n\n        if(query) {\n            if(handler) {\n                query.removeHandler(handler);\n            }\n            else {\n                query.clear();\n                delete this.queries[q];\n            }\n        }\n\n        return this;\n    }\n};\n\nmodule.exports = MediaQueryDispatch;\n"]}]}