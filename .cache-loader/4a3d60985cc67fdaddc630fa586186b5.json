{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\vanDerGrinten3.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\vanDerGrinten3.js","mtime":1467599198000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\r\nimport { abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan } from \"./math\";\r\nexport function vanDerGrinten3Raw(lambda, phi) {\r\n    if (abs(phi) < epsilon)\r\n        return [lambda, 0];\r\n    var sinTheta = phi / halfPi, theta = asin(sinTheta);\r\n    if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon)\r\n        return [0, pi * tan(theta / 2)];\r\n    var A = (pi / lambda - lambda / pi) / 2, y1 = sinTheta / (1 + cos(theta));\r\n    return [\r\n        pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\r\n        pi * y1\r\n    ];\r\n}\r\nvanDerGrinten3Raw.invert = function (x, y) {\r\n    if (!y)\r\n        return [x, 0];\r\n    var y1 = y / pi, A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\r\n    return [\r\n        x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\r\n        halfPi * sin(2 * atan(y1))\r\n    ];\r\n};\r\nexport default function () {\r\n    return projection(vanDerGrinten3Raw)\r\n        .scale(79.4183);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\vanDerGrinten3.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\vanDerGrinten3.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,QAAQ,CAAC;AAEvF,MAAM,UAAU,iBAAiB,CAAC,MAAM,EAAE,GAAG;IAC3C,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO;QAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC3C,IAAI,QAAQ,GAAG,GAAG,GAAG,MAAM,EACvB,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,OAAO,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO;QAAE,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/F,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC,GAAG,CAAC,EACnC,EAAE,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACrC,OAAO;QACL,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;QACnD,EAAE,GAAG,EAAE;KACR,CAAC;AACJ,CAAC;AAED,iBAAiB,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IACtC,IAAI,CAAC,CAAC;QAAE,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB,IAAI,EAAE,GAAG,CAAC,GAAG,EAAE,EACX,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACzD,OAAO;QACL,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;KAC3B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,iBAAiB,CAAC;SAC7B,KAAK,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n"]}]}