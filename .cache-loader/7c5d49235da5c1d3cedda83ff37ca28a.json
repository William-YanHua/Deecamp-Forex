{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/path.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/path.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { vec2 as vector2 } from '@antv/matrix-util';\nimport { each } from '@antv/util';\nfunction _points2path(points, isInCircle) {\n    var path = [];\n    if (points.length) {\n        for (var i = 0, length_1 = points.length; i < length_1; i += 1) {\n            var item = points[i];\n            var command = i === 0 ? 'M' : 'L';\n            path.push([command, item.x, item.y]);\n        }\n        if (isInCircle) {\n            path.push(['Z']);\n        }\n    }\n    return path;\n}\nfunction _getPointRadius(coord, point) {\n    var center = coord.getCenter();\n    var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));\n    return r;\n}\nfunction _convertArr(arr, coord) {\n    var tmp = [arr[0]];\n    for (var i = 1, len = arr.length; i < len; i = i + 2) {\n        var point = coord.convertPoint({\n            x: arr[i],\n            y: arr[i + 1],\n        });\n        tmp.push(point.x, point.y);\n    }\n    return tmp;\n}\nfunction _convertPolarPath(pre, cur, coord) {\n    var isTransposed = coord.isTransposed, startAngle = coord.startAngle, endAngle = coord.endAngle;\n    var prePoint = {\n        x: pre[1],\n        y: pre[2],\n    };\n    var curPoint = {\n        x: cur[1],\n        y: cur[2],\n    };\n    var rst = [];\n    var xDim = isTransposed ? 'y' : 'x';\n    var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);\n    var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0;\n    var flag = angleRange > Math.PI ? 1 : 0;\n    var convertPoint = coord.convertPoint(curPoint);\n    var r = _getPointRadius(coord, convertPoint);\n    if (r >= 0.5) {\n        if (angleRange === Math.PI * 2) {\n            var middlePoint = {\n                x: (curPoint.x + prePoint.x) / 2,\n                y: (curPoint.y + prePoint.y) / 2,\n            };\n            var middleConvertPoint = coord.convertPoint(middlePoint);\n            rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);\n            rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n        }\n        else {\n            rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n        }\n    }\n    return rst;\n}\nfunction _filterFullCirleLine(path) {\n    each(path, function (subPath, index) {\n        var cur = subPath;\n        if (cur[0].toLowerCase() === 'a') {\n            var pre = path[index - 1];\n            var next = path[index + 1];\n            if (next && next[0].toLowerCase() === 'a') {\n                if (pre && pre[0].toLowerCase() === 'l') {\n                    pre[0] = 'M';\n                }\n            }\n            else if (pre && pre[0].toLowerCase() === 'a') {\n                if (next && next[0].toLowerCase() === 'l') {\n                    next[0] = 'M';\n                }\n            }\n        }\n    });\n}\nexport var smoothBezier = function (points, smooth, isLoop, constraint) {\n    var cps = [];\n    var prevPoint;\n    var nextPoint;\n    var hasConstraint = !!constraint;\n    var min;\n    var max;\n    if (hasConstraint) {\n        min = [Infinity, Infinity];\n        max = [-Infinity, -Infinity];\n        for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            min = vector2.min([0, 0], min, point);\n            max = vector2.max([0, 0], max, point);\n        }\n        min = vector2.min([0, 0], min, constraint[0]);\n        max = vector2.max([0, 0], max, constraint[1]);\n    }\n    for (var i = 0, len = points.length; i < len; i++) {\n        var point = points[i];\n        if (isLoop) {\n            prevPoint = points[i ? i - 1 : len - 1];\n            nextPoint = points[(i + 1) % len];\n        }\n        else {\n            if (i === 0 || i === len - 1) {\n                cps.push(point);\n                continue;\n            }\n            else {\n                prevPoint = points[i - 1];\n                nextPoint = points[i + 1];\n            }\n        }\n        var v = [0, 0];\n        v = vector2.sub(v, nextPoint, prevPoint);\n        v = vector2.scale(v, v, smooth);\n        var d0 = vector2.distance(point, prevPoint);\n        var d1 = vector2.distance(point, nextPoint);\n        var sum = d0 + d1;\n        if (sum !== 0) {\n            d0 /= sum;\n            d1 /= sum;\n        }\n        var v1 = vector2.scale([0, 0], v, -d0);\n        var v2 = vector2.scale([0, 0], v, d1);\n        var cp0 = vector2.add([0, 0], point, v1);\n        var cp1 = vector2.add([0, 0], point, v2);\n        if (hasConstraint) {\n            cp0 = vector2.max([0, 0], cp0, min);\n            cp0 = vector2.min([0, 0], cp0, max);\n            cp1 = vector2.max([0, 0], cp1, min);\n            cp1 = vector2.min([0, 0], cp1, max);\n        }\n        cps.push(cp0);\n        cps.push(cp1);\n    }\n    if (isLoop) {\n        cps.push(cps.shift());\n    }\n    return cps;\n};\nexport function catmullRom2bezier(crp, z, constraint) {\n    var isLoop = !!z;\n    var pointList = [];\n    for (var i = 0, l = crp.length; i < l; i += 2) {\n        pointList.push([crp[i], crp[i + 1]]);\n    }\n    var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n    var len = pointList.length;\n    var d1 = [];\n    var cp1;\n    var cp2;\n    var p;\n    for (var i = 0; i < len - 1; i++) {\n        cp1 = controlPointList[i * 2];\n        cp2 = controlPointList[i * 2 + 1];\n        p = pointList[i + 1];\n        d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n    }\n    if (isLoop) {\n        cp1 = controlPointList[len];\n        cp2 = controlPointList[len + 1];\n        p = pointList[0];\n        d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n    }\n    return d1;\n}\nexport function getLinePath(points, isInCircle) {\n    return _points2path(points, isInCircle);\n}\nexport function getSplinePath(points, isInCircle, constaint) {\n    var data = [];\n    var first = points[0];\n    var prePoint = null;\n    if (points.length <= 2) {\n        return getLinePath(points, isInCircle);\n    }\n    each(points, function (point) {\n        if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n            data.push(point.x);\n            data.push(point.y);\n            prePoint = point;\n        }\n    });\n    var constraint = constaint || [\n        [0, 0],\n        [1, 1],\n    ];\n    var splinePath = catmullRom2bezier(data, isInCircle, constraint);\n    splinePath.unshift(['M', first.x, first.y]);\n    return splinePath;\n}\nexport function getPointRadius(coord, point) {\n    return _getPointRadius(coord, point);\n}\nexport function getPointAngle(coord, point) {\n    var center = coord.getCenter();\n    return Math.atan2(point.y - center.y, point.x - center.x);\n}\nexport function convertNormalPath(coord, path) {\n    var tmp = [];\n    each(path, function (subPath) {\n        var action = subPath[0];\n        switch (action.toLowerCase()) {\n            case 'm':\n            case 'l':\n            case 'c':\n                tmp.push(_convertArr(subPath, coord));\n                break;\n            case 'z':\n            default:\n                tmp.push(subPath);\n                break;\n        }\n    });\n    return tmp;\n}\nexport function convertPolarPath(coord, path) {\n    var tmp = [];\n    var pre;\n    var cur;\n    var transposed;\n    var equals;\n    each(path, function (subPath, index) {\n        var action = subPath[0];\n        switch (action.toLowerCase()) {\n            case 'm':\n            case 'c':\n            case 'q':\n                tmp.push(_convertArr(subPath, coord));\n                break;\n            case 'l':\n                pre = path[index - 1];\n                cur = subPath;\n                transposed = coord.isTransposed;\n                equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];\n                if (equals) {\n                    tmp = tmp.concat(_convertPolarPath(pre, cur, coord));\n                }\n                else {\n                    tmp.push(_convertArr(subPath, coord));\n                }\n                break;\n            case 'z':\n            default:\n                tmp.push(subPath);\n                break;\n        }\n    });\n    _filterFullCirleLine(tmp);\n    return tmp;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/path.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/util/path.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @description path 计算、转换的辅助工具\n */\nimport { vec2 as vector2 } from '@antv/matrix-util';\nimport { each } from '@antv/util';\nfunction _points2path(points, isInCircle) {\n    var path = [];\n    if (points.length) {\n        for (var i = 0, length_1 = points.length; i < length_1; i += 1) {\n            var item = points[i];\n            var command = i === 0 ? 'M' : 'L';\n            path.push([command, item.x, item.y]);\n        }\n        if (isInCircle) {\n            path.push(['Z']);\n        }\n    }\n    return path;\n}\nfunction _getPointRadius(coord, point) {\n    var center = coord.getCenter();\n    var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));\n    return r;\n}\nfunction _convertArr(arr, coord) {\n    var tmp = [arr[0]];\n    for (var i = 1, len = arr.length; i < len; i = i + 2) {\n        var point = coord.convertPoint({\n            x: arr[i],\n            y: arr[i + 1],\n        });\n        tmp.push(point.x, point.y);\n    }\n    return tmp;\n}\nfunction _convertPolarPath(pre, cur, coord) {\n    var isTransposed = coord.isTransposed, startAngle = coord.startAngle, endAngle = coord.endAngle;\n    var prePoint = {\n        x: pre[1],\n        y: pre[2],\n    };\n    var curPoint = {\n        x: cur[1],\n        y: cur[2],\n    };\n    var rst = [];\n    var xDim = isTransposed ? 'y' : 'x';\n    var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);\n    var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向\n    var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位\n    var convertPoint = coord.convertPoint(curPoint);\n    var r = _getPointRadius(coord, convertPoint);\n    if (r >= 0.5) {\n        // 小于1像素的圆在图像上无法识别\n        if (angleRange === Math.PI * 2) {\n            var middlePoint = {\n                x: (curPoint.x + prePoint.x) / 2,\n                y: (curPoint.y + prePoint.y) / 2,\n            };\n            var middleConvertPoint = coord.convertPoint(middlePoint);\n            rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);\n            rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n        }\n        else {\n            rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);\n        }\n    }\n    return rst;\n}\n// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形\nfunction _filterFullCirleLine(path) {\n    each(path, function (subPath, index) {\n        var cur = subPath;\n        if (cur[0].toLowerCase() === 'a') {\n            var pre = path[index - 1];\n            var next = path[index + 1];\n            if (next && next[0].toLowerCase() === 'a') {\n                if (pre && pre[0].toLowerCase() === 'l') {\n                    pre[0] = 'M';\n                }\n            }\n            else if (pre && pre[0].toLowerCase() === 'a') {\n                if (next && next[0].toLowerCase() === 'l') {\n                    next[0] = 'M';\n                }\n            }\n        }\n    });\n}\nexport var smoothBezier = function (points, smooth, isLoop, constraint) {\n    var cps = [];\n    var prevPoint;\n    var nextPoint;\n    var hasConstraint = !!constraint;\n    var min;\n    var max;\n    if (hasConstraint) {\n        min = [Infinity, Infinity];\n        max = [-Infinity, -Infinity];\n        for (var i = 0, l = points.length; i < l; i++) {\n            var point = points[i];\n            min = vector2.min([0, 0], min, point);\n            max = vector2.max([0, 0], max, point);\n        }\n        min = vector2.min([0, 0], min, constraint[0]);\n        max = vector2.max([0, 0], max, constraint[1]);\n    }\n    for (var i = 0, len = points.length; i < len; i++) {\n        var point = points[i];\n        if (isLoop) {\n            prevPoint = points[i ? i - 1 : len - 1];\n            nextPoint = points[(i + 1) % len];\n        }\n        else {\n            if (i === 0 || i === len - 1) {\n                cps.push(point);\n                continue;\n            }\n            else {\n                prevPoint = points[i - 1];\n                nextPoint = points[i + 1];\n            }\n        }\n        var v = [0, 0];\n        v = vector2.sub(v, nextPoint, prevPoint);\n        v = vector2.scale(v, v, smooth);\n        var d0 = vector2.distance(point, prevPoint);\n        var d1 = vector2.distance(point, nextPoint);\n        var sum = d0 + d1;\n        if (sum !== 0) {\n            d0 /= sum;\n            d1 /= sum;\n        }\n        var v1 = vector2.scale([0, 0], v, -d0);\n        var v2 = vector2.scale([0, 0], v, d1);\n        var cp0 = vector2.add([0, 0], point, v1);\n        var cp1 = vector2.add([0, 0], point, v2);\n        if (hasConstraint) {\n            cp0 = vector2.max([0, 0], cp0, min);\n            cp0 = vector2.min([0, 0], cp0, max);\n            cp1 = vector2.max([0, 0], cp1, min);\n            cp1 = vector2.min([0, 0], cp1, max);\n        }\n        cps.push(cp0);\n        cps.push(cp1);\n    }\n    if (isLoop) {\n        cps.push(cps.shift());\n    }\n    return cps;\n};\n// 贝塞尔曲线\nexport function catmullRom2bezier(crp, z, constraint) {\n    var isLoop = !!z;\n    var pointList = [];\n    for (var i = 0, l = crp.length; i < l; i += 2) {\n        pointList.push([crp[i], crp[i + 1]]);\n    }\n    var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);\n    var len = pointList.length;\n    var d1 = [];\n    var cp1;\n    var cp2;\n    var p;\n    for (var i = 0; i < len - 1; i++) {\n        cp1 = controlPointList[i * 2];\n        cp2 = controlPointList[i * 2 + 1];\n        p = pointList[i + 1];\n        d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n    }\n    if (isLoop) {\n        cp1 = controlPointList[len];\n        cp2 = controlPointList[len + 1];\n        p = pointList[0];\n        d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);\n    }\n    return d1;\n}\n// 将点连接成路径 path\nexport function getLinePath(points, isInCircle) {\n    return _points2path(points, isInCircle);\n}\n// get spline： 限定了范围的平滑线\nexport function getSplinePath(points, isInCircle, constaint) {\n    var data = [];\n    var first = points[0];\n    var prePoint = null;\n    if (points.length <= 2) {\n        // 两点以内直接绘制成路径\n        return getLinePath(points, isInCircle);\n    }\n    each(points, function (point) {\n        if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {\n            data.push(point.x);\n            data.push(point.y);\n            prePoint = point;\n        }\n    });\n    var constraint = constaint || [\n        // 范围\n        [0, 0],\n        [1, 1],\n    ];\n    var splinePath = catmullRom2bezier(data, isInCircle, constraint);\n    splinePath.unshift(['M', first.x, first.y]);\n    return splinePath;\n}\n// 获取点到圆心的距离\nexport function getPointRadius(coord, point) {\n    return _getPointRadius(coord, point);\n}\n// 获取点到圆心的夹角\nexport function getPointAngle(coord, point) {\n    var center = coord.getCenter();\n    return Math.atan2(point.y - center.y, point.x - center.x);\n}\nexport function convertNormalPath(coord, path) {\n    var tmp = [];\n    each(path, function (subPath) {\n        var action = subPath[0];\n        switch (action.toLowerCase()) {\n            case 'm':\n            case 'l':\n            case 'c':\n                tmp.push(_convertArr(subPath, coord));\n                break;\n            case 'z':\n            default:\n                tmp.push(subPath);\n                break;\n        }\n    });\n    return tmp;\n}\nexport function convertPolarPath(coord, path) {\n    var tmp = [];\n    var pre;\n    var cur;\n    var transposed;\n    var equals;\n    each(path, function (subPath, index) {\n        var action = subPath[0];\n        switch (action.toLowerCase()) {\n            case 'm':\n            case 'c':\n            case 'q':\n                tmp.push(_convertArr(subPath, coord));\n                break;\n            case 'l':\n                pre = path[index - 1];\n                cur = subPath;\n                transposed = coord.isTransposed;\n                // 是否半径相同，转换成圆弧\n                equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];\n                if (equals) {\n                    tmp = tmp.concat(_convertPolarPath(pre, cur, coord));\n                }\n                else {\n                    // y 不相等，所以直接转换\n                    tmp.push(_convertArr(subPath, coord));\n                }\n                break;\n            case 'z':\n            default:\n                tmp.push(subPath);\n                break;\n        }\n    });\n    _filterFullCirleLine(tmp); // 过滤多余的直线\n    return tmp;\n}\n//# sourceMappingURL=path.js.map"]}]}