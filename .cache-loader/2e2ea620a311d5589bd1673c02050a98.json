{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\decode.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\decode.js","mtime":1516201759000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar xtend = require('xtend');\r\nvar entities = require('parse-entities');\r\nmodule.exports = factory;\r\nfunction factory(ctx) {\r\n    decoder.raw = decodeRaw;\r\n    return decoder;\r\n    function normalize(position) {\r\n        var offsets = ctx.offset;\r\n        var line = position.line;\r\n        var result = [];\r\n        while (++line) {\r\n            if (!(line in offsets)) {\r\n                break;\r\n            }\r\n            result.push((offsets[line] || 0) + 1);\r\n        }\r\n        return {\r\n            start: position,\r\n            indent: result\r\n        };\r\n    }\r\n    function handleWarning(reason, position, code) {\r\n        if (code === 3) {\r\n            return;\r\n        }\r\n        ctx.file.message(reason, position);\r\n    }\r\n    function decoder(value, position, handler) {\r\n        entities(value, {\r\n            position: normalize(position),\r\n            warning: handleWarning,\r\n            text: handler,\r\n            reference: handler,\r\n            textContext: ctx,\r\n            referenceContext: ctx\r\n        });\r\n    }\r\n    function decodeRaw(value, position, options) {\r\n        return entities(value, xtend(options, {\r\n            position: normalize(position),\r\n            warning: handleWarning\r\n        }));\r\n    }\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\decode.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\remark-parse\\lib\\decode.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAI,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,IAAI,QAAQ,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAEzC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;AAGzB,SAAS,OAAO,CAAC,GAAG;IAClB,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;IAExB,OAAO,OAAO,CAAC;IAGf,SAAS,SAAS,CAAC,QAAQ;QACzB,IAAI,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC;QACzB,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QACzB,IAAI,MAAM,GAAG,EAAE,CAAC;QAEhB,OAAO,EAAE,IAAI,EAAE;YACb,IAAI,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE;gBACtB,MAAM;aACP;YAED,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACvC;QAED,OAAO;YACL,KAAK,EAAE,QAAQ;YACf,MAAM,EAAE,MAAM;SACf,CAAC;IACJ,CAAC;IAKD,SAAS,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI;QAC3C,IAAI,IAAI,KAAK,CAAC,EAAE;YACd,OAAO;SACR;QAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAGD,SAAS,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO;QACvC,QAAQ,CAAC,KAAK,EAAE;YACd,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC;YAC7B,OAAO,EAAE,aAAa;YACtB,IAAI,EAAE,OAAO;YACb,SAAS,EAAE,OAAO;YAClB,WAAW,EAAE,GAAG;YAChB,gBAAgB,EAAE,GAAG;SACtB,CAAC,CAAC;IACL,CAAC;IAGD,SAAS,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,OAAO;QACzC,OAAO,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE;YACpC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC;YAC7B,OAAO,EAAE,aAAa;SACvB,CAAC,CAAC,CAAC;IACN,CAAC;AACH,CAAC","sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\nvar entities = require('parse-entities');\n\nmodule.exports = factory;\n\n/* Factory to create an entity decoder. */\nfunction factory(ctx) {\n  decoder.raw = decodeRaw;\n\n  return decoder;\n\n  /* Normalize `position` to add an `indent`. */\n  function normalize(position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    var result = [];\n\n    while (++line) {\n      if (!(line in offsets)) {\n        break;\n      }\n\n      result.push((offsets[line] || 0) + 1);\n    }\n\n    return {\n      start: position,\n      indent: result\n    };\n  }\n\n  /* Handle a warning.\n   * See https://github.com/wooorm/parse-entities\n   * for the warnings. */\n  function handleWarning(reason, position, code) {\n    if (code === 3) {\n      return;\n    }\n\n    ctx.file.message(reason, position);\n  }\n\n  /* Decode `value` (at `position`) into text-nodes. */\n  function decoder(value, position, handler) {\n    entities(value, {\n      position: normalize(position),\n      warning: handleWarning,\n      text: handler,\n      reference: handler,\n      textContext: ctx,\n      referenceContext: ctx\n    });\n  }\n\n  /* Decode `value` (at `position`) into a string. */\n  function decodeRaw(value, position, options) {\n    return entities(value, xtend(options, {\n      position: normalize(position),\n      warning: handleWarning\n    }));\n  }\n}\n"]}]}