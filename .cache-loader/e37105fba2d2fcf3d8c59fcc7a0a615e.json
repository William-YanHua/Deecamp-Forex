{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layout/squarify.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layout/squarify.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { dice } from './dice';\nimport { slice } from './slice';\nvar ratio = (1 + Math.sqrt(5)) / 2;\nexport default function squarify(root, x0, y0, x1, y1) {\n    var children = root.children;\n    var value = root.value;\n    children.sort(function (a, b) {\n        return b.value - a.value;\n    });\n    var rows = [];\n    var sumValue, maxValue, minValue;\n    var alpha, beta;\n    var newRatio, minRatio;\n    var nodeValue;\n    var i = 0, j = 0;\n    while (i < children.length) {\n        var width = x1 - x0;\n        var height = y1 - y0;\n        sumValue = children[j++].value;\n        maxValue = sumValue;\n        minValue = sumValue;\n        alpha = Math.max(height / width, width / height) / (value * ratio);\n        beta = sumValue * sumValue * alpha;\n        minRatio = Math.max(maxValue / beta, beta / minValue);\n        for (; j < children.length; j++) {\n            nodeValue = children[j].value;\n            sumValue += nodeValue;\n            if (nodeValue < minValue)\n                minValue = nodeValue;\n            if (nodeValue > maxValue)\n                maxValue = nodeValue;\n            beta = sumValue * sumValue * alpha;\n            newRatio = Math.max(maxValue / beta, beta / minValue);\n            if (newRatio > minRatio) {\n                sumValue -= nodeValue;\n                break;\n            }\n            minRatio = newRatio;\n        }\n        var row = { value: sumValue, dice: width < height, children: children.slice(i, j) };\n        rows.push(row);\n        if (row.dice) {\n            var h = value ? (height * sumValue) / value : height;\n            dice(row, x0, y0, x1, y0 + h);\n            if (value) {\n                y0 += h;\n            }\n        }\n        else {\n            var w = value ? (width * sumValue) / value : width;\n            slice(row, x0, y0, x0 + w, y1);\n            if (value) {\n                x0 += w;\n            }\n        }\n        value -= sumValue;\n        i = j;\n    }\n    return rows;\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layout/squarify.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/treemap/layout/squarify.js"],"names":[],"mappings":"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","sourcesContent":["import { dice } from './dice';\nimport { slice } from './slice';\n//reference: https://github.com/d3/d3-hierarchy/blob/master/src/treemap/squarify.js\n// 黄金分割\nvar ratio = (1 + Math.sqrt(5)) / 2;\nexport default function squarify(root, x0, y0, x1, y1) {\n    var children = root.children;\n    var value = root.value;\n    children.sort(function (a, b) {\n        return b.value - a.value;\n    });\n    var rows = [];\n    var sumValue, maxValue, minValue;\n    var alpha, beta;\n    var newRatio, minRatio;\n    var nodeValue;\n    var i = 0, j = 0;\n    // todo: 剔除empty node\n    while (i < children.length) {\n        var width = x1 - x0;\n        var height = y1 - y0;\n        sumValue = children[j++].value;\n        maxValue = sumValue;\n        minValue = sumValue;\n        alpha = Math.max(height / width, width / height) / (value * ratio);\n        beta = sumValue * sumValue * alpha;\n        minRatio = Math.max(maxValue / beta, beta / minValue);\n        for (; j < children.length; j++) {\n            nodeValue = children[j].value;\n            sumValue += nodeValue;\n            if (nodeValue < minValue)\n                minValue = nodeValue;\n            if (nodeValue > maxValue)\n                maxValue = nodeValue;\n            beta = sumValue * sumValue * alpha;\n            newRatio = Math.max(maxValue / beta, beta / minValue);\n            if (newRatio > minRatio) {\n                sumValue -= nodeValue;\n                break;\n            }\n            minRatio = newRatio;\n        }\n        var row = { value: sumValue, dice: width < height, children: children.slice(i, j) };\n        rows.push(row);\n        if (row.dice) {\n            var h = value ? (height * sumValue) / value : height;\n            dice(row, x0, y0, x1, y0 + h);\n            if (value) {\n                y0 += h;\n            }\n        }\n        else {\n            var w = value ? (width * sumValue) / value : width;\n            slice(row, x0, y0, x0 + w, y1);\n            if (value) {\n                x0 += w;\n            }\n        }\n        value -= sumValue;\n        i = j;\n    }\n    return rows;\n}\n//# sourceMappingURL=squarify.js.map"]}]}