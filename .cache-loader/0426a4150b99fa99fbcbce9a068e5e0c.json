{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g/lib/shapes/text.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g/lib/shapes/text.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Util = require('../util/index');\nvar Shape = require('../core/shape');\nvar CText = function CText(cfg) {\n    CText.superclass.constructor.call(this, cfg);\n};\nCText.ATTRS = {\n    x: 0,\n    y: 0,\n    text: null,\n    fontSize: 12,\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    fontWeight: 'normal',\n    fontVariant: 'normal',\n    textAlign: 'start',\n    textBaseline: 'bottom',\n    lineHeight: null,\n    textArr: null\n};\nUtil.extend(CText, Shape);\nUtil.augment(CText, {\n    canFill: true,\n    canStroke: true,\n    type: 'text',\n    getDefaultAttrs: function getDefaultAttrs() {\n        return {\n            lineWidth: 1,\n            lineCount: 1,\n            fontSize: 12,\n            fontFamily: 'sans-serif',\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            fontVariant: 'normal',\n            textAlign: 'start',\n            textBaseline: 'bottom'\n        };\n    },\n    initTransform: function initTransform() {\n        var fontSize = this._attrs.fontSize;\n        if (fontSize && +fontSize < 12) {\n            this.transform([['t', -1 * this._attrs.x, -1 * this._attrs.y], ['s', +fontSize / 12, +fontSize / 12], ['t', this._attrs.x, this._attrs.y]]);\n        }\n    },\n    _assembleFont: function _assembleFont() {\n        var attrs = this._attrs;\n        var fontSize = attrs.fontSize;\n        var fontFamily = attrs.fontFamily;\n        var fontWeight = attrs.fontWeight;\n        var fontStyle = attrs.fontStyle;\n        var fontVariant = attrs.fontVariant;\n        attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');\n    },\n    _setAttrText: function _setAttrText() {\n        var attrs = this._attrs;\n        var text = attrs.text;\n        var textArr = null;\n        if (Util.isString(text) && text.indexOf('\\n') !== -1) {\n            textArr = text.split('\\n');\n            var lineCount = textArr.length;\n            attrs.lineCount = lineCount;\n        }\n        attrs.textArr = textArr;\n    },\n    _getTextHeight: function _getTextHeight() {\n        var attrs = this._attrs;\n        var lineCount = attrs.lineCount;\n        var fontSize = attrs.fontSize * 1;\n        if (lineCount > 1) {\n            var spaceingY = this._getSpaceingY();\n            return fontSize * lineCount + spaceingY * (lineCount - 1);\n        }\n        return fontSize;\n    },\n    isHitBox: function isHitBox() {\n        return false;\n    },\n    calculateBox: function calculateBox() {\n        var self = this;\n        var attrs = self._attrs;\n        var cfg = this._cfg;\n        if (!cfg.attrs || cfg.hasUpdate) {\n            this._assembleFont();\n            this._setAttrText();\n        }\n        if (!attrs.textArr) {\n            this._setAttrText();\n        }\n        var x = attrs.x;\n        var y = attrs.y;\n        var width = self.measureText();\n        if (!width) {\n            return {\n                minX: x,\n                minY: y,\n                maxX: x,\n                maxY: y\n            };\n        }\n        var height = self._getTextHeight();\n        var textAlign = attrs.textAlign;\n        var textBaseline = attrs.textBaseline;\n        var lineWidth = self.getHitLineWidth();\n        var point = {\n            x: x,\n            y: y - height\n        };\n        if (textAlign) {\n            if (textAlign === 'end' || textAlign === 'right') {\n                point.x -= width;\n            }\n            else if (textAlign === 'center') {\n                point.x -= width / 2;\n            }\n        }\n        if (textBaseline) {\n            if (textBaseline === 'top') {\n                point.y += height;\n            }\n            else if (textBaseline === 'middle') {\n                point.y += height / 2;\n            }\n        }\n        this.set('startPoint', point);\n        var halfWidth = lineWidth / 2;\n        return {\n            minX: point.x - halfWidth,\n            minY: point.y - halfWidth,\n            maxX: point.x + width + halfWidth,\n            maxY: point.y + height + halfWidth\n        };\n    },\n    _getSpaceingY: function _getSpaceingY() {\n        var attrs = this._attrs;\n        var lineHeight = attrs.lineHeight;\n        var fontSize = attrs.fontSize * 1;\n        return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n    },\n    drawInner: function drawInner(context) {\n        var self = this;\n        var attrs = self._attrs;\n        var cfg = this._cfg;\n        if (!cfg.attrs || cfg.hasUpdate) {\n            this._assembleFont();\n            this._setAttrText();\n        }\n        context.font = attrs.font;\n        var text = attrs.text;\n        if (!text) {\n            return;\n        }\n        var textArr = attrs.textArr;\n        var x = attrs.x;\n        var y = attrs.y;\n        context.beginPath();\n        if (self.hasStroke()) {\n            var strokeOpacity = attrs.strokeOpacity;\n            if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {\n                context.globalAlpha = strokeOpacity;\n            }\n            if (textArr) {\n                self._drawTextArr(context, false);\n            }\n            else {\n                context.strokeText(text, x, y);\n            }\n            context.globalAlpha = 1;\n        }\n        if (self.hasFill()) {\n            var fillOpacity = attrs.fillOpacity;\n            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n                context.globalAlpha = fillOpacity;\n            }\n            if (textArr) {\n                self._drawTextArr(context, true);\n            }\n            else {\n                context.fillText(text, x, y);\n            }\n        }\n        cfg.hasUpdate = false;\n    },\n    _drawTextArr: function _drawTextArr(context, fill) {\n        var textArr = this._attrs.textArr;\n        var textBaseline = this._attrs.textBaseline;\n        var fontSize = this._attrs.fontSize * 1;\n        var spaceingY = this._getSpaceingY();\n        var x = this._attrs.x;\n        var y = this._attrs.y;\n        var box = this.getBBox();\n        var height = box.maxY - box.minY;\n        var subY;\n        Util.each(textArr, function (subText, index) {\n            subY = y + index * (spaceingY + fontSize) - height + fontSize;\n            if (textBaseline === 'middle')\n                subY += height - fontSize - (height - fontSize) / 2;\n            if (textBaseline === 'top')\n                subY += height - fontSize;\n            if (fill) {\n                context.fillText(subText, x, subY);\n            }\n            else {\n                context.strokeText(subText, x, subY);\n            }\n        });\n    },\n    measureText: function measureText() {\n        var self = this;\n        var attrs = self._attrs;\n        var text = attrs.text;\n        var font = attrs.font;\n        var textArr = attrs.textArr;\n        var measureWidth;\n        var width = 0;\n        if (Util.isNil(text))\n            return undefined;\n        var context = document.createElement('canvas').getContext('2d');\n        context.save();\n        context.font = font;\n        if (textArr) {\n            Util.each(textArr, function (subText) {\n                measureWidth = context.measureText(subText).width;\n                if (width < measureWidth) {\n                    width = measureWidth;\n                }\n                context.restore();\n            });\n        }\n        else {\n            width = context.measureText(text).width;\n            context.restore();\n        }\n        return width;\n    }\n});\nmodule.exports = CText;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g/lib/shapes/text.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g/lib/shapes/text.js"],"names":[],"mappings":"AAAA,IAAI,IAAI,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAEpC,IAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAErC,IAAI,KAAK,GAAG,SAAS,KAAK,CAAC,GAAG;IAC5B,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC/C,CAAC,CAAC;AAEF,KAAK,CAAC,KAAK,GAAG;IACZ,CAAC,EAAE,CAAC;IACJ,CAAC,EAAE,CAAC;IACJ,IAAI,EAAE,IAAI;IACV,QAAQ,EAAE,EAAE;IACZ,UAAU,EAAE,YAAY;IACxB,SAAS,EAAE,QAAQ;IACnB,UAAU,EAAE,QAAQ;IACpB,WAAW,EAAE,QAAQ;IACrB,SAAS,EAAE,OAAO;IAClB,YAAY,EAAE,QAAQ;IACtB,UAAU,EAAE,IAAI;IAChB,OAAO,EAAE,IAAI;CACd,CAAC;AACF,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;IAClB,OAAO,EAAE,IAAI;IACb,SAAS,EAAE,IAAI;IACf,IAAI,EAAE,MAAM;IACZ,eAAe,EAAE,SAAS,eAAe;QACvC,OAAO;YACL,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,CAAC;YACZ,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,YAAY;YACxB,SAAS,EAAE,QAAQ;YACnB,UAAU,EAAE,QAAQ;YACpB,WAAW,EAAE,QAAQ;YACrB,SAAS,EAAE,OAAO;YAClB,YAAY,EAAE,QAAQ;SACvB,CAAC;IACJ,CAAC;IACD,aAAa,EAAE,SAAS,aAAa;QACnC,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAEpC,IAAI,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,EAAE;YAE9B,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,GAAG,EAAE,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7I;IACH,CAAC;IACD,aAAa,EAAE,SAAS,aAAa;QAEnC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC9B,IAAI,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAClC,IAAI,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAClC,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAEhC,IAAI,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;QAGpC,KAAK,CAAC,IAAI,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,GAAG,IAAI,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3F,CAAC;IACD,YAAY,EAAE,SAAS,YAAY;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACtB,IAAI,OAAO,GAAG,IAAI,CAAC;QAEnB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YACpD,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC3B,IAAI,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC;YAC/B,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;SAC7B;QAED,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAC1B,CAAC;IACD,cAAc,EAAE,SAAS,cAAc;QACrC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAChC,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;QAElC,IAAI,SAAS,GAAG,CAAC,EAAE;YACjB,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YAErC,OAAO,QAAQ,GAAG,SAAS,GAAG,SAAS,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;SAC3D;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,QAAQ,EAAE,SAAS,QAAQ;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,YAAY,EAAE,SAAS,YAAY;QACjC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QAEpB,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAClB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAE/B,IAAI,CAAC,KAAK,EAAE;YAEV,OAAO;gBACL,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,CAAC;gBACP,IAAI,EAAE,CAAC;aACR,CAAC;SACH;QAED,IAAI,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAGnC,IAAI,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QAChC,IAAI,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;QACtC,IAAI,SAAS,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvC,IAAI,KAAK,GAAG;YACV,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC,GAAG,MAAM;SACd,CAAC;QAEF,IAAI,SAAS,EAAE;YACb,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,OAAO,EAAE;gBAChD,KAAK,CAAC,CAAC,IAAI,KAAK,CAAC;aAClB;iBAAM,IAAI,SAAS,KAAK,QAAQ,EAAE;gBACjC,KAAK,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,CAAC;aACtB;SACF;QAED,IAAI,YAAY,EAAE;YAChB,IAAI,YAAY,KAAK,KAAK,EAAE;gBAC1B,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC;aACnB;iBAAM,IAAI,YAAY,KAAK,QAAQ,EAAE;gBACpC,KAAK,CAAC,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;aACvB;SACF;QAED,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAC9B,IAAI,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;QAC9B,OAAO;YACL,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,SAAS;YACzB,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,SAAS;YACzB,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,GAAG,SAAS;YACjC,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,MAAM,GAAG,SAAS;SACnC,CAAC;IACJ,CAAC;IACD,aAAa,EAAE,SAAS,aAAa;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QAClC,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;QAClC,OAAO,UAAU,CAAC,CAAC,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC9D,CAAC;IACD,SAAS,EAAE,SAAS,SAAS,CAAC,OAAO;QACnC,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;QAEpB,IAAI,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;QAED,OAAO,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QAC1B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QAEtB,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QAED,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAChB,OAAO,CAAC,SAAS,EAAE,CAAC;QAEpB,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE;YACpB,IAAI,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;YAExC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,aAAa,KAAK,CAAC,EAAE;gBACrD,OAAO,CAAC,WAAW,GAAG,aAAa,CAAC;aACrC;YAED,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACnC;iBAAM;gBACL,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAChC;YAED,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC;SACzB;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,IAAI,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;YAEpC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,WAAW,KAAK,CAAC,EAAE;gBACjD,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;aACnC;YAED,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aAClC;iBAAM;gBACL,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aAC9B;SACF;QAED,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC;IACxB,CAAC;IACD,YAAY,EAAE,SAAS,YAAY,CAAC,OAAO,EAAE,IAAI;QAC/C,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAClC,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;QAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;QAExC,IAAI,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAErC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACtB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACjC,IAAI,IAAI,CAAC;QACT,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,OAAO,EAAE,KAAK;YACzC,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,MAAM,GAAG,QAAQ,CAAC;YAE9D,IAAI,YAAY,KAAK,QAAQ;gBAAE,IAAI,IAAI,MAAM,GAAG,QAAQ,GAAG,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnF,IAAI,YAAY,KAAK,KAAK;gBAAE,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC;YAEtD,IAAI,IAAI,EAAE;gBACR,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;aACpC;iBAAM;gBACL,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,WAAW,EAAE,SAAS,WAAW;QAC/B,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QACxB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACtB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;QACtB,IAAI,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC5B,IAAI,YAAY,CAAC;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YAAE,OAAO,SAAS,CAAC;QACvC,IAAI,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChE,OAAO,CAAC,IAAI,EAAE,CAAC;QACf,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;QAEpB,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,OAAO;gBAClC,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;gBAElD,IAAI,KAAK,GAAG,YAAY,EAAE;oBACxB,KAAK,GAAG,YAAY,CAAC;iBACtB;gBAED,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YACxC,OAAO,CAAC,OAAO,EAAE,CAAC;SACnB;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC,CAAC;AACH,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC","sourcesContent":["var Util = require('../util/index');\n\nvar Shape = require('../core/shape');\n\nvar CText = function CText(cfg) {\n  CText.superclass.constructor.call(this, cfg);\n};\n\nCText.ATTRS = {\n  x: 0,\n  y: 0,\n  text: null,\n  fontSize: 12,\n  fontFamily: 'sans-serif',\n  fontStyle: 'normal',\n  fontWeight: 'normal',\n  fontVariant: 'normal',\n  textAlign: 'start',\n  textBaseline: 'bottom',\n  lineHeight: null,\n  textArr: null\n};\nUtil.extend(CText, Shape);\nUtil.augment(CText, {\n  canFill: true,\n  canStroke: true,\n  type: 'text',\n  getDefaultAttrs: function getDefaultAttrs() {\n    return {\n      lineWidth: 1,\n      lineCount: 1,\n      fontSize: 12,\n      fontFamily: 'sans-serif',\n      fontStyle: 'normal',\n      fontWeight: 'normal',\n      fontVariant: 'normal',\n      textAlign: 'start',\n      textBaseline: 'bottom'\n    };\n  },\n  initTransform: function initTransform() {\n    var fontSize = this._attrs.fontSize;\n\n    if (fontSize && +fontSize < 12) {\n      // 小于 12 像素的文本进行 scale 处理\n      this.transform([['t', -1 * this._attrs.x, -1 * this._attrs.y], ['s', +fontSize / 12, +fontSize / 12], ['t', this._attrs.x, this._attrs.y]]);\n    }\n  },\n  _assembleFont: function _assembleFont() {\n    // var self = this;\n    var attrs = this._attrs;\n    var fontSize = attrs.fontSize;\n    var fontFamily = attrs.fontFamily;\n    var fontWeight = attrs.fontWeight;\n    var fontStyle = attrs.fontStyle; // self.attr('fontStyle');\n\n    var fontVariant = attrs.fontVariant; // self.attr('fontVariant');\n    // self.attr('font', [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' '));\n\n    attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');\n  },\n  _setAttrText: function _setAttrText() {\n    var attrs = this._attrs;\n    var text = attrs.text;\n    var textArr = null;\n\n    if (Util.isString(text) && text.indexOf('\\n') !== -1) {\n      textArr = text.split('\\n');\n      var lineCount = textArr.length;\n      attrs.lineCount = lineCount;\n    }\n\n    attrs.textArr = textArr;\n  },\n  _getTextHeight: function _getTextHeight() {\n    var attrs = this._attrs;\n    var lineCount = attrs.lineCount;\n    var fontSize = attrs.fontSize * 1;\n\n    if (lineCount > 1) {\n      var spaceingY = this._getSpaceingY();\n\n      return fontSize * lineCount + spaceingY * (lineCount - 1);\n    }\n\n    return fontSize;\n  },\n  isHitBox: function isHitBox() {\n    return false;\n  },\n  calculateBox: function calculateBox() {\n    var self = this;\n    var attrs = self._attrs;\n    var cfg = this._cfg;\n\n    if (!cfg.attrs || cfg.hasUpdate) {\n      this._assembleFont();\n\n      this._setAttrText();\n    }\n\n    if (!attrs.textArr) {\n      this._setAttrText();\n    }\n\n    var x = attrs.x;\n    var y = attrs.y;\n    var width = self.measureText(); // attrs.width\n\n    if (!width) {\n      // 如果width不存在，四点共其实点\n      return {\n        minX: x,\n        minY: y,\n        maxX: x,\n        maxY: y\n      };\n    }\n\n    var height = self._getTextHeight(); // attrs.height\n\n\n    var textAlign = attrs.textAlign;\n    var textBaseline = attrs.textBaseline;\n    var lineWidth = self.getHitLineWidth();\n    var point = {\n      x: x,\n      y: y - height\n    };\n\n    if (textAlign) {\n      if (textAlign === 'end' || textAlign === 'right') {\n        point.x -= width;\n      } else if (textAlign === 'center') {\n        point.x -= width / 2;\n      }\n    }\n\n    if (textBaseline) {\n      if (textBaseline === 'top') {\n        point.y += height;\n      } else if (textBaseline === 'middle') {\n        point.y += height / 2;\n      }\n    }\n\n    this.set('startPoint', point);\n    var halfWidth = lineWidth / 2;\n    return {\n      minX: point.x - halfWidth,\n      minY: point.y - halfWidth,\n      maxX: point.x + width + halfWidth,\n      maxY: point.y + height + halfWidth\n    };\n  },\n  _getSpaceingY: function _getSpaceingY() {\n    var attrs = this._attrs;\n    var lineHeight = attrs.lineHeight;\n    var fontSize = attrs.fontSize * 1;\n    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n  },\n  drawInner: function drawInner(context) {\n    var self = this;\n    var attrs = self._attrs;\n    var cfg = this._cfg;\n\n    if (!cfg.attrs || cfg.hasUpdate) {\n      this._assembleFont();\n\n      this._setAttrText();\n    }\n\n    context.font = attrs.font;\n    var text = attrs.text;\n\n    if (!text) {\n      return;\n    }\n\n    var textArr = attrs.textArr;\n    var x = attrs.x;\n    var y = attrs.y;\n    context.beginPath();\n\n    if (self.hasStroke()) {\n      var strokeOpacity = attrs.strokeOpacity;\n\n      if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {\n        context.globalAlpha = strokeOpacity;\n      }\n\n      if (textArr) {\n        self._drawTextArr(context, false);\n      } else {\n        context.strokeText(text, x, y);\n      }\n\n      context.globalAlpha = 1;\n    }\n\n    if (self.hasFill()) {\n      var fillOpacity = attrs.fillOpacity;\n\n      if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n      }\n\n      if (textArr) {\n        self._drawTextArr(context, true);\n      } else {\n        context.fillText(text, x, y);\n      }\n    }\n\n    cfg.hasUpdate = false;\n  },\n  _drawTextArr: function _drawTextArr(context, fill) {\n    var textArr = this._attrs.textArr;\n    var textBaseline = this._attrs.textBaseline;\n    var fontSize = this._attrs.fontSize * 1;\n\n    var spaceingY = this._getSpaceingY();\n\n    var x = this._attrs.x;\n    var y = this._attrs.y;\n    var box = this.getBBox();\n    var height = box.maxY - box.minY;\n    var subY;\n    Util.each(textArr, function (subText, index) {\n      subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;\n\n      if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;\n      if (textBaseline === 'top') subY += height - fontSize;\n\n      if (fill) {\n        context.fillText(subText, x, subY);\n      } else {\n        context.strokeText(subText, x, subY);\n      }\n    });\n  },\n  measureText: function measureText() {\n    var self = this;\n    var attrs = self._attrs;\n    var text = attrs.text;\n    var font = attrs.font;\n    var textArr = attrs.textArr;\n    var measureWidth;\n    var width = 0;\n    if (Util.isNil(text)) return undefined;\n    var context = document.createElement('canvas').getContext('2d');\n    context.save();\n    context.font = font;\n\n    if (textArr) {\n      Util.each(textArr, function (subText) {\n        measureWidth = context.measureText(subText).width;\n\n        if (width < measureWidth) {\n          width = measureWidth;\n        }\n\n        context.restore();\n      });\n    } else {\n      width = context.measureText(text).width;\n      context.restore();\n    }\n\n    return width;\n  }\n});\nmodule.exports = CText;"]}]}