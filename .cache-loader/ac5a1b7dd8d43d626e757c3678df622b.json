{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/heatmap/shape.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/heatmap/shape.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { registerShape } from '../../dependents';\nimport { deepMix } from '@antv/util';\nexport function getRectPath(cx, cy, width, height, size) {\n    var w = width * size;\n    var h = height * size;\n    var path = [\n        ['M', cx - w / 2, cy + h / 2],\n        ['Q', cx - w / 2, cy, cx - w / 2, cy - h / 2],\n        ['Q', cx, cy - h / 2, cx + w / 2, cy - h / 2],\n        ['Q', cx + w / 2, cy, cx + w / 2, cy + h / 2],\n        ['Q', cx, cy + h / 2, cx - w / 2, cy + h / 2],\n        ['Z'],\n    ];\n    return path;\n}\nexport function getCirclePath(x, y, size) {\n    var path = [\n        ['M', x, y],\n        ['l', -size, 0],\n        ['a', size, size, 0, 1, 0, size * 2, 0],\n        ['a', size, size, 0, 1, 0, -(size * 2), 0],\n        ['Z'],\n    ];\n    return path;\n}\nexport function getCircleCurve(x, y, size) {\n    var path = [\n        ['M', x - size, y],\n        ['Q', x - size, y - size, x, y - size],\n        ['Q', x + size, y - size, x + size, y],\n        ['Q', x + size, y + size, x, y + size],\n        ['Q', x - size, y + size, x - size, y],\n        ['Z'],\n    ];\n    return path;\n}\nregisterShape('polygon', 'rect', {\n    draw: function (cfg, container) {\n        var points = this.parsePoints(cfg.points);\n        var width = points[2].x - points[0].x;\n        var height = points[0].y - points[1].y;\n        var centerX = points[0].x + width / 2;\n        var centerY = points[1].y + height / 2;\n        var path = getRectPath(centerX, centerY, width, height, cfg.size);\n        return container.addShape('path', {\n            attrs: deepMix({}, {\n                path: path,\n                fill: cfg.color,\n                opacity: 1,\n            }, cfg.style),\n        });\n    },\n});\nregisterShape('point', 'curvePoint', {\n    draw: function (cfg, container) {\n        var path = getCirclePath(cfg.x, cfg.y, cfg.size);\n        return container.addShape('path', {\n            attrs: deepMix({}, {\n                path: path,\n                fill: cfg.color,\n                opacity: 1,\n            }, cfg.style),\n        });\n    },\n});\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/heatmap/shape.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/esm/plots/heatmap/shape.js"],"names":[],"mappings":"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","sourcesContent":["import { registerShape } from '../../dependents';\nimport { deepMix } from '@antv/util';\nexport function getRectPath(cx, cy, width, height, size) {\n    var w = width * size;\n    var h = height * size;\n    var path = [\n        ['M', cx - w / 2, cy + h / 2],\n        ['Q', cx - w / 2, cy, cx - w / 2, cy - h / 2],\n        ['Q', cx, cy - h / 2, cx + w / 2, cy - h / 2],\n        ['Q', cx + w / 2, cy, cx + w / 2, cy + h / 2],\n        ['Q', cx, cy + h / 2, cx - w / 2, cy + h / 2],\n        ['Z'],\n    ];\n    return path;\n}\nexport function getCirclePath(x, y, size) {\n    var path = [\n        ['M', x, y],\n        ['l', -size, 0],\n        ['a', size, size, 0, 1, 0, size * 2, 0],\n        ['a', size, size, 0, 1, 0, -(size * 2), 0],\n        ['Z'],\n    ];\n    return path;\n}\nexport function getCircleCurve(x, y, size) {\n    // 计算四个角和中点\n    var path = [\n        ['M', x - size, y],\n        ['Q', x - size, y - size, x, y - size],\n        ['Q', x + size, y - size, x + size, y],\n        ['Q', x + size, y + size, x, y + size],\n        ['Q', x - size, y + size, x - size, y],\n        ['Z'],\n    ];\n    return path;\n}\nregisterShape('polygon', 'rect', {\n    draw: function (cfg, container) {\n        var points = this.parsePoints(cfg.points);\n        var width = points[2].x - points[0].x;\n        var height = points[0].y - points[1].y;\n        var centerX = points[0].x + width / 2;\n        var centerY = points[1].y + height / 2;\n        /*\n            const path = [\n              ['M', centerX - w / 2, centerY + h / 2],\n              ['L', centerX - w / 2, centerY - h / 2],\n              ['L', centerX + w / 2, centerY - h / 2],\n              ['L', centerX + w / 2, centerY + h / 2],\n              ['Z'],\n            ];\n            */\n        var path = getRectPath(centerX, centerY, width, height, cfg.size);\n        return container.addShape('path', {\n            attrs: deepMix({}, {\n                path: path,\n                fill: cfg.color,\n                opacity: 1,\n            }, cfg.style),\n        });\n    },\n});\nregisterShape('point', 'curvePoint', {\n    draw: function (cfg, container) {\n        var path = getCirclePath(cfg.x, cfg.y, cfg.size);\n        return container.addShape('path', {\n            attrs: deepMix({}, {\n                path: path,\n                fill: cfg.color,\n                opacity: 1,\n            }, cfg.style),\n        });\n    },\n});\n//# sourceMappingURL=shape.js.map"]}]}