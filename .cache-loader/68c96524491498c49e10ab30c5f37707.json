{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\facet\\tree.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\facet\\tree.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { assign, deepMix, each } from '@antv/util';\r\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\r\nimport { getFactTitleConfig } from '../util/facet';\r\nimport { Facet } from './facet';\r\nvar Tree = (function (_super) {\r\n    __extends(Tree, _super);\r\n    function Tree() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.afterChartRender = function () {\r\n            if (_this.facets && _this.cfg.line) {\r\n                _this.container.clear();\r\n                _this.drawLines(_this.facets);\r\n            }\r\n        };\r\n        return _this;\r\n    }\r\n    Tree.prototype.afterEachView = function (view, facet) {\r\n        this.processAxis(view, facet);\r\n    };\r\n    Tree.prototype.beforeEachView = function (view, facet) { };\r\n    Tree.prototype.init = function () {\r\n        _super.prototype.init.call(this);\r\n        this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\r\n    };\r\n    Tree.prototype.getDefaultCfg = function () {\r\n        return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\r\n            type: 'tree',\r\n            line: {\r\n                style: {\r\n                    lineWidth: 1,\r\n                    stroke: '#ddd',\r\n                },\r\n                smooth: false,\r\n            },\r\n            showTitle: true,\r\n            title: _super.prototype.getDefaultTitleCfg.call(this),\r\n        });\r\n    };\r\n    Tree.prototype.generateFacets = function (data) {\r\n        var fields = this.cfg.fields;\r\n        if (!fields.length) {\r\n            throw new Error('Please specify for the fields for rootFacet!');\r\n        }\r\n        var rst = [];\r\n        var rootFacet = {\r\n            type: this.cfg.type,\r\n            data: data,\r\n            region: null,\r\n            rowValuesLength: this.getRows(),\r\n            columnValuesLength: 1,\r\n            rowIndex: 0,\r\n            columnIndex: 0,\r\n            rowField: '',\r\n            columnField: '',\r\n            rowValue: '',\r\n            columnValue: '',\r\n        };\r\n        rst.push(rootFacet);\r\n        rootFacet.children = this.getChildFacets(data, 1, rst);\r\n        this.setRegion(rst);\r\n        return rst;\r\n    };\r\n    Tree.prototype.setRegion = function (facets) {\r\n        var _this = this;\r\n        this.forceColIndex(facets);\r\n        facets.forEach(function (facet) {\r\n            facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\r\n        });\r\n    };\r\n    Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\r\n        var xWidth = 1 / cols;\r\n        var yWidth = 1 / rows;\r\n        var start = {\r\n            x: xWidth * xIndex,\r\n            y: yWidth * yIndex,\r\n        };\r\n        var end = {\r\n            x: start.x + xWidth,\r\n            y: start.y + (yWidth * 2) / 3,\r\n        };\r\n        return {\r\n            start: start,\r\n            end: end,\r\n        };\r\n    };\r\n    Tree.prototype.forceColIndex = function (facets) {\r\n        var _this = this;\r\n        var leafs = [];\r\n        var index = 0;\r\n        facets.forEach(function (facet) {\r\n            if (_this.isLeaf(facet)) {\r\n                leafs.push(facet);\r\n                facet.columnIndex = index;\r\n                index++;\r\n            }\r\n        });\r\n        leafs.forEach(function (facet) {\r\n            facet.columnValuesLength = leafs.length;\r\n        });\r\n        var maxLevel = this.cfg.fields.length;\r\n        for (var i = maxLevel - 1; i >= 0; i--) {\r\n            var levelFacets = this.getFacetsByLevel(facets, i);\r\n            for (var _i = 0, levelFacets_1 = levelFacets; _i < levelFacets_1.length; _i++) {\r\n                var facet = levelFacets_1[_i];\r\n                if (!this.isLeaf(facet)) {\r\n                    facet.originColIndex = facet.columnIndex;\r\n                    facet.columnIndex = this.getRegionIndex(facet.children);\r\n                    facet.columnValuesLength = leafs.length;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Tree.prototype.getFacetsByLevel = function (facets, level) {\r\n        var rst = [];\r\n        facets.forEach(function (facet) {\r\n            if (facet.rowIndex === level) {\r\n                rst.push(facet);\r\n            }\r\n        });\r\n        return rst;\r\n    };\r\n    Tree.prototype.getRegionIndex = function (children) {\r\n        var first = children[0];\r\n        var last = children[children.length - 1];\r\n        return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\r\n    };\r\n    Tree.prototype.isLeaf = function (facet) {\r\n        return !facet.children || !facet.children.length;\r\n    };\r\n    Tree.prototype.getRows = function () {\r\n        return this.cfg.fields.length + 1;\r\n    };\r\n    Tree.prototype.getChildFacets = function (data, level, arr) {\r\n        var _this = this;\r\n        var fields = this.cfg.fields;\r\n        var length = fields.length;\r\n        if (length < level) {\r\n            return;\r\n        }\r\n        var rst = [];\r\n        var field = fields[level - 1];\r\n        var values = this.getFieldValues(data, field);\r\n        values.forEach(function (value, index) {\r\n            var conditions = [{ field: field, value: value, values: values }];\r\n            var subData = data.filter(_this.getFacetDataFilter(conditions));\r\n            if (subData.length) {\r\n                var facet = {\r\n                    type: _this.cfg.type,\r\n                    data: subData,\r\n                    region: null,\r\n                    columnValue: value,\r\n                    rowValue: '',\r\n                    columnField: field,\r\n                    rowField: '',\r\n                    columnIndex: index,\r\n                    rowValuesLength: _this.getRows(),\r\n                    columnValuesLength: 1,\r\n                    rowIndex: level,\r\n                    children: _this.getChildFacets(subData, level + 1, arr),\r\n                };\r\n                rst.push(facet);\r\n                arr.push(facet);\r\n            }\r\n        });\r\n        return rst;\r\n    };\r\n    Tree.prototype.render = function () {\r\n        _super.prototype.render.call(this);\r\n        if (this.cfg.showTitle) {\r\n            this.renderTitle();\r\n        }\r\n    };\r\n    Tree.prototype.renderTitle = function () {\r\n        var _this = this;\r\n        each(this.facets, function (facet) {\r\n            var columnValue = facet.columnValue, view = facet.view;\r\n            var config = deepMix({\r\n                position: ['50%', '0%'],\r\n                content: columnValue,\r\n            }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\r\n            view.annotation().text(config);\r\n        });\r\n    };\r\n    Tree.prototype.drawLines = function (facets) {\r\n        var _this = this;\r\n        facets.forEach(function (facet) {\r\n            if (!_this.isLeaf(facet)) {\r\n                var children = facet.children;\r\n                _this.addFacetLines(facet, children);\r\n            }\r\n        });\r\n    };\r\n    Tree.prototype.addFacetLines = function (facet, children) {\r\n        var _this = this;\r\n        var view = facet.view;\r\n        var region = view.coordinateBBox;\r\n        var start = {\r\n            x: region.x + region.width / 2,\r\n            y: region.y + region.height,\r\n        };\r\n        children.forEach(function (subFacet) {\r\n            var subRegion = subFacet.view.coordinateBBox;\r\n            var end = {\r\n                x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\r\n                y: subRegion.tr.y,\r\n            };\r\n            var middle1 = {\r\n                x: start.x,\r\n                y: start.y + (end.y - start.y) / 2,\r\n            };\r\n            var middle2 = {\r\n                x: end.x,\r\n                y: middle1.y,\r\n            };\r\n            _this.drawLine([start, middle1, middle2, end]);\r\n        });\r\n    };\r\n    Tree.prototype.getPath = function (points) {\r\n        var path = [];\r\n        var smooth = this.cfg.line.smooth;\r\n        if (smooth) {\r\n            path.push(['M', points[0].x, points[0].y]);\r\n            path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\r\n        }\r\n        else {\r\n            points.forEach(function (point, index) {\r\n                if (index === 0) {\r\n                    path.push(['M', point.x, point.y]);\r\n                }\r\n                else {\r\n                    path.push(['L', point.x, point.y]);\r\n                }\r\n            });\r\n        }\r\n        return path;\r\n    };\r\n    Tree.prototype.drawLine = function (points) {\r\n        var path = this.getPath(points);\r\n        var line = this.cfg.line.style;\r\n        this.container.addShape('path', {\r\n            attrs: assign({\r\n                path: path,\r\n            }, line),\r\n        });\r\n    };\r\n    Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\r\n        if (facet.rowIndex !== facet.rowValuesLength - 1) {\r\n            return __assign(__assign({}, option), { title: null, label: null });\r\n        }\r\n        return option;\r\n    };\r\n    Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\r\n        if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\r\n            return __assign(__assign({}, option), { title: null, label: null });\r\n        }\r\n        return option;\r\n    };\r\n    return Tree;\r\n}(Facet));\r\nexport default Tree;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\facet\\tree.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\facet\\tree.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-10\n */\nimport { assign, deepMix, each } from '@antv/util';\nimport { DIRECTION, VIEW_LIFE_CIRCLE } from '../constant';\nimport { getFactTitleConfig } from '../util/facet';\nimport { Facet } from './facet';\n/**\n * @ignore\n * Tree Facet\n */\nvar Tree = /** @class */ (function (_super) {\n    __extends(Tree, _super);\n    function Tree() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.afterChartRender = function () {\n            if (_this.facets && _this.cfg.line) {\n                _this.container.clear();\n                _this.drawLines(_this.facets);\n            }\n        };\n        return _this;\n    }\n    Tree.prototype.afterEachView = function (view, facet) {\n        this.processAxis(view, facet);\n    };\n    Tree.prototype.beforeEachView = function (view, facet) { };\n    Tree.prototype.init = function () {\n        _super.prototype.init.call(this);\n        this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, this.afterChartRender);\n    };\n    Tree.prototype.getDefaultCfg = function () {\n        return deepMix({}, _super.prototype.getDefaultCfg.call(this), {\n            type: 'tree',\n            line: {\n                style: {\n                    lineWidth: 1,\n                    stroke: '#ddd',\n                },\n                smooth: false,\n            },\n            showTitle: true,\n            title: _super.prototype.getDefaultTitleCfg.call(this),\n        });\n    };\n    Tree.prototype.generateFacets = function (data) {\n        var fields = this.cfg.fields;\n        if (!fields.length) {\n            throw new Error('Please specify for the fields for rootFacet!');\n        }\n        var rst = [];\n        var rootFacet = {\n            type: this.cfg.type,\n            data: data,\n            region: null,\n            rowValuesLength: this.getRows(),\n            columnValuesLength: 1,\n            rowIndex: 0,\n            columnIndex: 0,\n            rowField: '',\n            columnField: '',\n            rowValue: '',\n            columnValue: '',\n        };\n        rst.push(rootFacet);\n        rootFacet.children = this.getChildFacets(data, 1, rst);\n        this.setRegion(rst);\n        return rst;\n    };\n    Tree.prototype.setRegion = function (facets) {\n        var _this = this;\n        this.forceColIndex(facets);\n        facets.forEach(function (facet) {\n            // @ts-ignore 允许调整\n            facet.region = _this.getRegion(facet.rowValuesLength, facet.columnValuesLength, facet.columnIndex, facet.rowIndex);\n        });\n    };\n    Tree.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n        var xWidth = 1 / cols; // x轴方向的每个分面的偏移\n        var yWidth = 1 / rows; // y轴方向的每个分面的偏移\n        var start = {\n            x: xWidth * xIndex,\n            y: yWidth * yIndex,\n        };\n        var end = {\n            x: start.x + xWidth,\n            y: start.y + (yWidth * 2) / 3,\n        };\n        return {\n            start: start,\n            end: end,\n        };\n    };\n    Tree.prototype.forceColIndex = function (facets) {\n        var _this = this;\n        var leafs = [];\n        var index = 0;\n        facets.forEach(function (facet) {\n            if (_this.isLeaf(facet)) {\n                leafs.push(facet);\n                // @ts-ignore 允许调整\n                facet.columnIndex = index;\n                index++;\n            }\n        });\n        leafs.forEach(function (facet) {\n            // @ts-ignore\n            facet.columnValuesLength = leafs.length;\n        });\n        var maxLevel = this.cfg.fields.length;\n        for (var i = maxLevel - 1; i >= 0; i--) {\n            var levelFacets = this.getFacetsByLevel(facets, i);\n            // var yIndex = maxLevel - i;\n            for (var _i = 0, levelFacets_1 = levelFacets; _i < levelFacets_1.length; _i++) {\n                var facet = levelFacets_1[_i];\n                if (!this.isLeaf(facet)) {\n                    facet.originColIndex = facet.columnIndex;\n                    // @ts-ignore\n                    facet.columnIndex = this.getRegionIndex(facet.children);\n                    // @ts-ignore\n                    facet.columnValuesLength = leafs.length;\n                }\n            }\n        }\n    };\n    // get facet use level\n    Tree.prototype.getFacetsByLevel = function (facets, level) {\n        var rst = [];\n        facets.forEach(function (facet) {\n            if (facet.rowIndex === level) {\n                rst.push(facet);\n            }\n        });\n        return rst;\n    };\n    // if the facet has children , make it's column index in the middle of it's children\n    Tree.prototype.getRegionIndex = function (children) {\n        var first = children[0];\n        var last = children[children.length - 1];\n        return (last.columnIndex - first.columnIndex) / 2 + first.columnIndex;\n    };\n    // is  a leaf without children\n    Tree.prototype.isLeaf = function (facet) {\n        return !facet.children || !facet.children.length;\n    };\n    Tree.prototype.getRows = function () {\n        return this.cfg.fields.length + 1;\n    };\n    // get child\n    Tree.prototype.getChildFacets = function (data, level, arr) {\n        var _this = this;\n        // [ 'grade', 'class' ]\n        var fields = this.cfg.fields;\n        var length = fields.length;\n        if (length < level) {\n            return;\n        }\n        var rst = [];\n        // get fist level except root node\n        var field = fields[level - 1];\n        // get field value\n        var values = this.getFieldValues(data, field);\n        values.forEach(function (value, index) {\n            var conditions = [{ field: field, value: value, values: values }];\n            var subData = data.filter(_this.getFacetDataFilter(conditions));\n            if (subData.length) {\n                var facet = {\n                    type: _this.cfg.type,\n                    data: subData,\n                    region: null,\n                    columnValue: value,\n                    rowValue: '',\n                    columnField: field,\n                    rowField: '',\n                    columnIndex: index,\n                    rowValuesLength: _this.getRows(),\n                    columnValuesLength: 1,\n                    rowIndex: level,\n                    children: _this.getChildFacets(subData, level + 1, arr),\n                };\n                rst.push(facet);\n                arr.push(facet);\n            }\n        });\n        return rst;\n    };\n    Tree.prototype.render = function () {\n        _super.prototype.render.call(this);\n        if (this.cfg.showTitle) {\n            this.renderTitle();\n        }\n    };\n    Tree.prototype.renderTitle = function () {\n        var _this = this;\n        each(this.facets, function (facet) {\n            var columnValue = facet.columnValue, view = facet.view;\n            var config = deepMix({\n                position: ['50%', '0%'],\n                content: columnValue,\n            }, getFactTitleConfig(DIRECTION.TOP), _this.cfg.title);\n            view.annotation().text(config);\n        });\n    };\n    Tree.prototype.drawLines = function (facets) {\n        var _this = this;\n        facets.forEach(function (facet) {\n            if (!_this.isLeaf(facet)) {\n                var children = facet.children;\n                _this.addFacetLines(facet, children);\n            }\n        });\n    };\n    // add lines with it's children\n    Tree.prototype.addFacetLines = function (facet, children) {\n        var _this = this;\n        var view = facet.view;\n        var region = view.coordinateBBox;\n        // top, right, bottom, left\n        var start = {\n            x: region.x + region.width / 2,\n            y: region.y + region.height,\n        };\n        children.forEach(function (subFacet) {\n            var subRegion = subFacet.view.coordinateBBox;\n            var end = {\n                x: subRegion.bl.x + (subRegion.tr.x - subRegion.bl.x) / 2,\n                y: subRegion.tr.y,\n            };\n            var middle1 = {\n                x: start.x,\n                y: start.y + (end.y - start.y) / 2,\n            };\n            var middle2 = {\n                x: end.x,\n                y: middle1.y,\n            };\n            _this.drawLine([start, middle1, middle2, end]);\n        });\n    };\n    Tree.prototype.getPath = function (points) {\n        var path = [];\n        var smooth = this.cfg.line.smooth;\n        if (smooth) {\n            path.push(['M', points[0].x, points[0].y]);\n            path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);\n        }\n        else {\n            points.forEach(function (point, index) {\n                if (index === 0) {\n                    path.push(['M', point.x, point.y]);\n                }\n                else {\n                    path.push(['L', point.x, point.y]);\n                }\n            });\n        }\n        return path;\n    };\n    // draw line width points\n    Tree.prototype.drawLine = function (points) {\n        var path = this.getPath(points);\n        var line = this.cfg.line.style;\n        this.container.addShape('path', {\n            attrs: assign({\n                // @ts-ignore\n                path: path,\n            }, line),\n        });\n    };\n    Tree.prototype.getXAxisOption = function (x, axes, option, facet) {\n        if (facet.rowIndex !== facet.rowValuesLength - 1) {\n            return __assign(__assign({}, option), { title: null, label: null });\n        }\n        return option;\n    };\n    Tree.prototype.getYAxisOption = function (y, axes, option, facet) {\n        if (facet.originColIndex !== 0 && facet.columnIndex !== 0) {\n            return __assign(__assign({}, option), { title: null, label: null });\n        }\n        return option;\n    };\n    return Tree;\n}(Facet));\nexport default Tree;\n//# sourceMappingURL=tree.js.map"]}]}