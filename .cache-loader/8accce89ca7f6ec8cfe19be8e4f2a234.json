{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\utils\\interpose.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\utils\\interpose.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { angle, midpoint } from \"./geometry\";\r\nexport function interpose(xmin, xmax, predict) {\r\n    var l = Math.log(xmax - xmin) * Math.LOG10E + 1 | 0;\r\n    var precision = 1 * Math.pow(10, -l / 2 - 1), maxIter = 1e4;\r\n    var points = [px(xmin), px(xmax)], iter = 0;\r\n    while (find(points) && iter < maxIter)\r\n        ;\r\n    return points;\r\n    function px(x) {\r\n        return [x, predict(x)];\r\n    }\r\n    function find(points) {\r\n        iter++;\r\n        var n = points.length;\r\n        var found = false;\r\n        for (var i = 0; i < n - 1; i++) {\r\n            var p0 = points[i], p1 = points[i + 1], m = midpoint([p0, p1]), mp = px(m[0]), a0 = angle([p0, m]), a1 = angle([p0, mp]), a = Math.abs(a0 - a1);\r\n            if (a > precision) {\r\n                points.splice(i + 1, 0, mp);\r\n                found = true;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\utils\\interpose.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-regression\\src\\utils\\interpose.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAI7C,MAAM,UAAU,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO;IAC3C,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IACtD,IAAM,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,GAAG,CAAC;IAC9D,IAAI,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;IAE5C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,OAAO;QAAC,CAAC;IAEvC,OAAO,MAAM,CAAC;IAEd,SAAS,EAAE,CAAC,CAAC;QACX,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC;IAED,SAAS,IAAI,CAAC,MAAM;QAClB,IAAI,EAAE,CAAC;QACP,IAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC;QACxB,IAAI,KAAK,GAAG,KAAK,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;YAC7B,IAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,EAChB,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAClB,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EACtB,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACb,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EACnB,EAAE,GAAG,KAAK,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EACpB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;YAE1B,IAAI,CAAC,GAAG,SAAS,EAAC;gBAChB,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5B,KAAK,GAAG,IAAI,CAAC;aACd;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["import { angle, midpoint } from \"./geometry\";\n\n// Given a start point, an end point, and a prediciton function,\n// returns a smooth line.\nexport function interpose(xmin, xmax, predict){\n  const l = Math.log(xmax - xmin) * Math.LOG10E + 1 | 0;\n  const precision = 1 * Math.pow(10, -l / 2 - 1), maxIter = 1e4;\n  let points = [px(xmin), px(xmax)], iter = 0;\n\n  while (find(points) && iter < maxIter);\n\n  return points;\n  \n  function px(x){\n    return [x, predict(x)];\n  }\n\n  function find(points){\n    iter++;\n    const n = points.length;\n    let found = false;\n    \n    for (let i = 0; i < n - 1; i++){\n      const p0 = points[i],\n          p1 = points[i + 1],\n          m = midpoint([p0, p1]),\n          mp = px(m[0]),\n          a0 = angle([p0, m]),\n          a1 = angle([p0, mp]),\n          a = Math.abs(a0 - a1);\n      \n      if (a > precision){\n        points.splice(i + 1, 0, mp);\n        found = true;\n      }\n    }\n    \n    return found;\n  }\n}"]}]}