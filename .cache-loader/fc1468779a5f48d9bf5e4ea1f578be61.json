{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/centroid.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/centroid.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var assign = require('@antv/util/lib/mix');\nvar isArray = require('@antv/util/lib/type/is-array');\nvar isString = require('@antv/util/lib/type/is-string');\nvar registerTransform = require('../../data-set').registerTransform;\nvar getField = require('../../util/option-parser').getField;\nvar DEFAULT_OPTIONS = {\n    as: ['_centroid_x', '_centroid_y']\n};\nfunction transform(view, options) {\n    options = assign({}, DEFAULT_OPTIONS, options);\n    var field = getField(options);\n    var geoView = options.geoView || options.geoDataView;\n    if (isString(geoView)) {\n        geoView = view.dataSet.getView(geoView);\n    }\n    if (!geoView || geoView.dataType !== 'geo') {\n        throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');\n    }\n    var as = options.as;\n    if (!isArray(as) || as.length !== 2) {\n        throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"cX\", \"cY\" ])!');\n    }\n    var centroidX = as[0];\n    var centroidY = as[1];\n    view.rows.forEach(function (row) {\n        var feature = geoView.geoFeatureByName(row[field]);\n        if (feature) {\n            if (geoView._projectedAs) {\n                row[centroidX] = feature[geoView._projectedAs[2]];\n                row[centroidY] = feature[geoView._projectedAs[3]];\n            }\n            else {\n                row[centroidX] = feature.centroidX;\n                row[centroidY] = feature.centroidY;\n            }\n        }\n    });\n}\nregisterTransform('geo.centroid', transform);\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/centroid.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/centroid.js"],"names":[],"mappings":"AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,QAAQ,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAExD,IAAA,iBAAiB,GACf,OAAO,CAAC,gBAAgB,CAAC,kBADV,CACW;AAE5B,IAAA,QAAQ,GACN,OAAO,CAAC,0BAA0B,CAAC,SAD7B,CAC8B;AAExC,IAAM,eAAe,GAAG;IAItB,EAAE,EAAE,CAAE,aAAa,EAAE,aAAa,CAAE;CACrC,CAAC;AAEF,SAAS,SAAS,CAAC,IAAI,EAAE,OAAO;IAC9B,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC;IACrD,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;QACrB,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KACzC;IACD,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;QAC1C,MAAM,IAAI,SAAS,CAAC,sDAAsD,CAAC,CAAC;KAC7E;IACD,IAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACnC,MAAM,IAAI,SAAS,CAAC,uEAAuE,CAAC,CAAC;KAC9F;IAED,IAAM,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,IAAM,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACnB,IAAM,OAAO,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;QACrD,IAAI,OAAO,EAAE;YACX,IAAI,OAAO,CAAC,YAAY,EAAE;gBACxB,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClD,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD;iBAAM;gBACL,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;gBACnC,GAAG,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC;aACpC;SACF;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,iBAAiB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isString = require('@antv/util/lib/type/is-string');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst {\n  getField\n} = require('../../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  // field: 'name', // required\n  // geoView: view, // required\n  // geoDataView: view, // alias\n  as: [ '_centroid_x', '_centroid_y' ]\n};\n\nfunction transform(view, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const field = getField(options);\n  let geoView = options.geoView || options.geoDataView; // alias\n  if (isString(geoView)) {\n    geoView = view.dataSet.getView(geoView);\n  }\n  if (!geoView || geoView.dataType !== 'geo') {\n    throw new TypeError('Invalid geoView: must be a DataView of GEO dataType!');\n  }\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"cX\", \"cY\" ])!');\n  }\n\n  const centroidX = as[0];\n  const centroidY = as[1];\n  view.rows.forEach(row => {\n    const feature = geoView.geoFeatureByName(row[field]);\n    if (feature) {\n      if (geoView._projectedAs) {\n        row[centroidX] = feature[geoView._projectedAs[2]];\n        row[centroidY] = feature[geoView._projectedAs[3]];\n      } else {\n        row[centroidX] = feature.centroidX;\n        row[centroidY] = feature.centroidY;\n      }\n    }\n  });\n}\n\nregisterTransform('geo.centroid', transform);\n"]}]}