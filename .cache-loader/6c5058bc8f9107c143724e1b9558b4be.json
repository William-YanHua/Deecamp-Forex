{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\fill-path.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\fill-path.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["function decasteljau(points, t) {\r\n    var left = [];\r\n    var right = [];\r\n    function recurse(points, t) {\r\n        if (points.length === 1) {\r\n            left.push(points[0]);\r\n            right.push(points[0]);\r\n        }\r\n        else {\r\n            var middlePoints = [];\r\n            for (var i = 0; i < points.length - 1; i++) {\r\n                if (i === 0) {\r\n                    left.push(points[0]);\r\n                }\r\n                if (i === points.length - 2) {\r\n                    right.push(points[i + 1]);\r\n                }\r\n                middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\r\n            }\r\n            recurse(middlePoints, t);\r\n        }\r\n    }\r\n    if (points.length) {\r\n        recurse(points, t);\r\n    }\r\n    return { left: left, right: right.reverse() };\r\n}\r\nfunction splitCurve(start, end, count) {\r\n    var points = [[start[1], start[2]]];\r\n    count = count || 2;\r\n    var segments = [];\r\n    if (end[0] === 'A') {\r\n        points.push(end[6]);\r\n        points.push(end[7]);\r\n    }\r\n    else if (end[0] === 'C') {\r\n        points.push([end[1], end[2]]);\r\n        points.push([end[3], end[4]]);\r\n        points.push([end[5], end[6]]);\r\n    }\r\n    else if (end[0] === 'S' || end[0] === 'Q') {\r\n        points.push([end[1], end[2]]);\r\n        points.push([end[3], end[4]]);\r\n    }\r\n    else {\r\n        points.push([end[1], end[2]]);\r\n    }\r\n    var leftSegments = points;\r\n    var t = 1 / count;\r\n    for (var i = 0; i < count - 1; i++) {\r\n        var rt = t / (1 - t * i);\r\n        var split = decasteljau(leftSegments, rt);\r\n        segments.push(split.left);\r\n        leftSegments = split.right;\r\n    }\r\n    segments.push(leftSegments);\r\n    var result = segments.map(function (segment) {\r\n        var cmd = [];\r\n        if (segment.length === 4) {\r\n            cmd.push('C');\r\n            cmd = cmd.concat(segment[2]);\r\n        }\r\n        if (segment.length >= 3) {\r\n            if (segment.length === 3) {\r\n                cmd.push('Q');\r\n            }\r\n            cmd = cmd.concat(segment[1]);\r\n        }\r\n        if (segment.length === 2) {\r\n            cmd.push('L');\r\n        }\r\n        cmd = cmd.concat(segment[segment.length - 1]);\r\n        return cmd;\r\n    });\r\n    return result;\r\n}\r\nfunction splitSegment(start, end, count) {\r\n    if (count === 1) {\r\n        return [[].concat(start)];\r\n    }\r\n    var segments = [];\r\n    if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\r\n        segments = segments.concat(splitCurve(start, end, count));\r\n    }\r\n    else {\r\n        var temp = [].concat(start);\r\n        if (temp[0] === 'M') {\r\n            temp[0] = 'L';\r\n        }\r\n        for (var i = 0; i <= count - 1; i++) {\r\n            segments.push(temp);\r\n        }\r\n    }\r\n    return segments;\r\n}\r\nexport default function fillPath(source, target) {\r\n    if (source.length === 1) {\r\n        return source;\r\n    }\r\n    var sourceLen = source.length - 1;\r\n    var targetLen = target.length - 1;\r\n    var ratio = sourceLen / targetLen;\r\n    var segmentsToFill = [];\r\n    if (source.length === 1 && source[0][0] === 'M') {\r\n        for (var i = 0; i < targetLen - sourceLen; i++) {\r\n            source.push(source[0]);\r\n        }\r\n        return source;\r\n    }\r\n    for (var i = 0; i < targetLen; i++) {\r\n        var index = Math.floor(ratio * i);\r\n        segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\r\n    }\r\n    var filled = segmentsToFill.reduce(function (filled, count, i) {\r\n        if (i === sourceLen) {\r\n            return filled.concat(source[sourceLen]);\r\n        }\r\n        return filled.concat(splitSegment(source[i], source[i + 1], count));\r\n    }, []);\r\n    filled.unshift(source[0]);\r\n    if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\r\n        filled.push('Z');\r\n    }\r\n    return filled;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\fill-path.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\fill-path.js"],"names":[],"mappings":"AAAA,SAAS,WAAW,CAAC,MAAM,EAAE,CAAC;IAC1B,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,SAAS,OAAO,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACrB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SACzB;aACI;YACD,IAAI,YAAY,GAAG,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACT,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACxB;gBACD,IAAI,CAAC,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBACzB,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC7B;gBACD,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACpH;YACD,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;SAC5B;IACL,CAAC;IACD,IAAI,MAAM,CAAC,MAAM,EAAE;QACf,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KACtB;IACD,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC;AAClD,CAAC;AACD,SAAS,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK;IACjC,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpC,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC;IACnB,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KACvB;SACI,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACrB,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;SACI,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACvC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;SACI;QACD,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACjC;IACD,IAAI,YAAY,GAAG,MAAM,CAAC;IAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,KAAK,GAAG,WAAW,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAC1C,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC1B,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;KAC9B;IACD,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5B,IAAI,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAU,OAAO;QACvC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;YACrB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACjB;YACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACjB;QACD,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9C,OAAO,GAAG,CAAC;IACf,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AACD,SAAS,YAAY,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK;IACnC,IAAI,KAAK,KAAK,CAAC,EAAE;QACb,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;KAC7B;IACD,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACpD,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;KAC7D;SACI;QACD,IAAI,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YACjB,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;SACjB;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACjC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;KACJ;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD,MAAM,CAAC,OAAO,UAAU,QAAQ,CAAC,MAAM,EAAE,MAAM;IAC3C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,MAAM,CAAC;KACjB;IACD,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,IAAI,KAAK,GAAG,SAAS,GAAG,SAAS,CAAC;IAClC,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAC5C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC;KACjB;IACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAClC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;KAC5D;IACD,IAAI,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,UAAU,MAAM,EAAE,KAAK,EAAE,CAAC;QACzD,IAAI,CAAC,KAAK,SAAS,EAAE;YACjB,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SAC3C;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IACxE,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE;QACxD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACpB;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["function decasteljau(points, t) {\n    var left = [];\n    var right = [];\n    function recurse(points, t) {\n        if (points.length === 1) {\n            left.push(points[0]);\n            right.push(points[0]);\n        }\n        else {\n            var middlePoints = [];\n            for (var i = 0; i < points.length - 1; i++) {\n                if (i === 0) {\n                    left.push(points[0]);\n                }\n                if (i === points.length - 2) {\n                    right.push(points[i + 1]);\n                }\n                middlePoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n            }\n            recurse(middlePoints, t);\n        }\n    }\n    if (points.length) {\n        recurse(points, t);\n    }\n    return { left: left, right: right.reverse() };\n}\nfunction splitCurve(start, end, count) {\n    var points = [[start[1], start[2]]];\n    count = count || 2;\n    var segments = [];\n    if (end[0] === 'A') {\n        points.push(end[6]);\n        points.push(end[7]);\n    }\n    else if (end[0] === 'C') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n        points.push([end[5], end[6]]);\n    }\n    else if (end[0] === 'S' || end[0] === 'Q') {\n        points.push([end[1], end[2]]);\n        points.push([end[3], end[4]]);\n    }\n    else {\n        points.push([end[1], end[2]]);\n    }\n    var leftSegments = points;\n    var t = 1 / count;\n    for (var i = 0; i < count - 1; i++) {\n        var rt = t / (1 - t * i);\n        var split = decasteljau(leftSegments, rt);\n        segments.push(split.left);\n        leftSegments = split.right;\n    }\n    segments.push(leftSegments);\n    var result = segments.map(function (segment) {\n        var cmd = [];\n        if (segment.length === 4) {\n            cmd.push('C');\n            cmd = cmd.concat(segment[2]);\n        }\n        if (segment.length >= 3) {\n            if (segment.length === 3) {\n                cmd.push('Q');\n            }\n            cmd = cmd.concat(segment[1]);\n        }\n        if (segment.length === 2) {\n            cmd.push('L');\n        }\n        cmd = cmd.concat(segment[segment.length - 1]);\n        return cmd;\n    });\n    return result;\n}\nfunction splitSegment(start, end, count) {\n    if (count === 1) {\n        return [[].concat(start)];\n    }\n    var segments = [];\n    if (end[0] === 'L' || end[0] === 'C' || end[0] === 'Q') {\n        segments = segments.concat(splitCurve(start, end, count));\n    }\n    else {\n        var temp = [].concat(start);\n        if (temp[0] === 'M') {\n            temp[0] = 'L';\n        }\n        for (var i = 0; i <= count - 1; i++) {\n            segments.push(temp);\n        }\n    }\n    return segments;\n}\nexport default function fillPath(source, target) {\n    if (source.length === 1) {\n        return source;\n    }\n    var sourceLen = source.length - 1;\n    var targetLen = target.length - 1;\n    var ratio = sourceLen / targetLen;\n    var segmentsToFill = [];\n    if (source.length === 1 && source[0][0] === 'M') {\n        for (var i = 0; i < targetLen - sourceLen; i++) {\n            source.push(source[0]);\n        }\n        return source;\n    }\n    for (var i = 0; i < targetLen; i++) {\n        var index = Math.floor(ratio * i);\n        segmentsToFill[index] = (segmentsToFill[index] || 0) + 1;\n    }\n    var filled = segmentsToFill.reduce(function (filled, count, i) {\n        if (i === sourceLen) {\n            return filled.concat(source[sourceLen]);\n        }\n        return filled.concat(splitSegment(source[i], source[i + 1], count));\n    }, []);\n    filled.unshift(source[0]);\n    if (target[targetLen] === 'Z' || target[targetLen] === 'z') {\n        filled.push('Z');\n    }\n    return filled;\n}\n//# sourceMappingURL=fill-path.js.map"]}]}