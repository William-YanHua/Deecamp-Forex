{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/bin/rectangle.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/bin/rectangle.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar assign = require('@antv/util/lib/mix');\nvar forIn = require('@antv/util/lib/each');\nvar registerTransform = require('../../data-set').registerTransform;\nvar getFields = require('../../util/option-parser').getFields;\nvar DEFAULT_OPTIONS = {\n    as: ['x', 'y', 'count'],\n    bins: [30, 30],\n    offset: [0, 0],\n    sizeByCount: false\n};\nfunction nearestBin(value, scale, offset) {\n    var temp = value - offset;\n    var div = Math.floor(temp / scale);\n    return [div * scale + offset, (div + 1) * scale + offset];\n}\nfunction transform(dataView, options) {\n    options = assign({}, DEFAULT_OPTIONS, options);\n    var _a = __read(getFields(options), 2), fieldX = _a[0], fieldY = _a[1];\n    if (!fieldX || !fieldY) {\n        throw new TypeError('Invalid fields: must be an array with 2 strings!');\n    }\n    var rangeFieldX = dataView.range(fieldX);\n    var rangeFieldY = dataView.range(fieldY);\n    var widthX = rangeFieldX[1] - rangeFieldX[0];\n    var widthY = rangeFieldY[1] - rangeFieldY[0];\n    var binWidth = options.binWidth || [];\n    if (binWidth.length !== 2) {\n        var _b = __read(options.bins, 2), binsX = _b[0], binsY = _b[1];\n        if (binsX <= 0 || binsY <= 0) {\n            throw new TypeError('Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!');\n        }\n        binWidth = [widthX / binsX, widthY / binsY];\n    }\n    var points = dataView.rows.map(function (row) { return [row[fieldX], row[fieldY]]; });\n    var bins = {};\n    var _c = __read(options.offset, 2), offsetX = _c[0], offsetY = _c[1];\n    points.forEach(function (point) {\n        var _a = __read(nearestBin(point[0], binWidth[0], offsetX), 2), x0 = _a[0], x1 = _a[1];\n        var _b = __read(nearestBin(point[1], binWidth[1], offsetY), 2), y0 = _b[0], y1 = _b[1];\n        var binKey = x0 + \"-\" + x1 + \"-\" + y0 + \"-\" + y1;\n        bins[binKey] = bins[binKey] || {\n            x0: x0,\n            x1: x1,\n            y0: y0,\n            y1: y1,\n            count: 0\n        };\n        bins[binKey].count++;\n    });\n    var rows = [];\n    var _d = __read(options.as, 3), asX = _d[0], asY = _d[1], asCount = _d[2];\n    if (!asX || !asY || !asCount) {\n        throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ \"x\", \"y\", \"count\" ])!');\n    }\n    if (!options.sizeByCount) {\n        forIn(bins, function (bin) {\n            var row = {};\n            row[asX] = [bin.x0, bin.x1, bin.x1, bin.x0];\n            row[asY] = [bin.y0, bin.y0, bin.y1, bin.y1];\n            row[asCount] = bin.count;\n            rows.push(row);\n        });\n    }\n    else {\n        var maxCount_1 = 0;\n        forIn(bins, function (bin) {\n            if (bin.count > maxCount_1) {\n                maxCount_1 = bin.count;\n            }\n        });\n        forIn(bins, function (bin) {\n            var x0 = bin.x0, x1 = bin.x1, y0 = bin.y0, y1 = bin.y1, count = bin.count;\n            var scale = count / maxCount_1;\n            var _a = __read([(x0 + x1) / 2, (y0 + y1) / 2], 2), cx = _a[0], cy = _a[1];\n            var rx = (x1 - x0) * scale / 2;\n            var ry = (y1 - y0) * scale / 2;\n            var x01 = cx - rx;\n            var x11 = cx + rx;\n            var y01 = cy - ry;\n            var y11 = cy + ry;\n            var row = {};\n            row[asX] = [x01, x11, x11, x01];\n            row[asY] = [y01, y01, y11, y11];\n            row[asCount] = count;\n            rows.push(row);\n        });\n    }\n    dataView.rows = rows;\n}\nregisterTransform('bin.rectangle', transform);\nregisterTransform('bin.rect', transform);\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/bin/rectangle.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/bin/rectangle.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst forIn = require('@antv/util/lib/each');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst {\n  getFields\n} = require('../../util/option-parser');\n\nconst DEFAULT_OPTIONS = {\n  as: [ 'x', 'y', 'count' ],\n  bins: [ 30, 30 ], // Numeric vector giving number of bins in both horizontal and vertical directions\n  offset: [ 0, 0 ],\n  sizeByCount: false // calculate bin size by binning count\n  // fields: ['field0', 'field1'], // required\n  // binWidth: [ 30, 30 ], // Numeric vector giving bin width in both horizontal and vertical directions. Overrides bins if both set.\n};\n\nfunction nearestBin(value, scale, offset) {\n  const temp = value - offset;\n  const div = Math.floor(temp / scale);\n  return [ div * scale + offset, (div + 1) * scale + offset ];\n}\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const [ fieldX, fieldY ] = getFields(options);\n  if (!fieldX || !fieldY) {\n    throw new TypeError('Invalid fields: must be an array with 2 strings!');\n  }\n  const rangeFieldX = dataView.range(fieldX);\n  const rangeFieldY = dataView.range(fieldY);\n  const widthX = rangeFieldX[1] - rangeFieldX[0];\n  const widthY = rangeFieldY[1] - rangeFieldY[0];\n  let binWidth = options.binWidth || [];\n  if (binWidth.length !== 2) {\n    const [ binsX, binsY ] = options.bins;\n    if (binsX <= 0 || binsY <= 0) {\n      throw new TypeError('Invalid bins: must be an array with 2 positive numbers (e.g. [ 30, 30 ])!');\n    }\n    binWidth = [ widthX / binsX, widthY / binsY ];\n  }\n  const points = dataView.rows.map(row => [ row[fieldX], row[fieldY] ]);\n  const bins = {};\n  const [ offsetX, offsetY ] = options.offset;\n  points.forEach(point => {\n    const [ x0, x1 ] = nearestBin(point[0], binWidth[0], offsetX);\n    const [ y0, y1 ] = nearestBin(point[1], binWidth[1], offsetY);\n    const binKey = `${x0}-${x1}-${y0}-${y1}`;\n    bins[binKey] = bins[binKey] || {\n      x0,\n      x1,\n      y0,\n      y1,\n      count: 0\n    };\n    bins[binKey].count ++;\n  });\n  const rows = [];\n  const [ asX, asY, asCount ] = options.as;\n  if (!asX || !asY || !asCount) {\n    throw new TypeError('Invalid as: it must be an array with 3 strings (e.g. [ \"x\", \"y\", \"count\" ])!');\n  }\n  /* points\n   * 3---2\n   * |   |\n   * 0---1\n   */\n  if (!options.sizeByCount) {\n    forIn(bins, bin => {\n      const row = {};\n      row[asX] = [ bin.x0, bin.x1, bin.x1, bin.x0 ];\n      row[asY] = [ bin.y0, bin.y0, bin.y1, bin.y1 ];\n      row[asCount] = bin.count;\n      rows.push(row);\n    });\n  } else {\n    let maxCount = 0;\n    forIn(bins, bin => {\n      if (bin.count > maxCount) {\n        maxCount = bin.count;\n      }\n    });\n    forIn(bins, bin => {\n      const { x0, x1, y0, y1, count } = bin;\n      const scale = count / maxCount;\n      const [ cx, cy ] = [ (x0 + x1) / 2, (y0 + y1) / 2 ];\n      const rx = (x1 - x0) * scale / 2;\n      const ry = (y1 - y0) * scale / 2;\n      const x01 = cx - rx;\n      const x11 = cx + rx;\n      const y01 = cy - ry;\n      const y11 = cy + ry;\n      const row = {};\n      row[asX] = [ x01, x11, x11, x01 ];\n      row[asY] = [ y01, y01, y11, y11 ];\n      row[asCount] = count;\n      rows.push(row);\n    });\n  }\n  dataView.rows = rows;\n}\n\nregisterTransform('bin.rectangle', transform);\nregisterTransform('bin.rect', transform);\n"]}]}