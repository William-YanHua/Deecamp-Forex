{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/_baseClone.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/_baseClone.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Stack = require('./_Stack'), arrayEach = require('./_arrayEach'), assignValue = require('./_assignValue'), baseAssign = require('./_baseAssign'), baseAssignIn = require('./_baseAssignIn'), cloneBuffer = require('./_cloneBuffer'), copyArray = require('./_copyArray'), copySymbols = require('./_copySymbols'), copySymbolsIn = require('./_copySymbolsIn'), getAllKeys = require('./_getAllKeys'), getAllKeysIn = require('./_getAllKeysIn'), getTag = require('./_getTag'), initCloneArray = require('./_initCloneArray'), initCloneByTag = require('./_initCloneByTag'), initCloneObject = require('./_initCloneObject'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isMap = require('./isMap'), isObject = require('./isObject'), isSet = require('./isSet'), keys = require('./keys');\nvar CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;\nvar argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';\nvar arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\n    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\n        cloneableTags[boolTag] = cloneableTags[dateTag] =\n            cloneableTags[float32Tag] = cloneableTags[float64Tag] =\n                cloneableTags[int8Tag] = cloneableTags[int16Tag] =\n                    cloneableTags[int32Tag] = cloneableTags[mapTag] =\n                        cloneableTags[numberTag] = cloneableTags[objectTag] =\n                            cloneableTags[regexpTag] = cloneableTags[setTag] =\n                                cloneableTags[stringTag] = cloneableTags[symbolTag] =\n                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\n                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\n    cloneableTags[weakMapTag] = false;\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n    var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;\n    if (customizer) {\n        result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== undefined) {\n        return result;\n    }\n    if (!isObject(value)) {\n        return value;\n    }\n    var isArr = isArray(value);\n    if (isArr) {\n        result = initCloneArray(value);\n        if (!isDeep) {\n            return copyArray(value, result);\n        }\n    }\n    else {\n        var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;\n        if (isBuffer(value)) {\n            return cloneBuffer(value, isDeep);\n        }\n        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n            result = (isFlat || isFunc) ? {} : initCloneObject(value);\n            if (!isDeep) {\n                return isFlat\n                    ? copySymbolsIn(value, baseAssignIn(result, value))\n                    : copySymbols(value, baseAssign(result, value));\n            }\n        }\n        else {\n            if (!cloneableTags[tag]) {\n                return object ? value : {};\n            }\n            result = initCloneByTag(value, tag, isDeep);\n        }\n    }\n    stack || (stack = new Stack);\n    var stacked = stack.get(value);\n    if (stacked) {\n        return stacked;\n    }\n    stack.set(value, result);\n    if (isSet(value)) {\n        value.forEach(function (subValue) {\n            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n        });\n    }\n    else if (isMap(value)) {\n        value.forEach(function (subValue, key) {\n            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n        });\n    }\n    var keysFunc = isFull\n        ? (isFlat ? getAllKeysIn : getAllKeys)\n        : (isFlat ? keysIn : keys);\n    var props = isArr ? undefined : keysFunc(value);\n    arrayEach(props || value, function (subValue, key) {\n        if (props) {\n            key = subValue;\n            subValue = value[key];\n        }\n        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n    return result;\n}\nmodule.exports = baseClone;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/_baseClone.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/lodash/_baseClone.js"],"names":[],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"]}]}