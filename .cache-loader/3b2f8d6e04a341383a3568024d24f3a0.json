{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/index.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/index.js","mtime":1488993148000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, degrees, epsilon, pi, radians, sin } from \"../math\";\nimport { default as matrix, multiply, inverse } from \"./matrix\";\nexport default function (root, face, r) {\n    r = r == null ? -pi / 6 : r;\n    recurse(root, { transform: [\n            cos(r), sin(r), 0,\n            -sin(r), cos(r), 0\n        ] });\n    function recurse(node, parent) {\n        node.edges = faceEdges(node.face);\n        if (parent.face) {\n            var shared = node.shared = sharedEdge(node.face, parent.face), m = matrix(shared.map(parent.project), shared.map(node.project));\n            node.transform = parent.transform ? multiply(parent.transform, m) : m;\n            var edges = parent.edges;\n            for (var i = 0, n = edges.length; i < n; ++i) {\n                if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0]))\n                    edges[i] = node;\n                if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1]))\n                    edges[i] = node;\n            }\n            edges = node.edges;\n            for (i = 0, n = edges.length; i < n; ++i) {\n                if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1]))\n                    edges[i] = parent;\n                if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0]))\n                    edges[i] = parent;\n            }\n        }\n        else {\n            node.transform = parent.transform;\n        }\n        if (node.children) {\n            node.children.forEach(function (child) {\n                recurse(child, node);\n            });\n        }\n        return node;\n    }\n    function forward(lambda, phi) {\n        var node = face(lambda, phi), point = node.project([lambda * degrees, phi * degrees]), t;\n        if (t = node.transform) {\n            return [\n                t[0] * point[0] + t[1] * point[1] + t[2],\n                -(t[3] * point[0] + t[4] * point[1] + t[5])\n            ];\n        }\n        point[1] = -point[1];\n        return point;\n    }\n    if (hasInverse(root))\n        forward.invert = function (x, y) {\n            var coordinates = faceInvert(root, [x, -y]);\n            return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n        };\n    function faceInvert(node, coordinates) {\n        var invert = node.project.invert, t = node.transform, point = coordinates;\n        if (t) {\n            t = inverse(t);\n            point = [\n                t[0] * point[0] + t[1] * point[1] + t[2],\n                (t[3] * point[0] + t[4] * point[1] + t[5])\n            ];\n        }\n        if (invert && node === faceDegrees(p = invert(point)))\n            return p;\n        var p, children = node.children;\n        for (var i = 0, n = children && children.length; i < n; ++i) {\n            if (p = faceInvert(children[i], coordinates))\n                return p;\n        }\n    }\n    function faceDegrees(coordinates) {\n        return face(coordinates[0] * radians, coordinates[1] * radians);\n    }\n    var proj = projection(forward), stream_ = proj.stream;\n    proj.stream = function (stream) {\n        var rotate = proj.rotate(), rotateStream = stream_(stream), sphereStream = (proj.rotate([0, 0]), stream_(stream));\n        proj.rotate(rotate);\n        rotateStream.sphere = function () {\n            sphereStream.polygonStart();\n            sphereStream.lineStart();\n            outline(sphereStream, root);\n            sphereStream.lineEnd();\n            sphereStream.polygonEnd();\n        };\n        return rotateStream;\n    };\n    return proj;\n}\nfunction outline(stream, node, parent) {\n    var point, edges = node.edges, n = edges.length, edge, multiPoint = { type: \"MultiPoint\", coordinates: node.face }, notPoles = node.face.filter(function (d) { return abs(d[1]) !== 90; }), b = bounds({ type: \"MultiPoint\", coordinates: notPoles }), inside = false, j = -1, dx = b[1][0] - b[0][0];\n    var c = dx === 180 || dx === 360\n        ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n        : centroid(multiPoint);\n    if (parent)\n        while (++j < n) {\n            if (edges[j] === parent)\n                break;\n        }\n    ++j;\n    for (var i = 0; i < n; ++i) {\n        edge = edges[(i + j) % n];\n        if (Array.isArray(edge)) {\n            if (!inside) {\n                stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n                inside = true;\n            }\n            stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n        }\n        else {\n            inside = false;\n            if (edge !== parent)\n                outline(stream, edge, node);\n        }\n    }\n}\nfunction pointEqual(a, b) {\n    return a && b && a[0] === b[0] && a[1] === b[1];\n}\nfunction sharedEdge(a, b) {\n    var x, y, n = a.length, found = null;\n    for (var i = 0; i < n; ++i) {\n        x = a[i];\n        for (var j = b.length; --j >= 0;) {\n            y = b[j];\n            if (x[0] === y[0] && x[1] === y[1]) {\n                if (found)\n                    return [found, x];\n                found = x;\n            }\n        }\n    }\n}\nfunction faceEdges(face) {\n    var n = face.length, edges = [];\n    for (var a = face[n - 1], i = 0; i < n; ++i)\n        edges.push([a, a = face[i]]);\n    return edges;\n}\nfunction hasInverse(node) {\n    return node.project.invert || node.children && node.children.some(hasInverse);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/index.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/index.js"],"names":[],"mappings":"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","sourcesContent":["import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, degrees, epsilon, pi, radians, sin} from \"../math\";\nimport {default as matrix, multiply, inverse} from \"./matrix\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\n//  * r: rotation angle for final polyhedral net.  Defaults to -pi / 6 (for\n//    butterflies).\nexport default function(root, face, r) {\n\n  r = r == null ? -pi / 6 : r; // TODO automate\n\n  recurse(root, {transform: [\n    cos(r), sin(r), 0,\n    -sin(r), cos(r), 0\n  ]});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj;\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n"]}]}