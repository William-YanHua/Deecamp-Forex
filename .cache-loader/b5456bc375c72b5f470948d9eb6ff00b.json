{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/armadillo.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/armadillo.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { abs, atan2, cos, degrees, epsilon, radians, sin, tan } from \"./math\";\nexport function armadilloRaw(phi0) {\n    var sinPhi0 = sin(phi0), cosPhi0 = cos(phi0), sPhi0 = phi0 >= 0 ? 1 : -1, tanPhi0 = tan(sPhi0 * phi0), k = (1 + sinPhi0 - cosPhi0) / 2;\n    function forward(lambda, phi) {\n        var cosPhi = cos(phi), cosLambda = cos(lambda /= 2);\n        return [\n            (1 + cosPhi) * sin(lambda),\n            (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda\n        ];\n    }\n    forward.invert = function (x, y) {\n        var lambda = 0, phi = 0, i = 50;\n        do {\n            var cosLambda = cos(lambda), sinLambda = sin(lambda), cosPhi = cos(phi), sinPhi = sin(phi), A = 1 + cosPhi, fx = A * sinLambda - x, fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y, dxdLambda = A * cosLambda / 2, dxdPhi = -sinLambda * sinPhi, dydLambda = sinPhi0 * A * sinLambda / 2, dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi, denominator = dxdPhi * dydLambda - dydPhi * dxdLambda, dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2, dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n            lambda -= dLambda, phi -= dPhi;\n        } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n        return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n    };\n    return forward;\n}\nexport default function () {\n    var phi0 = 20 * radians, sPhi0 = phi0 >= 0 ? 1 : -1, tanPhi0 = tan(sPhi0 * phi0), m = projectionMutator(armadilloRaw), p = m(phi0), stream_ = p.stream;\n    p.parallel = function (_) {\n        if (!arguments.length)\n            return phi0 * degrees;\n        tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n        return m(phi0);\n    };\n    p.stream = function (stream) {\n        var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream));\n        p.rotate(rotate);\n        rotateStream.sphere = function () {\n            sphereStream.polygonStart(), sphereStream.lineStart();\n            for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n                sphereStream.point(lambda, sPhi0 * 90);\n            while (sPhi0 * (lambda -= phi0) >= -180) {\n                sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n            }\n            sphereStream.lineEnd(), sphereStream.polygonEnd();\n        };\n        return rotateStream;\n    };\n    return p\n        .scale(218.695)\n        .center([0, 28.0974]);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/armadillo.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/armadillo.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90) sphereStream.point(lambda, sPhi0 * 90);\n      while (sPhi0 * (lambda -= phi0) >= -180) { // TODO precision?\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n"]}]}