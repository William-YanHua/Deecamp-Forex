{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\util\\shape-size.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\util\\shape-size.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { flatten, isString, valuesOfKey } from '@antv/util';\r\nimport { getXDimensionLength } from '../../util/coordinate';\r\nfunction findMinDistance(arr, scale) {\r\n    var count = arr.length;\r\n    var sourceArr = arr;\r\n    if (isString(sourceArr[0])) {\r\n        sourceArr = arr.map(function (v) {\r\n            return scale.translate(v);\r\n        });\r\n    }\r\n    var distance = sourceArr[1] - sourceArr[0];\r\n    for (var i = 2; i < count; i++) {\r\n        var tmp = sourceArr[i] - sourceArr[i - 1];\r\n        if (distance > tmp) {\r\n            distance = tmp;\r\n        }\r\n    }\r\n    return distance;\r\n}\r\nfunction getDodgeCount(dataArray, dodgeBy) {\r\n    if (dodgeBy) {\r\n        var mergeData = flatten(dataArray);\r\n        var values = valuesOfKey(mergeData, dodgeBy);\r\n        return values.length;\r\n    }\r\n    return dataArray.length;\r\n}\r\nexport function getDefaultSize(geometry) {\r\n    var theme = geometry.theme;\r\n    var coordinate = geometry.coordinate;\r\n    var xScale = geometry.getXScale();\r\n    var xValues = xScale.values;\r\n    var dataArray = geometry.beforeMappingData;\r\n    var count = xValues.length;\r\n    if (xScale.isLinear && xValues.length > 1) {\r\n        xValues.sort();\r\n        var interval = findMinDistance(xValues, xScale);\r\n        count = (xScale.max - xScale.min) / interval;\r\n        if (xValues.length > count) {\r\n            count = xValues.length;\r\n        }\r\n    }\r\n    var range = xScale.range;\r\n    var normalizedSize = 1 / count;\r\n    var wr = 1;\r\n    if (coordinate.isPolar) {\r\n        if (coordinate.isTransposed && count > 1) {\r\n            wr = theme.multiplePieWidthRatio;\r\n        }\r\n        else {\r\n            wr = theme.roseWidthRatio;\r\n        }\r\n    }\r\n    else {\r\n        if (xScale.isLinear) {\r\n            normalizedSize *= range[1] - range[0];\r\n        }\r\n        wr = theme.columnWidthRatio;\r\n    }\r\n    normalizedSize *= wr;\r\n    if (geometry.getAdjust('dodge')) {\r\n        var dodgeAdjust = geometry.getAdjust('dodge');\r\n        var dodgeBy = dodgeAdjust.dodgeBy;\r\n        var dodgeCount = getDodgeCount(dataArray, dodgeBy);\r\n        normalizedSize = normalizedSize / dodgeCount;\r\n    }\r\n    var maxColumnWidth = theme.maxColumnWidth, minColumnWidth = theme.minColumnWidth;\r\n    var xDimensionLength = getXDimensionLength(geometry.coordinate);\r\n    if (maxColumnWidth) {\r\n        var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\r\n        if (normalizedSize > normalizedMaxColumnWidth) {\r\n            normalizedSize = normalizedMaxColumnWidth;\r\n        }\r\n    }\r\n    if (minColumnWidth) {\r\n        var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\r\n        if (normalizedSize < normalizedMinColumnWidth) {\r\n            normalizedSize = normalizedMinColumnWidth;\r\n        }\r\n    }\r\n    return normalizedSize;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\util\\shape-size.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\g2\\esm\\geometry\\util\\shape-size.js"],"names":[],"mappings":"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","sourcesContent":["import { flatten, isString, valuesOfKey } from '@antv/util';\nimport { getXDimensionLength } from '../../util/coordinate';\n// 已经排序后的数据查找距离最小的\nfunction findMinDistance(arr, scale) {\n    var count = arr.length;\n    var sourceArr = arr;\n    if (isString(sourceArr[0])) {\n        // 日期类型的 values 经常上文本类型，所以需要转换一下\n        sourceArr = arr.map(function (v) {\n            return scale.translate(v);\n        });\n    }\n    var distance = sourceArr[1] - sourceArr[0];\n    for (var i = 2; i < count; i++) {\n        var tmp = sourceArr[i] - sourceArr[i - 1];\n        if (distance > tmp) {\n            distance = tmp;\n        }\n    }\n    return distance;\n}\nfunction getDodgeCount(dataArray, dodgeBy) {\n    if (dodgeBy) {\n        var mergeData = flatten(dataArray);\n        var values = valuesOfKey(mergeData, dodgeBy);\n        return values.length;\n    }\n    return dataArray.length;\n}\n/** @ignore */\nexport function getDefaultSize(geometry) {\n    var theme = geometry.theme;\n    var coordinate = geometry.coordinate;\n    var xScale = geometry.getXScale();\n    var xValues = xScale.values;\n    var dataArray = geometry.beforeMappingData;\n    var count = xValues.length;\n    if (xScale.isLinear && xValues.length > 1) {\n        // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count\n        xValues.sort();\n        var interval = findMinDistance(xValues, xScale);\n        count = (xScale.max - xScale.min) / interval;\n        if (xValues.length > count) {\n            count = xValues.length;\n        }\n    }\n    var range = xScale.range;\n    var normalizedSize = 1 / count;\n    var wr = 1;\n    if (coordinate.isPolar) {\n        if (coordinate.isTransposed && count > 1) {\n            // 极坐标下多层环图\n            wr = theme.multiplePieWidthRatio;\n        }\n        else {\n            wr = theme.roseWidthRatio;\n        }\n    }\n    else {\n        if (xScale.isLinear) {\n            normalizedSize *= range[1] - range[0];\n        }\n        wr = theme.columnWidthRatio;\n    }\n    normalizedSize *= wr;\n    if (geometry.getAdjust('dodge')) {\n        var dodgeAdjust = geometry.getAdjust('dodge');\n        var dodgeBy = dodgeAdjust.dodgeBy;\n        var dodgeCount = getDodgeCount(dataArray, dodgeBy);\n        normalizedSize = normalizedSize / dodgeCount;\n    }\n    // 最大和最小限制\n    var maxColumnWidth = theme.maxColumnWidth, minColumnWidth = theme.minColumnWidth;\n    var xDimensionLength = getXDimensionLength(geometry.coordinate);\n    if (maxColumnWidth) {\n        var normalizedMaxColumnWidth = maxColumnWidth / xDimensionLength;\n        if (normalizedSize > normalizedMaxColumnWidth) {\n            normalizedSize = normalizedMaxColumnWidth;\n        }\n    }\n    if (minColumnWidth) {\n        var normalizedMinColumnWidth = minColumnWidth / xDimensionLength;\n        if (normalizedSize < normalizedMinColumnWidth) {\n            normalizedSize = normalizedMinColumnWidth;\n        }\n    }\n    return normalizedSize;\n}\n//# sourceMappingURL=shape-size.js.map"]}]}