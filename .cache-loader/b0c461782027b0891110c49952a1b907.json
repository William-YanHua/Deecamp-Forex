{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\guide.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\guide.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { isString, isFunction, isArray, get } from '@antv/util';\r\nimport LineParser from './main';\r\nvar GuideLineParser = (function (_super) {\r\n    __extends(GuideLineParser, _super);\r\n    function GuideLineParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GuideLineParser.prototype.init = function () {\r\n        var props = this.plot.options;\r\n        if (!props.xField || !props.yField) {\r\n            return;\r\n        }\r\n        this.config = {\r\n            type: 'line',\r\n            position: {\r\n                fields: [props.xField, props.yField],\r\n            },\r\n            tooltip: false,\r\n        };\r\n        if (this._getColorMappingField() || this._needParseAttribute('color')) {\r\n            this.parseColor();\r\n        }\r\n        if (this._needParseAttribute('size')) {\r\n            this.parseSize();\r\n        }\r\n        if (props.line.style) {\r\n            this.parseStyle();\r\n        }\r\n        if (props.smooth) {\r\n            this.config.shape = { values: ['smooth'] };\r\n        }\r\n    };\r\n    GuideLineParser.prototype.parseSize = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        if (props.line.size) {\r\n            config.values = [props.line.size];\r\n        }\r\n        else {\r\n            config.values = [2];\r\n        }\r\n        this.config.size = config;\r\n    };\r\n    GuideLineParser.prototype.parseColor = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        var colorField = this._getColorMappingField();\r\n        if (colorField) {\r\n            config.fields = colorField;\r\n        }\r\n        if (props.line.color) {\r\n            config.values = [props.line.color];\r\n        }\r\n        else {\r\n            if (isString(props.color)) {\r\n                config.values = [props.color];\r\n            }\r\n            else if (isFunction(props.color)) {\r\n                config.fields = colorField;\r\n                config.callback = props.color;\r\n            }\r\n            else if (isArray(props.color)) {\r\n                if (colorField) {\r\n                    config.values = props.color;\r\n                }\r\n                else {\r\n                    if (props.color.length > 0) {\r\n                        config.values = [props.color[0]];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.config.color = config;\r\n    };\r\n    GuideLineParser.prototype.parseStyle = function () {\r\n        var props = this.plot.options;\r\n        var styleProps = props.line.style;\r\n        var config = {};\r\n        if (isFunction(styleProps)) {\r\n            config.fields = this.config.position.fields;\r\n            config.callback = styleProps;\r\n        }\r\n        else {\r\n            config.cfg = styleProps;\r\n        }\r\n        this.config.style = config;\r\n    };\r\n    GuideLineParser.prototype._needParseAttribute = function (attr) {\r\n        var props = this.plot.options;\r\n        if (props[attr]) {\r\n            return true;\r\n        }\r\n        else if (props.line[attr]) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    GuideLineParser.prototype._getColorMappingField = function () {\r\n        var props = this.plot.options;\r\n        var colorMapper = ['stackField', 'seriesField'];\r\n        for (var _i = 0, colorMapper_1 = colorMapper; _i < colorMapper_1.length; _i++) {\r\n            var m = colorMapper_1[_i];\r\n            if (get(props, m)) {\r\n                return [props[m]];\r\n            }\r\n        }\r\n    };\r\n    return GuideLineParser;\r\n}(LineParser));\r\nexport default GuideLineParser;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\guide.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\line\\guide.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { isString, isFunction, isArray, get } from '@antv/util';\nimport LineParser from './main';\nvar GuideLineParser = /** @class */ (function (_super) {\n    __extends(GuideLineParser, _super);\n    function GuideLineParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GuideLineParser.prototype.init = function () {\n        var props = this.plot.options;\n        if (!props.xField || !props.yField) {\n            return;\n        }\n        this.config = {\n            type: 'line',\n            position: {\n                fields: [props.xField, props.yField],\n            },\n            tooltip: false,\n        };\n        if (this._getColorMappingField() || this._needParseAttribute('color')) {\n            this.parseColor();\n        }\n        if (this._needParseAttribute('size')) {\n            this.parseSize();\n        }\n        if (props.line.style) {\n            this.parseStyle();\n        }\n        if (props.smooth) {\n            this.config.shape = { values: ['smooth'] };\n        }\n    };\n    GuideLineParser.prototype.parseSize = function () {\n        var props = this.plot.options;\n        var config = {};\n        if (props.line.size) {\n            config.values = [props.line.size];\n        }\n        else {\n            // line作为辅助图形没有在style里指定size属性的情况下，设置默认值\n            config.values = [2];\n        }\n        this.config.size = config;\n    };\n    GuideLineParser.prototype.parseColor = function () {\n        var props = this.plot.options;\n        var config = {};\n        var colorField = this._getColorMappingField();\n        if (colorField) {\n            config.fields = colorField;\n        }\n        if (props.line.color) {\n            config.values = [props.line.color];\n        }\n        else {\n            // line作为辅助图形没有在style里指定color属性的情况下，默认接受主体图形的透传\n            if (isString(props.color)) {\n                config.values = [props.color];\n            }\n            else if (isFunction(props.color)) {\n                config.fields = colorField;\n                config.callback = props.color;\n            }\n            else if (isArray(props.color)) {\n                if (colorField) {\n                    config.values = props.color;\n                }\n                else {\n                    if (props.color.length > 0) {\n                        config.values = [props.color[0]];\n                    }\n                }\n            }\n        }\n        this.config.color = config;\n    };\n    GuideLineParser.prototype.parseStyle = function () {\n        var props = this.plot.options;\n        var styleProps = props.line.style;\n        var config = {};\n        if (isFunction(styleProps)) {\n            config.fields = this.config.position.fields;\n            config.callback = styleProps;\n        }\n        else {\n            config.cfg = styleProps;\n        }\n        this.config.style = config;\n    };\n    GuideLineParser.prototype._needParseAttribute = function (attr) {\n        var props = this.plot.options;\n        if (props[attr]) {\n            return true;\n        }\n        else if (props.line[attr]) {\n            return true;\n        }\n        return false;\n    };\n    GuideLineParser.prototype._getColorMappingField = function () {\n        var props = this.plot.options;\n        var colorMapper = ['stackField', 'seriesField'];\n        for (var _i = 0, colorMapper_1 = colorMapper; _i < colorMapper_1.length; _i++) {\n            var m = colorMapper_1[_i];\n            if (get(props, m)) {\n                return [props[m]];\n            }\n        }\n    };\n    return GuideLineParser;\n}(LineParser));\nexport default GuideLineParser;\n//# sourceMappingURL=guide.js.map"]}]}