{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\components\\guide-line.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\components\\guide-line.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { getScale } from '@antv/scale';\r\nimport { assign, deepMix, mix, each, isArray, isString, isNumber, contains, toArray, clone, isEmpty } from '@antv/util';\r\nimport { getMean, getMedian } from '../util/math';\r\nvar GuideLine = (function () {\r\n    function GuideLine(cfg) {\r\n        assign(this, cfg);\r\n        this._init();\r\n    }\r\n    GuideLine.prototype._init = function () {\r\n        var _a = this.plot.options, yField = _a.yField, data = _a.data;\r\n        var plotData = this.plot.processData(data);\r\n        if (isEmpty(plotData) || !isNumber(plotData[0][yField])) {\r\n            return;\r\n        }\r\n        var defaultStyle = this.getDefaultStyle();\r\n        var baseConfig = {\r\n            type: 'line',\r\n            top: true,\r\n            start: this.cfg.start,\r\n            end: this.cfg.end,\r\n        };\r\n        baseConfig.style = deepMix({}, defaultStyle.line.style, this.cfg.lineStyle);\r\n        baseConfig.text = deepMix({}, defaultStyle.text, this.cfg.text);\r\n        if (this.cfg.type) {\r\n            var stateValue = this._getState(this.cfg.type);\r\n            var scale = this.getYScale();\r\n            var percent = (1.0 - scale.scale(stateValue)) * 100 + \"%\";\r\n            var start = ['0%', percent];\r\n            var end = ['100%', percent];\r\n            this.config = mix({\r\n                start: start,\r\n                end: end,\r\n            }, baseConfig);\r\n        }\r\n        else {\r\n            var _b = this.cfg, start_1 = _b.start, end_1 = _b.end;\r\n            this.config = clone(baseConfig);\r\n            var xScale_1 = this.getXScale();\r\n            var yScale_1 = this.getYScale();\r\n            var startData_1 = clone(start_1);\r\n            var endData_1 = clone(end_1);\r\n            each(start_1, function (value, index) {\r\n                if (!contains(toArray(start_1[index]), '%') || isNumber(start_1[index])) {\r\n                    if (index === 0) {\r\n                        startData_1[index] = xScale_1.scale(start_1[0]) * 100 + \"%\";\r\n                    }\r\n                    else {\r\n                        startData_1[index] = (1.0 - yScale_1.scale(start_1[1])) * 100 + \"%\";\r\n                    }\r\n                }\r\n            });\r\n            each(end_1, function (value, index) {\r\n                if (!contains(toArray(end_1[index]), '%') || isNumber(end_1[index])) {\r\n                    if (index === 0) {\r\n                        endData_1[index] = xScale_1.scale(end_1[0]) * 100 + \"%\";\r\n                    }\r\n                    else {\r\n                        endData_1[index] = (1.0 - yScale_1.scale(end_1[1])) * 100 + \"%\";\r\n                    }\r\n                }\r\n            });\r\n            this.config.start = startData_1;\r\n            this.config.end = endData_1;\r\n        }\r\n    };\r\n    GuideLine.prototype.getYScale = function () {\r\n        var minValue = this._getState('min');\r\n        var maxValue = this._getState('max');\r\n        var Scale = getScale('linear');\r\n        var scale = new Scale(mix({}, {\r\n            min: this.plot.type === 'column' ? 0 : minValue,\r\n            max: maxValue,\r\n            nice: true,\r\n            values: this.values,\r\n        }, this.plot.config.scales[this.plot.options.yField]));\r\n        return scale;\r\n    };\r\n    GuideLine.prototype.getXScale = function () {\r\n        var values = this.extractXValue();\r\n        if (isString(values[0])) {\r\n            var Scale = getScale('cat');\r\n            var scale = new Scale(mix({}, {\r\n                values: values,\r\n            }, this.plot.config.scales[this.plot.options.xField]));\r\n            return scale;\r\n        }\r\n        else {\r\n            var min = Math.min.apply(Math, values);\r\n            var max = Math.max.apply(Math, values);\r\n            var Scale = getScale('linear');\r\n            var scale = new Scale(mix({}, {\r\n                min: min,\r\n                max: max,\r\n                nice: true,\r\n                values: values,\r\n            }, this.plot.config.scales[this.plot.options.xField]));\r\n            return scale;\r\n        }\r\n    };\r\n    GuideLine.prototype._getState = function (type) {\r\n        this.values = this._extractValues();\r\n        if (type === 'median') {\r\n            return getMedian(this.values);\r\n        }\r\n        if (type === 'mean') {\r\n            return getMean(this.values);\r\n        }\r\n        if (type === 'max') {\r\n            return Math.max.apply(Math, this.values);\r\n        }\r\n        if (type === 'min') {\r\n            return Math.min.apply(Math, this.values);\r\n        }\r\n    };\r\n    GuideLine.prototype._extractValues = function () {\r\n        var props = this.plot.options;\r\n        var field = props.yField;\r\n        var values = [];\r\n        var data = this.plot.processData(props.data);\r\n        each(data, function (d) {\r\n            if (isArray(d[field])) {\r\n                values.push.apply(values, d[field]);\r\n            }\r\n            else {\r\n                values.push(d[field]);\r\n            }\r\n        });\r\n        return values;\r\n    };\r\n    GuideLine.prototype.extractXValue = function () {\r\n        var props = this.plot.options;\r\n        var field = props.xField;\r\n        var values = [];\r\n        var data = this.plot.processData(props.data);\r\n        each(data, function (d) {\r\n            if (isArray(d[field])) {\r\n                values.push.apply(values, d[field]);\r\n            }\r\n            else {\r\n                values.push(d[field]);\r\n            }\r\n        });\r\n        return values;\r\n    };\r\n    GuideLine.prototype.getDefaultStyle = function () {\r\n        this.getDefaultTextAlign();\r\n        return {\r\n            line: {\r\n                style: {\r\n                    lineWidth: 2,\r\n                    stroke: '#333333',\r\n                    opacity: 0.7,\r\n                    lineDash: [0, 0],\r\n                },\r\n            },\r\n            text: {\r\n                content: '',\r\n                offsetY: -5,\r\n                style: {\r\n                    fontSize: 14,\r\n                    stroke: 'white',\r\n                    lineWidth: 2,\r\n                    textAlign: this.getDefaultTextAlign(),\r\n                },\r\n            },\r\n        };\r\n    };\r\n    GuideLine.prototype.getDefaultTextAlign = function () {\r\n        var textConfig = this.cfg.text;\r\n        if (textConfig) {\r\n            if (!textConfig.position || textConfig.position === 'start') {\r\n                return 'left';\r\n            }\r\n            if (textConfig.position === 'center') {\r\n                return 'center';\r\n            }\r\n            if (textConfig.position === 'end') {\r\n                return 'right';\r\n            }\r\n        }\r\n    };\r\n    return GuideLine;\r\n}());\r\nexport default GuideLine;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\components\\guide-line.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\components\\guide-line.js"],"names":[],"mappings":"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","sourcesContent":["import { getScale } from '@antv/scale';\nimport { assign, deepMix, mix, each, isArray, isString, isNumber, contains, toArray, clone, isEmpty } from '@antv/util';\nimport { getMean, getMedian } from '../util/math';\nvar GuideLine = /** @class */ (function () {\n    function GuideLine(cfg) {\n        assign(this, cfg);\n        this._init();\n    }\n    GuideLine.prototype._init = function () {\n        var _a = this.plot.options, yField = _a.yField, data = _a.data;\n        var plotData = this.plot.processData(data);\n        if (isEmpty(plotData) || !isNumber(plotData[0][yField])) {\n            return;\n        }\n        var defaultStyle = this.getDefaultStyle();\n        var baseConfig = {\n            type: 'line',\n            top: true,\n            start: this.cfg.start,\n            end: this.cfg.end,\n        };\n        baseConfig.style = deepMix({}, defaultStyle.line.style, this.cfg.lineStyle);\n        baseConfig.text = deepMix({}, defaultStyle.text, this.cfg.text);\n        if (this.cfg.type) {\n            var stateValue = this._getState(this.cfg.type);\n            var scale = this.getYScale();\n            var percent = (1.0 - scale.scale(stateValue)) * 100 + \"%\";\n            var start = ['0%', percent];\n            var end = ['100%', percent];\n            this.config = mix({\n                start: start,\n                end: end,\n            }, baseConfig);\n        }\n        else {\n            var _b = this.cfg, start_1 = _b.start, end_1 = _b.end;\n            this.config = clone(baseConfig);\n            var xScale_1 = this.getXScale();\n            var yScale_1 = this.getYScale();\n            var startData_1 = clone(start_1);\n            var endData_1 = clone(end_1);\n            each(start_1, function (value, index) {\n                if (!contains(toArray(start_1[index]), '%') || isNumber(start_1[index])) {\n                    if (index === 0) {\n                        startData_1[index] = xScale_1.scale(start_1[0]) * 100 + \"%\";\n                    }\n                    else {\n                        startData_1[index] = (1.0 - yScale_1.scale(start_1[1])) * 100 + \"%\";\n                    }\n                }\n            });\n            each(end_1, function (value, index) {\n                if (!contains(toArray(end_1[index]), '%') || isNumber(end_1[index])) {\n                    if (index === 0) {\n                        endData_1[index] = xScale_1.scale(end_1[0]) * 100 + \"%\";\n                    }\n                    else {\n                        endData_1[index] = (1.0 - yScale_1.scale(end_1[1])) * 100 + \"%\";\n                    }\n                }\n            });\n            this.config.start = startData_1;\n            this.config.end = endData_1;\n        }\n    };\n    GuideLine.prototype.getYScale = function () {\n        var minValue = this._getState('min');\n        var maxValue = this._getState('max');\n        var Scale = getScale('linear');\n        // 重新组织scale并使用scale的min和max来计算guide point的百分比位置，以避免受nice的影响\n        var scale = new Scale(mix({}, {\n            min: this.plot.type === 'column' ? 0 : minValue,\n            max: maxValue,\n            nice: true,\n            values: this.values,\n        }, this.plot.config.scales[this.plot.options.yField]));\n        return scale;\n    };\n    GuideLine.prototype.getXScale = function () {\n        var values = this.extractXValue();\n        if (isString(values[0])) {\n            var Scale = getScale('cat');\n            var scale = new Scale(mix({}, {\n                values: values,\n            }, this.plot.config.scales[this.plot.options.xField]));\n            return scale;\n        }\n        else {\n            var min = Math.min.apply(Math, values);\n            var max = Math.max.apply(Math, values);\n            var Scale = getScale('linear');\n            var scale = new Scale(mix({}, {\n                min: min,\n                max: max,\n                nice: true,\n                values: values,\n            }, this.plot.config.scales[this.plot.options.xField]));\n            return scale;\n        }\n    };\n    GuideLine.prototype._getState = function (type) {\n        this.values = this._extractValues();\n        if (type === 'median') {\n            return getMedian(this.values);\n        }\n        if (type === 'mean') {\n            return getMean(this.values);\n        }\n        if (type === 'max') {\n            return Math.max.apply(Math, this.values);\n        }\n        if (type === 'min') {\n            return Math.min.apply(Math, this.values);\n        }\n    };\n    GuideLine.prototype._extractValues = function () {\n        var props = this.plot.options;\n        var field = props.yField;\n        var values = [];\n        var data = this.plot.processData(props.data);\n        each(data, function (d) {\n            if (isArray(d[field])) {\n                values.push.apply(values, d[field]);\n            }\n            else {\n                values.push(d[field]);\n            }\n        });\n        return values;\n    };\n    GuideLine.prototype.extractXValue = function () {\n        var props = this.plot.options;\n        var field = props.xField;\n        var values = [];\n        var data = this.plot.processData(props.data);\n        each(data, function (d) {\n            if (isArray(d[field])) {\n                values.push.apply(values, d[field]);\n            }\n            else {\n                values.push(d[field]);\n            }\n        });\n        return values;\n    };\n    GuideLine.prototype.getDefaultStyle = function () {\n        this.getDefaultTextAlign();\n        return {\n            line: {\n                style: {\n                    lineWidth: 2,\n                    stroke: '#333333',\n                    opacity: 0.7,\n                    lineDash: [0, 0],\n                },\n            },\n            text: {\n                content: '',\n                offsetY: -5,\n                style: {\n                    fontSize: 14,\n                    stroke: 'white',\n                    lineWidth: 2,\n                    textAlign: this.getDefaultTextAlign(),\n                },\n            },\n        };\n    };\n    GuideLine.prototype.getDefaultTextAlign = function () {\n        var textConfig = this.cfg.text;\n        if (textConfig) {\n            if (!textConfig.position || textConfig.position === 'start') {\n                return 'left';\n            }\n            if (textConfig.position === 'center') {\n                return 'center';\n            }\n            if (textConfig.position === 'end') {\n                return 'right';\n            }\n        }\n    };\n    return GuideLine;\n}());\nexport default GuideLine;\n//# sourceMappingURL=guide-line.js.map"]}]}