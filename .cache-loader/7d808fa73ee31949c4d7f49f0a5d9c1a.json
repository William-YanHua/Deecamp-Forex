{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\interpolate.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\interpolate.js","mtime":1466220866000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { asin, atan2, cos, degrees, haversin, radians, sin, sqrt } from \"./math\";\r\nexport default function (a, b) {\r\n    var x0 = a[0] * radians, y0 = a[1] * radians, x1 = b[0] * radians, y1 = b[1] * radians, cy0 = cos(y0), sy0 = sin(y0), cy1 = cos(y1), sy1 = sin(y1), kx0 = cy0 * cos(x0), ky0 = cy0 * sin(x0), kx1 = cy1 * cos(x1), ky1 = cy1 * sin(x1), d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))), k = sin(d);\r\n    var interpolate = d ? function (t) {\r\n        var B = sin(t *= d) / k, A = sin(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;\r\n        return [\r\n            atan2(y, x) * degrees,\r\n            atan2(z, sqrt(x * x + y * y)) * degrees\r\n        ];\r\n    } : function () {\r\n        return [x0 * degrees, y0 * degrees];\r\n    };\r\n    interpolate.distance = d;\r\n    return interpolate;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\interpolate.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo\\src\\interpolate.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAC;AAE/E,MAAM,CAAC,OAAO,WAAU,CAAC,EAAE,CAAC;IAC1B,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EACnB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EACnB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EACnB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,EACnB,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACb,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACb,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACb,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACb,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACnB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACnB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACnB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EACnB,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EACrE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAEf,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,UAAS,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EACnB,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAClB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EACrB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EACrB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAC1B,OAAO;YACL,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,OAAO;YACrB,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO;SACxC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;QACF,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,EAAE,GAAG,OAAO,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC;IAEzB,OAAO,WAAW,CAAC;AACrB,CAAC","sourcesContent":["import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n"]}]}