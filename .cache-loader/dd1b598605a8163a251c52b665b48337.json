{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/mixin/tooltip.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/mixin/tooltip.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var Util = require('../../util');\nvar _require = require('../../global'), defaultColor = _require.defaultColor;\nvar FIELD_ORIGIN = '_origin';\nfunction getScaleName(scale) {\n    return scale.alias || scale.field;\n}\nvar TooltipMixin = {\n    _getIntervalSize: function _getIntervalSize(obj) {\n        var size = null;\n        var type = this.get('type');\n        var coord = this.get('coord');\n        if (coord.isRect && (type === 'interval' || type === 'schema')) {\n            size = this.getSize(obj[FIELD_ORIGIN]);\n            var dim = coord.isTransposed ? 'y' : 'x';\n            if (Util.isArray(obj[dim])) {\n                var width = Math.abs(obj[dim][1] - obj[dim][0]);\n                size = size < width ? null : size;\n            }\n        }\n        return size;\n    },\n    _snapEqual: function _snapEqual(v1, v2, scale) {\n        var equals;\n        v1 = scale.translate(v1);\n        v2 = scale.translate(v2);\n        if (scale.isCategory) {\n            equals = v1 === v2;\n        }\n        else {\n            equals = Util.snapEqual(v1, v2);\n        }\n        return equals;\n    },\n    _getScaleValueByPoint: function _getScaleValueByPoint(point) {\n        var result = 0;\n        var coord = this.get('coord');\n        var xScale = this.getXScale();\n        var invertPoint = coord.invert(point);\n        var xValue = invertPoint.x;\n        if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {\n            xValue = xScale.rangeMin();\n        }\n        result = xScale.invert(xValue);\n        if (xScale.isCategory) {\n            result = xScale.translate(result);\n        }\n        return result;\n    },\n    _getOriginByPoint: function _getOriginByPoint(point) {\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var xField = xScale.field;\n        var yField = yScale.field;\n        var coord = this.get('coord');\n        var invertPoint = coord.invert(point);\n        var xValue = xScale.invert(invertPoint.x);\n        var yValue = yScale.invert(invertPoint.y);\n        var result = {};\n        result[xField] = xValue;\n        result[yField] = yValue;\n        return result;\n    },\n    _getScale: function _getScale(field) {\n        var self = this;\n        var scales = self.get('scales');\n        var rst = null;\n        Util.each(scales, function (scale) {\n            if (scale.field === field) {\n                rst = scale;\n                return false;\n            }\n        });\n        return rst;\n    },\n    _getTipValueScale: function _getTipValueScale() {\n        var attrs = this.getAttrsForLegend();\n        var scale;\n        Util.each(attrs, function (attr) {\n            var tmpScale = attr.getScale(attr.type);\n            if (tmpScale.isLinear) {\n                scale = tmpScale;\n                return false;\n            }\n        });\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        if (!scale && yScale && yScale.field === '..y') {\n            return xScale;\n        }\n        return scale || yScale || xScale;\n    },\n    _getTipTitleScale: function _getTipTitleScale(titleField) {\n        var self = this;\n        if (titleField) {\n            return self._getScale(titleField);\n        }\n        var position = self.getAttr('position');\n        var fields = position.getFields();\n        var tmpField;\n        Util.each(fields, function (field) {\n            if (!field.includes('..')) {\n                tmpField = field;\n                return false;\n            }\n        });\n        return self._getScale(tmpField);\n    },\n    _filterValue: function _filterValue(arr, point) {\n        var coord = this.get('coord');\n        var yScale = this.getYScale();\n        var yField = yScale.field;\n        var invertPoint = coord.invert(point);\n        var yValue = invertPoint.y;\n        yValue = yScale.invert(yValue);\n        var rst = arr[arr.length - 1];\n        Util.each(arr, function (obj) {\n            var origin = obj[FIELD_ORIGIN];\n            if (origin[yField][0] <= yValue && origin[yField][1] >= yValue) {\n                rst = obj;\n                return false;\n            }\n        });\n        return rst;\n    },\n    getXDistance: function getXDistance() {\n        var self = this;\n        var distance = self.get('xDistance');\n        if (!distance) {\n            var xScale = self.getXScale();\n            if (xScale.isCategory) {\n                distance = 1;\n            }\n            else {\n                var values = xScale.values;\n                var min = xScale.translate(values[0]);\n                var max = min;\n                Util.each(values, function (value) {\n                    value = xScale.translate(value);\n                    if (value < min) {\n                        min = value;\n                    }\n                    if (value > max) {\n                        max = value;\n                    }\n                });\n                var length = values.length;\n                distance = (max - min) / (length - 1);\n            }\n            self.set('xDistance', distance);\n        }\n        return distance;\n    },\n    findPoint: function findPoint(point, dataArray) {\n        var self = this;\n        var type = self.get('type');\n        var xScale = self.getXScale();\n        var yScale = self.getYScale();\n        var xField = xScale.field;\n        var yField = yScale.field;\n        var rst = null;\n        if (Util.indexOf(['heatmap', 'point'], type) > -1) {\n            var coord = self.get('coord');\n            var invertPoint = coord.invert(point);\n            var xValue = xScale.invert(invertPoint.x);\n            var yValue = yScale.invert(invertPoint.y);\n            var min = Infinity;\n            Util.each(dataArray, function (obj) {\n                var distance = Math.pow(obj[FIELD_ORIGIN][xField] - xValue, 2) + Math.pow(obj[FIELD_ORIGIN][yField] - yValue, 2);\n                if (distance < min) {\n                    min = distance;\n                    rst = obj;\n                }\n            });\n            return rst;\n        }\n        var first = dataArray[0];\n        var last = dataArray[dataArray.length - 1];\n        if (!first) {\n            return rst;\n        }\n        var value = self._getScaleValueByPoint(point);\n        var firstXValue = first[FIELD_ORIGIN][xField];\n        var firstYValue = first[FIELD_ORIGIN][yField];\n        var lastXValue = last[FIELD_ORIGIN][xField];\n        var isYRange = yScale.isLinear && Util.isArray(firstYValue);\n        if (Util.isArray(firstXValue)) {\n            Util.each(dataArray, function (record) {\n                var origin = record[FIELD_ORIGIN];\n                if (xScale.translate(origin[xField][0]) <= value && xScale.translate(origin[xField][1]) >= value) {\n                    if (isYRange) {\n                        if (!Util.isArray(rst)) {\n                            rst = [];\n                        }\n                        rst.push(record);\n                    }\n                    else {\n                        rst = record;\n                        return false;\n                    }\n                }\n            });\n            if (Util.isArray(rst)) {\n                rst = this._filterValue(rst, point);\n            }\n        }\n        else {\n            var next;\n            if (!xScale.isLinear && xScale.type !== 'timeCat') {\n                Util.each(dataArray, function (record, index) {\n                    var origin = record[FIELD_ORIGIN];\n                    if (self._snapEqual(origin[xField], value, xScale)) {\n                        if (isYRange) {\n                            if (!Util.isArray(rst)) {\n                                rst = [];\n                            }\n                            rst.push(record);\n                        }\n                        else {\n                            rst = record;\n                            return false;\n                        }\n                    }\n                    else if (xScale.translate(origin[xField]) <= value) {\n                        last = record;\n                        next = dataArray[index + 1];\n                    }\n                });\n                if (Util.isArray(rst)) {\n                    rst = this._filterValue(rst, point);\n                }\n            }\n            else {\n                if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {\n                    return null;\n                }\n                var firstIdx = 0;\n                var lastIdx = dataArray.length - 1;\n                var middleIdx;\n                while (firstIdx <= lastIdx) {\n                    middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n                    var item = dataArray[middleIdx][FIELD_ORIGIN][xField];\n                    if (self._snapEqual(item, value, xScale)) {\n                        return dataArray[middleIdx];\n                    }\n                    if (xScale.translate(item) <= xScale.translate(value)) {\n                        firstIdx = middleIdx + 1;\n                        last = dataArray[middleIdx];\n                        next = dataArray[middleIdx + 1];\n                    }\n                    else {\n                        if (lastIdx === 0) {\n                            last = dataArray[0];\n                        }\n                        lastIdx = middleIdx - 1;\n                    }\n                }\n            }\n            if (last && next) {\n                if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - value)) {\n                    last = next;\n                }\n            }\n        }\n        var distance = self.getXDistance();\n        if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) <= distance / 2) {\n            rst = last;\n        }\n        return rst;\n    },\n    getTipTitle: function getTipTitle(origin, titleField) {\n        var tipTitle = '';\n        var titleScale = this._getTipTitleScale(titleField);\n        if (titleScale) {\n            var value = origin[titleScale.field];\n            tipTitle = titleScale.getText(value);\n        }\n        else if (this.get('type') === 'heatmap') {\n            var xScale = this.getXScale();\n            var yScale = this.getYScale();\n            var xValue = xScale.getText(origin[xScale.field]);\n            var yValue = yScale.getText(origin[yScale.field]);\n            tipTitle = '( ' + xValue + ', ' + yValue + ' )';\n        }\n        return tipTitle;\n    },\n    getTipValue: function getTipValue(origin, valueScale) {\n        var value;\n        var field = valueScale.field;\n        var key = origin.key;\n        value = origin[field];\n        if (Util.isArray(value)) {\n            var tmp = [];\n            Util.each(value, function (sub) {\n                tmp.push(valueScale.getText(sub));\n            });\n            value = tmp.join('-');\n        }\n        else {\n            value = valueScale.getText(value, key);\n        }\n        return value;\n    },\n    getTipName: function getTipName(origin) {\n        var name;\n        var nameScale;\n        var groupScales = this._getGroupScales();\n        if (groupScales.length) {\n            Util.each(groupScales, function (scale) {\n                nameScale = scale;\n                return false;\n            });\n        }\n        if (nameScale) {\n            var field = nameScale.field;\n            name = nameScale.getText(origin[field]);\n        }\n        else {\n            var valueScale = this._getTipValueScale();\n            name = getScaleName(valueScale);\n        }\n        return name;\n    },\n    getTipItems: function getTipItems(point, titleField) {\n        var self = this;\n        var origin = point[FIELD_ORIGIN];\n        var tipTitle = self.getTipTitle(origin, titleField);\n        var tooltipCfg = self.get('tooltipCfg');\n        var items = [];\n        var name;\n        var value;\n        function addItem(itemName, itemValue, cfg) {\n            if (!Util.isNil(itemValue) && itemValue !== '') {\n                var item = {\n                    title: tipTitle,\n                    point: point,\n                    name: itemName || tipTitle,\n                    value: itemValue,\n                    color: point.color || defaultColor,\n                    marker: true\n                };\n                item.size = self._getIntervalSize(point);\n                items.push(Util.mix({}, item, cfg));\n            }\n        }\n        if (tooltipCfg) {\n            var fields = tooltipCfg.fields;\n            var cfg = tooltipCfg.cfg;\n            var callbackParams = [];\n            Util.each(fields, function (field) {\n                callbackParams.push(origin[field]);\n            });\n            if (cfg) {\n                if (Util.isFunction(cfg)) {\n                    cfg = cfg.apply(null, callbackParams);\n                }\n                var itemCfg = Util.mix({}, {\n                    point: point,\n                    title: tipTitle,\n                    color: point.color || defaultColor,\n                    marker: true\n                }, cfg);\n                itemCfg.size = self._getIntervalSize(point);\n                items.push(itemCfg);\n            }\n            else {\n                Util.each(fields, function (field) {\n                    if (!Util.isNil(origin[field])) {\n                        var scale = self._getScale(field);\n                        name = getScaleName(scale);\n                        value = scale.getText(origin[field]);\n                        addItem(name, value);\n                    }\n                });\n            }\n        }\n        else {\n            var valueScale = self._getTipValueScale();\n            if (!Util.isNil(origin[valueScale.field])) {\n                value = self.getTipValue(origin, valueScale);\n                name = self.getTipName(origin);\n                addItem(name, value);\n            }\n        }\n        return items;\n    },\n    isShareTooltip: function isShareTooltip() {\n        var shareTooltip = this.get('shareTooltip');\n        var type = this.get('type');\n        var view = this.get('view');\n        var options;\n        if (view.get('parent')) {\n            options = view.get('parent').get('options');\n        }\n        else {\n            options = view.get('options');\n        }\n        if (type === 'interval') {\n            var coord = this.get('coord');\n            var coordType = coord.type;\n            if (coordType === 'theta' || coordType === 'polar' && coord.isTransposed) {\n                shareTooltip = false;\n            }\n        }\n        else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {\n            shareTooltip = false;\n        }\n        if (options.tooltip && Util.isBoolean(options.tooltip.shared)) {\n            shareTooltip = options.tooltip.shared;\n        }\n        return shareTooltip;\n    }\n};\nmodule.exports = TooltipMixin;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/mixin/tooltip.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/geom/mixin/tooltip.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview The tooltip handler\n * @author sima.zhang\n */\nvar Util = require('../../util');\n\nvar _require = require('../../global'),\n    defaultColor = _require.defaultColor;\n\nvar FIELD_ORIGIN = '_origin';\n\nfunction getScaleName(scale) {\n  return scale.alias || scale.field;\n}\n\nvar TooltipMixin = {\n  _getIntervalSize: function _getIntervalSize(obj) {\n    var size = null;\n    var type = this.get('type');\n    var coord = this.get('coord');\n\n    if (coord.isRect && (type === 'interval' || type === 'schema')) {\n      size = this.getSize(obj[FIELD_ORIGIN]); // 如果字段发生了映射，宽度计算就会报错\n\n      var dim = coord.isTransposed ? 'y' : 'x';\n\n      if (Util.isArray(obj[dim])) {\n        var width = Math.abs(obj[dim][1] - obj[dim][0]);\n        size = size < width ? null : size; // 直方图计算错误\n      }\n    }\n\n    return size;\n  },\n  _snapEqual: function _snapEqual(v1, v2, scale) {\n    var equals;\n    v1 = scale.translate(v1);\n    v2 = scale.translate(v2);\n\n    if (scale.isCategory) {\n      equals = v1 === v2;\n    } else {\n      equals = Util.snapEqual(v1, v2);\n    }\n\n    return equals;\n  },\n  _getScaleValueByPoint: function _getScaleValueByPoint(point) {\n    var result = 0;\n    var coord = this.get('coord');\n    var xScale = this.getXScale();\n    var invertPoint = coord.invert(point);\n    var xValue = invertPoint.x;\n\n    if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {\n      xValue = xScale.rangeMin(); // 极坐标下，scale 的 range 被做过特殊处理 see view.js#L88\n    }\n\n    result = xScale.invert(xValue);\n\n    if (xScale.isCategory) {\n      result = xScale.translate(result); // 防止分类类型\n    }\n\n    return result;\n  },\n  _getOriginByPoint: function _getOriginByPoint(point) {\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var xField = xScale.field;\n    var yField = yScale.field;\n    var coord = this.get('coord');\n    var invertPoint = coord.invert(point);\n    var xValue = xScale.invert(invertPoint.x);\n    var yValue = yScale.invert(invertPoint.y);\n    var result = {};\n    result[xField] = xValue;\n    result[yField] = yValue;\n    return result;\n  },\n  _getScale: function _getScale(field) {\n    var self = this;\n    var scales = self.get('scales');\n    var rst = null;\n    Util.each(scales, function (scale) {\n      if (scale.field === field) {\n        rst = scale;\n        return false;\n      }\n    });\n    return rst;\n  },\n  // 获取值对应的度量\n  _getTipValueScale: function _getTipValueScale() {\n    var attrs = this.getAttrsForLegend();\n    var scale;\n    Util.each(attrs, function (attr) {\n      var tmpScale = attr.getScale(attr.type);\n\n      if (tmpScale.isLinear) {\n        // 如果指定字段是非position的，同时是连续的\n        scale = tmpScale;\n        return false;\n      }\n    });\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n\n    if (!scale && yScale && yScale.field === '..y') {\n      return xScale;\n    }\n\n    return scale || yScale || xScale;\n  },\n  _getTipTitleScale: function _getTipTitleScale(titleField) {\n    var self = this;\n\n    if (titleField) {\n      return self._getScale(titleField);\n    }\n\n    var position = self.getAttr('position');\n    var fields = position.getFields();\n    var tmpField;\n    Util.each(fields, function (field) {\n      if (!field.includes('..')) {\n        tmpField = field;\n        return false;\n      }\n    });\n    return self._getScale(tmpField);\n  },\n  _filterValue: function _filterValue(arr, point) {\n    var coord = this.get('coord');\n    var yScale = this.getYScale();\n    var yField = yScale.field;\n    var invertPoint = coord.invert(point);\n    var yValue = invertPoint.y;\n    yValue = yScale.invert(yValue);\n    var rst = arr[arr.length - 1];\n    Util.each(arr, function (obj) {\n      var origin = obj[FIELD_ORIGIN];\n\n      if (origin[yField][0] <= yValue && origin[yField][1] >= yValue) {\n        rst = obj;\n        return false;\n      }\n    });\n    return rst;\n  },\n  getXDistance: function getXDistance() {\n    var self = this;\n    var distance = self.get('xDistance');\n\n    if (!distance) {\n      var xScale = self.getXScale();\n\n      if (xScale.isCategory) {\n        distance = 1;\n      } else {\n        var values = xScale.values; // values 是无序的\n\n        var min = xScale.translate(values[0]);\n        var max = min;\n        Util.each(values, function (value) {\n          // 时间类型需要 translate\n          value = xScale.translate(value);\n\n          if (value < min) {\n            min = value;\n          }\n\n          if (value > max) {\n            max = value;\n          }\n        });\n        var length = values.length; // 应该是除以 length - 1\n\n        distance = (max - min) / (length - 1);\n      }\n\n      self.set('xDistance', distance);\n    }\n\n    return distance;\n  },\n  findPoint: function findPoint(point, dataArray) {\n    var self = this;\n    var type = self.get('type');\n    var xScale = self.getXScale();\n    var yScale = self.getYScale();\n    var xField = xScale.field;\n    var yField = yScale.field;\n    var rst = null;\n\n    if (Util.indexOf(['heatmap', 'point'], type) > -1) {\n      var coord = self.get('coord');\n      var invertPoint = coord.invert(point);\n      var xValue = xScale.invert(invertPoint.x);\n      var yValue = yScale.invert(invertPoint.y);\n      var min = Infinity;\n      Util.each(dataArray, function (obj) {\n        var distance = Math.pow(obj[FIELD_ORIGIN][xField] - xValue, 2) + Math.pow(obj[FIELD_ORIGIN][yField] - yValue, 2);\n\n        if (distance < min) {\n          min = distance;\n          rst = obj;\n        }\n      });\n      return rst;\n    }\n\n    var first = dataArray[0];\n    var last = dataArray[dataArray.length - 1];\n\n    if (!first) {\n      return rst;\n    }\n\n    var value = self._getScaleValueByPoint(point); // 根据该点获得对应度量后数据的值\n\n\n    var firstXValue = first[FIELD_ORIGIN][xField];\n    var firstYValue = first[FIELD_ORIGIN][yField];\n    var lastXValue = last[FIELD_ORIGIN][xField];\n    var isYRange = yScale.isLinear && Util.isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况\n    // 如果x的值是数组\n\n    if (Util.isArray(firstXValue)) {\n      Util.each(dataArray, function (record) {\n        var origin = record[FIELD_ORIGIN];\n\n        if (xScale.translate(origin[xField][0]) <= value && xScale.translate(origin[xField][1]) >= value) {\n          if (isYRange) {\n            if (!Util.isArray(rst)) {\n              rst = [];\n            }\n\n            rst.push(record);\n          } else {\n            rst = record;\n            return false;\n          }\n        }\n      });\n\n      if (Util.isArray(rst)) {\n        rst = this._filterValue(rst, point);\n      }\n    } else {\n      var next;\n\n      if (!xScale.isLinear && xScale.type !== 'timeCat') {\n        Util.each(dataArray, function (record, index) {\n          var origin = record[FIELD_ORIGIN];\n\n          if (self._snapEqual(origin[xField], value, xScale)) {\n            if (isYRange) {\n              if (!Util.isArray(rst)) {\n                rst = [];\n              }\n\n              rst.push(record);\n            } else {\n              rst = record;\n              return false;\n            }\n          } else if (xScale.translate(origin[xField]) <= value) {\n            last = record;\n            next = dataArray[index + 1];\n          }\n        });\n\n        if (Util.isArray(rst)) {\n          rst = this._filterValue(rst, point);\n        }\n      } else {\n        if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {\n          return null;\n        }\n\n        var firstIdx = 0;\n        var lastIdx = dataArray.length - 1;\n        var middleIdx;\n\n        while (firstIdx <= lastIdx) {\n          middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var item = dataArray[middleIdx][FIELD_ORIGIN][xField];\n\n          if (self._snapEqual(item, value, xScale)) {\n            return dataArray[middleIdx];\n          }\n\n          if (xScale.translate(item) <= xScale.translate(value)) {\n            firstIdx = middleIdx + 1;\n            last = dataArray[middleIdx];\n            next = dataArray[middleIdx + 1];\n          } else {\n            if (lastIdx === 0) {\n              last = dataArray[0];\n            }\n\n            lastIdx = middleIdx - 1;\n          }\n        }\n      }\n\n      if (last && next) {\n        // 计算最逼近的\n        if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - value)) {\n          last = next;\n        }\n      }\n    }\n\n    var distance = self.getXDistance(); // 每个分类间的平均间距\n\n    if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) <= distance / 2) {\n      rst = last;\n    }\n\n    return rst;\n  },\n\n  /**\n   * @protected\n   * 获取tooltip的标题\n   * @param  {Object} origin 点的原始信息\n   * @param  {String} titleField 标题的字段\n   * @return {String} 提示信息的标题\n   */\n  getTipTitle: function getTipTitle(origin, titleField) {\n    var tipTitle = '';\n\n    var titleScale = this._getTipTitleScale(titleField);\n\n    if (titleScale) {\n      var value = origin[titleScale.field];\n      tipTitle = titleScale.getText(value);\n    } else if (this.get('type') === 'heatmap') {\n      // 热力图在不存在 title 的时候特殊处理\n      var xScale = this.getXScale();\n      var yScale = this.getYScale();\n      var xValue = xScale.getText(origin[xScale.field]);\n      var yValue = yScale.getText(origin[yScale.field]);\n      tipTitle = '( ' + xValue + ', ' + yValue + ' )';\n    }\n\n    return tipTitle;\n  },\n  getTipValue: function getTipValue(origin, valueScale) {\n    var value;\n    var field = valueScale.field;\n    var key = origin.key;\n    value = origin[field];\n\n    if (Util.isArray(value)) {\n      var tmp = [];\n      Util.each(value, function (sub) {\n        tmp.push(valueScale.getText(sub));\n      });\n      value = tmp.join('-');\n    } else {\n      value = valueScale.getText(value, key);\n    }\n\n    return value;\n  },\n\n  /**\n   * @protected\n   * 获取tooltip的名称\n   * @param  {Object} origin 点的原始信息\n   * @return {String} 提示信息的名称\n   */\n  getTipName: function getTipName(origin) {\n    var name;\n    var nameScale;\n\n    var groupScales = this._getGroupScales();\n\n    if (groupScales.length) {\n      // 如果存在分组类型，取第一个分组类型\n      Util.each(groupScales, function (scale) {\n        nameScale = scale;\n        return false;\n      });\n    }\n\n    if (nameScale) {\n      var field = nameScale.field;\n      name = nameScale.getText(origin[field]);\n    } else {\n      var valueScale = this._getTipValueScale();\n\n      name = getScaleName(valueScale);\n    }\n\n    return name;\n  },\n\n  /**\n   * 获取点对应tooltip的信息\n   * @protected\n   * @param  {Object} point 原始的数据记录\n   * @param  {String} titleField tooltipTitle 配置信息\n   * @return {Array}  一条或者多条记录\n   */\n  getTipItems: function getTipItems(point, titleField) {\n    var self = this;\n    var origin = point[FIELD_ORIGIN];\n    var tipTitle = self.getTipTitle(origin, titleField);\n    var tooltipCfg = self.get('tooltipCfg');\n    var items = [];\n    var name;\n    var value;\n\n    function addItem(itemName, itemValue, cfg) {\n      if (!Util.isNil(itemValue) && itemValue !== '') {\n        // 值为null的时候，忽视\n        var item = {\n          title: tipTitle,\n          point: point,\n          name: itemName || tipTitle,\n          value: itemValue,\n          color: point.color || defaultColor,\n          marker: true\n        };\n        item.size = self._getIntervalSize(point);\n        items.push(Util.mix({}, item, cfg));\n      }\n    }\n\n    if (tooltipCfg) {\n      var fields = tooltipCfg.fields;\n      var cfg = tooltipCfg.cfg;\n      var callbackParams = [];\n      Util.each(fields, function (field) {\n        callbackParams.push(origin[field]);\n      });\n\n      if (cfg) {\n        // 存在回调函数\n        if (Util.isFunction(cfg)) {\n          cfg = cfg.apply(null, callbackParams);\n        }\n\n        var itemCfg = Util.mix({}, {\n          point: point,\n          title: tipTitle,\n          color: point.color || defaultColor,\n          marker: true // 默认展示 marker\n\n        }, cfg);\n        itemCfg.size = self._getIntervalSize(point);\n        items.push(itemCfg);\n      } else {\n        Util.each(fields, function (field) {\n          if (!Util.isNil(origin[field])) {\n            // 字段数据为null ,undefined时不显示\n            var scale = self._getScale(field);\n\n            name = getScaleName(scale);\n            value = scale.getText(origin[field]);\n            addItem(name, value);\n          }\n        });\n      }\n    } else {\n      var valueScale = self._getTipValueScale();\n\n      if (!Util.isNil(origin[valueScale.field])) {\n        // 字段数据为null ,undefined时不显示\n        value = self.getTipValue(origin, valueScale);\n        name = self.getTipName(origin);\n        addItem(name, value);\n      }\n    }\n\n    return items;\n  },\n  isShareTooltip: function isShareTooltip() {\n    var shareTooltip = this.get('shareTooltip');\n    var type = this.get('type');\n    var view = this.get('view');\n    var options;\n\n    if (view.get('parent')) {\n      options = view.get('parent').get('options');\n    } else {\n      options = view.get('options');\n    }\n\n    if (type === 'interval') {\n      var coord = this.get('coord');\n      var coordType = coord.type;\n\n      if (coordType === 'theta' || coordType === 'polar' && coord.isTransposed) {\n        shareTooltip = false;\n      }\n    } else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {\n      shareTooltip = false;\n    }\n\n    if (options.tooltip && Util.isBoolean(options.tooltip.shared)) {\n      // 以用户设置的为准\n      shareTooltip = options.tooltip.shared;\n    }\n\n    return shareTooltip;\n  }\n};\nmodule.exports = TooltipMixin;"]}]}