{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","mtime":1467599198000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\nimport { asin, cos, sin, sqrt } from \"./math\";\nvar sqrt6 = sqrt(6), sqrt7 = sqrt(7);\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n    var theta = asin(7 * sin(phi) / (3 * sqrt6));\n    return [\n        sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n        9 * sin(theta / 3) / sqrt7\n    ];\n}\nmtFlatPolarParabolicRaw.invert = function (x, y) {\n    var theta = 3 * asin(y * sqrt7 / 9);\n    return [\n        x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n        asin(sin(theta) * 3 * sqrt6 / 7)\n    ];\n};\nexport default function () {\n    return projection(mtFlatPolarParabolicRaw)\n        .scale(164.859);\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC,MAAM,QAAQ,CAAC;AAE5C,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EACf,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAEpB,MAAM,UAAU,uBAAuB,CAAC,MAAM,EAAE,GAAG;IACjD,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;IAC7C,OAAO;QACL,KAAK,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;QACrD,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,KAAK;KAC3B,CAAC;AACJ,CAAC;AAED,uBAAuB,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IAC5C,IAAI,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;IACpC,OAAO;QACL,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KACjC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,uBAAuB,CAAC;SACrC,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n"]}]}