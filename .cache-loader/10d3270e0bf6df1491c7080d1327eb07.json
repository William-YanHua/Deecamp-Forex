{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\normalize.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\normalize.js","mtime":1517934108000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar _ = require(\"./lodash\"), util = require(\"./util\");\r\nmodule.exports = {\r\n    run: run,\r\n    undo: undo\r\n};\r\nfunction run(g) {\r\n    g.graph().dummyChains = [];\r\n    _.forEach(g.edges(), function (edge) { normalizeEdge(g, edge); });\r\n}\r\nfunction normalizeEdge(g, e) {\r\n    var v = e.v, vRank = g.node(v).rank, w = e.w, wRank = g.node(w).rank, name = e.name, edgeLabel = g.edge(e), labelRank = edgeLabel.labelRank;\r\n    if (wRank === vRank + 1)\r\n        return;\r\n    g.removeEdge(e);\r\n    var dummy, attrs, i;\r\n    for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\r\n        edgeLabel.points = [];\r\n        attrs = {\r\n            width: 0, height: 0,\r\n            edgeLabel: edgeLabel, edgeObj: e,\r\n            rank: vRank\r\n        };\r\n        dummy = util.addDummyNode(g, \"edge\", attrs, \"_d\");\r\n        if (vRank === labelRank) {\r\n            attrs.width = edgeLabel.width;\r\n            attrs.height = edgeLabel.height;\r\n            attrs.dummy = \"edge-label\";\r\n            attrs.labelpos = edgeLabel.labelpos;\r\n        }\r\n        g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\r\n        if (i === 0) {\r\n            g.graph().dummyChains.push(dummy);\r\n        }\r\n        v = dummy;\r\n    }\r\n    g.setEdge(v, w, { weight: edgeLabel.weight }, name);\r\n}\r\nfunction undo(g) {\r\n    _.forEach(g.graph().dummyChains, function (v) {\r\n        var node = g.node(v), origLabel = node.edgeLabel, w;\r\n        g.setEdge(node.edgeObj, origLabel);\r\n        while (node.dummy) {\r\n            w = g.successors(v)[0];\r\n            g.removeNode(v);\r\n            origLabel.points.push({ x: node.x, y: node.y });\r\n            if (node.dummy === \"edge-label\") {\r\n                origLabel.x = node.x;\r\n                origLabel.y = node.y;\r\n                origLabel.width = node.width;\r\n                origLabel.height = node.height;\r\n            }\r\n            v = w;\r\n            node = g.node(v);\r\n        }\r\n    });\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\normalize.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\normalize.js"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _ = require(\"./lodash\"),\n    util = require(\"./util\");\n\nmodule.exports = {\n  run: run,\n  undo: undo\n};\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v,\n      vRank = g.node(v).rank,\n      w = e.w,\n      wRank = g.node(w).rank,\n      name = e.name,\n      edgeLabel = g.edge(e),\n      labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0, height: 0,\n      edgeLabel: edgeLabel, edgeObj: e,\n      rank: vRank\n    };\n    dummy = util.addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v),\n        origLabel = node.edgeLabel,\n        w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n"]}]}