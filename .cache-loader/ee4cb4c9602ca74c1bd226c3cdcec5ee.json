{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/waterman.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/waterman.js","mtime":1478025116000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { geoCentroid as centroid, geoGnomonic as gnomonic } from \"d3-geo\";\nimport { asin, atan2, cos, degrees, max, min, pi, radians, sin } from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\nexport default function (faceProjection) {\n    faceProjection = faceProjection || function (face) {\n        var c = face.length === 6 ? centroid({ type: \"MultiPoint\", coordinates: face }) : face[0];\n        return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n    };\n    var w5 = octahedron.map(function (face) {\n        var xyz = face.map(cartesian), n = xyz.length, a = xyz[n - 1], b, hexagon = [];\n        for (var i = 0; i < n; ++i) {\n            b = xyz[i];\n            hexagon.push(spherical([\n                a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n                a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n                a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n            ]), spherical([\n                b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n                b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n                b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n            ]));\n            a = b;\n        }\n        return hexagon;\n    });\n    var cornerNormals = [];\n    var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n    w5.forEach(function (hexagon, j) {\n        var face = octahedron[j], n = face.length, normals = cornerNormals[j] = [];\n        for (var i = 0; i < n; ++i) {\n            w5.push([\n                face[i],\n                hexagon[(i * 2 + 2) % (2 * n)],\n                hexagon[(i * 2 + 1) % (2 * n)]\n            ]);\n            parents.push(j);\n            normals.push(cross(cartesian(hexagon[(i * 2 + 2) % (2 * n)]), cartesian(hexagon[(i * 2 + 1) % (2 * n)])));\n        }\n    });\n    var faces = w5.map(function (face) {\n        return {\n            project: faceProjection(face),\n            face: face\n        };\n    });\n    parents.forEach(function (d, i) {\n        var parent = faces[d];\n        parent && (parent.children || (parent.children = [])).push(faces[i]);\n    });\n    function face(lambda, phi) {\n        var cosphi = cos(phi), p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n        var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n                : lambda < pi / 2 ? phi < 0 ? 3 : 1\n                    : phi < 0 ? 7 : 5;\n        var n = cornerNormals[hexagon];\n        return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n            : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n                : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n                    : hexagon];\n    }\n    return polyhedral(faces[0], face)\n        .scale(110.625)\n        .center([0, 45]);\n}\nfunction dot(a, b) {\n    for (var i = 0, n = a.length, s = 0; i < n; ++i)\n        s += a[i] * b[i];\n    return s;\n}\nfunction cross(a, b) {\n    return [\n        a[1] * b[2] - a[2] * b[1],\n        a[2] * b[0] - a[0] * b[2],\n        a[0] * b[1] - a[1] * b[0]\n    ];\n}\nfunction spherical(cartesian) {\n    return [\n        atan2(cartesian[1], cartesian[0]) * degrees,\n        asin(max(-1, min(1, cartesian[2]))) * degrees\n    ];\n}\nfunction cartesian(coordinates) {\n    var lambda = coordinates[0] * radians, phi = coordinates[1] * radians, cosphi = cos(phi);\n    return [\n        cosphi * cos(lambda),\n        cosphi * sin(lambda),\n        sin(phi)\n    ];\n}\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/waterman.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/d3-geo-projection/src/polyhedral/waterman.js"],"names":[],"mappings":"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","sourcesContent":["import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math\";\nimport polyhedral from \"./index\";\nimport octahedron from \"./octahedron\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n"]}]}