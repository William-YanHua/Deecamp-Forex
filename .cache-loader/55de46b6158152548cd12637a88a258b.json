{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\floyd-warshall.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\floyd-warshall.js","mtime":1513986947000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var _ = require(\"../lodash\");\r\nmodule.exports = floydWarshall;\r\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\r\nfunction floydWarshall(g, weightFn, edgeFn) {\r\n    return runFloydWarshall(g, weightFn || DEFAULT_WEIGHT_FUNC, edgeFn || function (v) { return g.outEdges(v); });\r\n}\r\nfunction runFloydWarshall(g, weightFn, edgeFn) {\r\n    var results = {}, nodes = g.nodes();\r\n    nodes.forEach(function (v) {\r\n        results[v] = {};\r\n        results[v][v] = { distance: 0 };\r\n        nodes.forEach(function (w) {\r\n            if (v !== w) {\r\n                results[v][w] = { distance: Number.POSITIVE_INFINITY };\r\n            }\r\n        });\r\n        edgeFn(v).forEach(function (edge) {\r\n            var w = edge.v === v ? edge.w : edge.v, d = weightFn(edge);\r\n            results[v][w] = { distance: d, predecessor: v };\r\n        });\r\n    });\r\n    nodes.forEach(function (k) {\r\n        var rowK = results[k];\r\n        nodes.forEach(function (i) {\r\n            var rowI = results[i];\r\n            nodes.forEach(function (j) {\r\n                var ik = rowI[k];\r\n                var kj = rowK[j];\r\n                var ij = rowI[j];\r\n                var altDistance = ik.distance + kj.distance;\r\n                if (altDistance < ij.distance) {\r\n                    ij.distance = altDistance;\r\n                    ij.predecessor = kj.predecessor;\r\n                }\r\n            });\r\n        });\r\n    });\r\n    return results;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\floyd-warshall.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\floyd-warshall.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAE7B,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC;AAE/B,IAAI,mBAAmB,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAExC,SAAS,aAAa,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM;IACxC,OAAO,gBAAgB,CAAC,CAAC,EACD,QAAQ,IAAI,mBAAmB,EAC/B,MAAM,IAAI,UAAS,CAAC,IAAI,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC;AAED,SAAS,gBAAgB,CAAC,CAAC,EAAE,QAAQ,EAAE,MAAM;IAC3C,IAAI,OAAO,GAAG,EAAE,EACZ,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;IAEtB,KAAK,CAAC,OAAO,CAAC,UAAS,CAAC;QACtB,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;QAChB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC;QAChC,KAAK,CAAC,OAAO,CAAC,UAAS,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,EAAE;gBACX,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC;aACxD;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI;YAC7B,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAClC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;YACvB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,OAAO,CAAC,UAAS,CAAC;QACtB,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACtB,KAAK,CAAC,OAAO,CAAC,UAAS,CAAC;YACtB,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACtB,KAAK,CAAC,OAAO,CAAC,UAAS,CAAC;gBACtB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,WAAW,GAAG,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;gBAC5C,IAAI,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE;oBAC7B,EAAE,CAAC,QAAQ,GAAG,WAAW,CAAC;oBAC1B,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,WAAW,CAAC;iBACjC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["var _ = require(\"../lodash\");\n\nmodule.exports = floydWarshall;\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(g,\n                          weightFn || DEFAULT_WEIGHT_FUNC,\n                          edgeFn || function(v) { return g.outEdges(v); });\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {},\n      nodes = g.nodes();\n\n  nodes.forEach(function(v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function(w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function(edge) {\n      var w = edge.v === v ? edge.w : edge.v,\n          d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function(k) {\n    var rowK = results[k];\n    nodes.forEach(function(i) {\n      var rowI = results[i];\n      nodes.forEach(function(j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n"]}]}