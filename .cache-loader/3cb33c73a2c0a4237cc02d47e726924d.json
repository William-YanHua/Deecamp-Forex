{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import treemapDice from \"./dice\";\r\nimport treemapSlice from \"./slice\";\r\nimport { phi, squarifyRatio } from \"./squarify\";\r\nexport default (function custom(ratio) {\r\n    function resquarify(parent, x0, y0, x1, y1) {\r\n        if ((rows = parent._squarify) && (rows.ratio === ratio)) {\r\n            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;\r\n            while (++j < m) {\r\n                row = rows[j], nodes = row.children;\r\n                for (i = row.value = 0, n = nodes.length; i < n; ++i)\r\n                    row.value += nodes[i].value;\r\n                if (row.dice)\r\n                    treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\r\n                else\r\n                    treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\r\n                value -= row.value;\r\n            }\r\n        }\r\n        else {\r\n            parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\r\n            rows.ratio = ratio;\r\n        }\r\n    }\r\n    resquarify.ratio = function (x) {\r\n        return custom((x = +x) > 1 ? x : 1);\r\n    };\r\n    return resquarify;\r\n})(phi);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-hierarchy\\src\\treemap\\resquarify.js"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,QAAQ,CAAC;AACjC,OAAO,YAAY,MAAM,SAAS,CAAC;AACnC,OAAO,EAAC,GAAG,EAAE,aAAa,EAAC,MAAM,YAAY,CAAC;AAE9C,eAAe,CAAC,SAAS,MAAM,CAAC,KAAK;IAEnC,SAAS,UAAU,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;QACxC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,EAAE;YACvD,IAAI,IAAI,EACJ,GAAG,EACH,KAAK,EACL,CAAC,EACD,CAAC,GAAG,CAAC,CAAC,EACN,CAAC,EACD,CAAC,GAAG,IAAI,CAAC,MAAM,EACf,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAEzB,OAAO,EAAE,CAAC,GAAG,CAAC,EAAE;gBACd,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,QAAQ,CAAC;gBACpC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;oBAAE,GAAG,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBAClF,IAAI,GAAG,CAAC,IAAI;oBAAE,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;;oBAC3E,YAAY,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,GAAG,KAAK,EAAE,EAAE,CAAC,CAAC;gBACxE,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC;aACpB;SACF;aAAM;YACL,MAAM,CAAC,SAAS,GAAG,IAAI,GAAG,aAAa,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACvE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;IACH,CAAC;IAED,UAAU,CAAC,KAAK,GAAG,UAAS,CAAC;QAC3B,OAAO,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import treemapDice from \"./dice\";\nimport treemapSlice from \"./slice\";\nimport {phi, squarifyRatio} from \"./squarify\";\n\nexport default (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);\n        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n"]}]}