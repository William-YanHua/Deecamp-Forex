{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\coord\\esm\\coord\\cartesian.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\coord\\esm\\coord\\cartesian.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport Coordinate from './base';\r\nvar Cartesian = (function (_super) {\r\n    __extends(Cartesian, _super);\r\n    function Cartesian(cfg) {\r\n        var _this = _super.call(this, cfg) || this;\r\n        _this.isRect = true;\r\n        _this.type = 'cartesian';\r\n        _this.initial();\r\n        return _this;\r\n    }\r\n    Cartesian.prototype.initial = function () {\r\n        _super.prototype.initial.call(this);\r\n        var start = this.start;\r\n        var end = this.end;\r\n        this.x = {\r\n            start: start.x,\r\n            end: end.x,\r\n        };\r\n        this.y = {\r\n            start: start.y,\r\n            end: end.y,\r\n        };\r\n    };\r\n    Cartesian.prototype.convertPoint = function (point) {\r\n        var _a;\r\n        var x = point.x, y = point.y;\r\n        if (this.isTransposed) {\r\n            _a = [y, x], x = _a[0], y = _a[1];\r\n        }\r\n        return {\r\n            x: this.convertDim(x, 'x'),\r\n            y: this.convertDim(y, 'y'),\r\n        };\r\n    };\r\n    Cartesian.prototype.invertPoint = function (point) {\r\n        var _a;\r\n        var x = this.invertDim(point.x, 'x');\r\n        var y = this.invertDim(point.y, 'y');\r\n        if (this.isTransposed) {\r\n            _a = [y, x], x = _a[0], y = _a[1];\r\n        }\r\n        return { x: x, y: y };\r\n    };\r\n    return Cartesian;\r\n}(Coordinate));\r\nexport default Cartesian;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\coord\\esm\\coord\\cartesian.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\coord\\esm\\coord\\cartesian.js"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAClC,OAAO,UAAU,MAAM,QAAQ,CAAC;AAKhC,IAAI,SAAS,GAAiB,CAAC,UAAU,MAAM;IAC3C,SAAS,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7B,SAAS,SAAS,CAAC,GAAG;QAClB,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC;QAC3C,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;QACzB,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACjB,CAAC;IACD,SAAS,CAAC,SAAS,CAAC,OAAO,GAAG;QAC1B,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvB,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG;YACL,KAAK,EAAE,KAAK,CAAC,CAAC;YACd,GAAG,EAAE,GAAG,CAAC,CAAC;SACb,CAAC;QACF,IAAI,CAAC,CAAC,GAAG;YACL,KAAK,EAAE,KAAK,CAAC,CAAC;YACd,GAAG,EAAE,GAAG,CAAC,CAAC;SACb,CAAC;IACN,CAAC,CAAC;IACF,SAAS,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,KAAK;QAC9C,IAAI,EAAE,CAAC;QACP,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;QAE7B,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;SACrC;QACD,OAAO;YACH,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC;YAC1B,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC;SAC7B,CAAC;IACN,CAAC,CAAC;IACF,SAAS,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,KAAK;QAC7C,IAAI,EAAE,CAAC;QACP,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACrC,IAAI,IAAI,CAAC,YAAY,EAAE;YACnB,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;SACrC;QACD,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC1B,CAAC,CAAC;IACF,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;AACf,eAAe,SAAS,CAAC","sourcesContent":["import { __extends } from \"tslib\";\nimport Coordinate from './base';\n/**\n * 笛卡尔坐标系\n * https://www.zhihu.com/question/20665303\n */\nvar Cartesian = /** @class */ (function (_super) {\n    __extends(Cartesian, _super);\n    function Cartesian(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.isRect = true;\n        _this.type = 'cartesian';\n        _this.initial();\n        return _this;\n    }\n    Cartesian.prototype.initial = function () {\n        _super.prototype.initial.call(this);\n        var start = this.start;\n        var end = this.end;\n        this.x = {\n            start: start.x,\n            end: end.x,\n        };\n        this.y = {\n            start: start.y,\n            end: end.y,\n        };\n    };\n    Cartesian.prototype.convertPoint = function (point) {\n        var _a;\n        var x = point.x, y = point.y;\n        // 交换\n        if (this.isTransposed) {\n            _a = [y, x], x = _a[0], y = _a[1];\n        }\n        return {\n            x: this.convertDim(x, 'x'),\n            y: this.convertDim(y, 'y'),\n        };\n    };\n    Cartesian.prototype.invertPoint = function (point) {\n        var _a;\n        var x = this.invertDim(point.x, 'x');\n        var y = this.invertDim(point.y, 'y');\n        if (this.isTransposed) {\n            _a = [y, x], x = _a[0], y = _a[1];\n        }\n        return { x: x, y: y };\n    };\n    return Cartesian;\n}(Coordinate));\nexport default Cartesian;\n//# sourceMappingURL=cartesian.js.map"]}]}