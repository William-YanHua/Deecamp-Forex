{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-entities\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-entities\\index.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar legacy = require('character-entities-legacy');\r\nvar invalid = require('character-reference-invalid');\r\nvar decimal = require('is-decimal');\r\nvar hexadecimal = require('is-hexadecimal');\r\nvar alphanumerical = require('is-alphanumerical');\r\nvar decodeEntity = require('./decode-entity');\r\nmodule.exports = parseEntities;\r\nvar own = {}.hasOwnProperty;\r\nvar fromCharCode = String.fromCharCode;\r\nvar noop = Function.prototype;\r\nvar defaults = {\r\n    warning: null,\r\n    reference: null,\r\n    text: null,\r\n    warningContext: null,\r\n    referenceContext: null,\r\n    textContext: null,\r\n    position: {},\r\n    additional: null,\r\n    attribute: false,\r\n    nonTerminated: true\r\n};\r\nvar NAMED = 'named';\r\nvar HEXADECIMAL = 'hexadecimal';\r\nvar DECIMAL = 'decimal';\r\nvar BASE = {};\r\nBASE[HEXADECIMAL] = 16;\r\nBASE[DECIMAL] = 10;\r\nvar TESTS = {};\r\nTESTS[NAMED] = alphanumerical;\r\nTESTS[DECIMAL] = decimal;\r\nTESTS[HEXADECIMAL] = hexadecimal;\r\nvar NAMED_NOT_TERMINATED = 1;\r\nvar NUMERIC_NOT_TERMINATED = 2;\r\nvar NAMED_EMPTY = 3;\r\nvar NUMERIC_EMPTY = 4;\r\nvar NAMED_UNKNOWN = 5;\r\nvar NUMERIC_DISALLOWED = 6;\r\nvar NUMERIC_PROHIBITED = 7;\r\nvar MESSAGES = {};\r\nMESSAGES[NAMED_NOT_TERMINATED] =\r\n    'Named character references must be terminated by a semicolon';\r\nMESSAGES[NUMERIC_NOT_TERMINATED] =\r\n    'Numeric character references must be terminated by a semicolon';\r\nMESSAGES[NAMED_EMPTY] = 'Named character references cannot be empty';\r\nMESSAGES[NUMERIC_EMPTY] = 'Numeric character references cannot be empty';\r\nMESSAGES[NAMED_UNKNOWN] = 'Named character references must be known';\r\nMESSAGES[NUMERIC_DISALLOWED] =\r\n    'Numeric character references cannot be disallowed';\r\nMESSAGES[NUMERIC_PROHIBITED] =\r\n    'Numeric character references cannot be outside the permissible Unicode range';\r\nfunction parseEntities(value, options) {\r\n    var settings = {};\r\n    var option;\r\n    var key;\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n    for (key in defaults) {\r\n        option = options[key];\r\n        settings[key] =\r\n            option === null || option === undefined ? defaults[key] : option;\r\n    }\r\n    if (settings.position.indent || settings.position.start) {\r\n        settings.indent = settings.position.indent || [];\r\n        settings.position = settings.position.start;\r\n    }\r\n    return parse(value, settings);\r\n}\r\nfunction parse(value, settings) {\r\n    var additional = settings.additional;\r\n    var nonTerminated = settings.nonTerminated;\r\n    var handleText = settings.text;\r\n    var handleReference = settings.reference;\r\n    var handleWarning = settings.warning;\r\n    var textContext = settings.textContext;\r\n    var referenceContext = settings.referenceContext;\r\n    var warningContext = settings.warningContext;\r\n    var pos = settings.position;\r\n    var indent = settings.indent || [];\r\n    var length = value.length;\r\n    var index = 0;\r\n    var lines = -1;\r\n    var column = pos.column || 1;\r\n    var line = pos.line || 1;\r\n    var queue = '';\r\n    var result = [];\r\n    var entityCharacters;\r\n    var namedEntity;\r\n    var terminated;\r\n    var characters;\r\n    var character;\r\n    var reference;\r\n    var following;\r\n    var warning;\r\n    var reason;\r\n    var output;\r\n    var entity;\r\n    var begin;\r\n    var start;\r\n    var type;\r\n    var test;\r\n    var prev;\r\n    var next;\r\n    var diff;\r\n    var end;\r\n    prev = now();\r\n    warning = handleWarning ? parseError : noop;\r\n    index--;\r\n    length++;\r\n    while (++index < length) {\r\n        if (character === '\\n') {\r\n            column = indent[lines] || 1;\r\n        }\r\n        character = at(index);\r\n        if (character !== '&') {\r\n            if (character === '\\n') {\r\n                line++;\r\n                lines++;\r\n                column = 0;\r\n            }\r\n            if (character) {\r\n                queue += character;\r\n                column++;\r\n            }\r\n            else {\r\n                flush();\r\n            }\r\n        }\r\n        else {\r\n            following = at(index + 1);\r\n            if (following === '\\t' ||\r\n                following === '\\n' ||\r\n                following === '\\f' ||\r\n                following === ' ' ||\r\n                following === '<' ||\r\n                following === '&' ||\r\n                following === '' ||\r\n                (additional && following === additional)) {\r\n                queue += character;\r\n                column++;\r\n                continue;\r\n            }\r\n            start = index + 1;\r\n            begin = start;\r\n            end = start;\r\n            if (following !== '#') {\r\n                type = NAMED;\r\n            }\r\n            else {\r\n                end = ++begin;\r\n                following = at(end);\r\n                if (following === 'x' || following === 'X') {\r\n                    type = HEXADECIMAL;\r\n                    end = ++begin;\r\n                }\r\n                else {\r\n                    type = DECIMAL;\r\n                }\r\n            }\r\n            entityCharacters = '';\r\n            entity = '';\r\n            characters = '';\r\n            test = TESTS[type];\r\n            end--;\r\n            while (++end < length) {\r\n                following = at(end);\r\n                if (!test(following)) {\r\n                    break;\r\n                }\r\n                characters += following;\r\n                if (type === NAMED && own.call(legacy, characters)) {\r\n                    entityCharacters = characters;\r\n                    entity = legacy[characters];\r\n                }\r\n            }\r\n            terminated = at(end) === ';';\r\n            if (terminated) {\r\n                end++;\r\n                namedEntity = type === NAMED ? decodeEntity(characters) : false;\r\n                if (namedEntity) {\r\n                    entityCharacters = characters;\r\n                    entity = namedEntity;\r\n                }\r\n            }\r\n            diff = 1 + end - start;\r\n            if (!terminated && !nonTerminated) {\r\n            }\r\n            else if (!characters) {\r\n                if (type !== NAMED) {\r\n                    warning(NUMERIC_EMPTY, diff);\r\n                }\r\n            }\r\n            else if (type === NAMED) {\r\n                if (terminated && !entity) {\r\n                    warning(NAMED_UNKNOWN, 1);\r\n                }\r\n                else {\r\n                    if (entityCharacters !== characters) {\r\n                        end = begin + entityCharacters.length;\r\n                        diff = 1 + end - begin;\r\n                        terminated = false;\r\n                    }\r\n                    if (!terminated) {\r\n                        reason = entityCharacters ? NAMED_NOT_TERMINATED : NAMED_EMPTY;\r\n                        if (!settings.attribute) {\r\n                            warning(reason, diff);\r\n                        }\r\n                        else {\r\n                            following = at(end);\r\n                            if (following === '=') {\r\n                                warning(reason, diff);\r\n                                entity = null;\r\n                            }\r\n                            else if (alphanumerical(following)) {\r\n                                entity = null;\r\n                            }\r\n                            else {\r\n                                warning(reason, diff);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                reference = entity;\r\n            }\r\n            else {\r\n                if (!terminated) {\r\n                    warning(NUMERIC_NOT_TERMINATED, diff);\r\n                }\r\n                reference = parseInt(characters, BASE[type]);\r\n                if (prohibited(reference)) {\r\n                    warning(NUMERIC_PROHIBITED, diff);\r\n                    reference = '\\uFFFD';\r\n                }\r\n                else if (reference in invalid) {\r\n                    warning(NUMERIC_DISALLOWED, diff);\r\n                    reference = invalid[reference];\r\n                }\r\n                else {\r\n                    output = '';\r\n                    if (disallowed(reference)) {\r\n                        warning(NUMERIC_DISALLOWED, diff);\r\n                    }\r\n                    if (reference > 0xffff) {\r\n                        reference -= 0x10000;\r\n                        output += fromCharCode((reference >>> (10 & 0x3ff)) | 0xd800);\r\n                        reference = 0xdc00 | (reference & 0x3ff);\r\n                    }\r\n                    reference = output + fromCharCode(reference);\r\n                }\r\n            }\r\n            if (!reference) {\r\n                characters = value.slice(start - 1, end);\r\n                queue += characters;\r\n                column += characters.length;\r\n                index = end - 1;\r\n            }\r\n            else {\r\n                flush();\r\n                prev = now();\r\n                index = end - 1;\r\n                column += end - start + 1;\r\n                result.push(reference);\r\n                next = now();\r\n                next.offset++;\r\n                if (handleReference) {\r\n                    handleReference.call(referenceContext, reference, { start: prev, end: next }, value.slice(start - 1, end));\r\n                }\r\n                prev = next;\r\n            }\r\n        }\r\n    }\r\n    return result.join('');\r\n    function now() {\r\n        return {\r\n            line: line,\r\n            column: column,\r\n            offset: index + (pos.offset || 0)\r\n        };\r\n    }\r\n    function parseError(code, offset) {\r\n        var position = now();\r\n        position.column += offset;\r\n        position.offset += offset;\r\n        handleWarning.call(warningContext, MESSAGES[code], position, code);\r\n    }\r\n    function at(position) {\r\n        return value.charAt(position);\r\n    }\r\n    function flush() {\r\n        if (queue) {\r\n            result.push(queue);\r\n            if (handleText) {\r\n                handleText.call(textContext, queue, { start: prev, end: now() });\r\n            }\r\n            queue = '';\r\n        }\r\n    }\r\n}\r\nfunction prohibited(code) {\r\n    return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff;\r\n}\r\nfunction disallowed(code) {\r\n    return ((code >= 0x0001 && code <= 0x0008) ||\r\n        code === 0x000b ||\r\n        (code >= 0x000d && code <= 0x001f) ||\r\n        (code >= 0x007f && code <= 0x009f) ||\r\n        (code >= 0xfdd0 && code <= 0xfdef) ||\r\n        (code & 0xffff) === 0xffff ||\r\n        (code & 0xffff) === 0xfffe);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-entities\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-entities\\index.js"],"names":[],"mappings":"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","sourcesContent":["'use strict'\n\nvar legacy = require('character-entities-legacy')\nvar invalid = require('character-reference-invalid')\nvar decimal = require('is-decimal')\nvar hexadecimal = require('is-hexadecimal')\nvar alphanumerical = require('is-alphanumerical')\nvar decodeEntity = require('./decode-entity')\n\nmodule.exports = parseEntities\n\nvar own = {}.hasOwnProperty\nvar fromCharCode = String.fromCharCode\nvar noop = Function.prototype\n\n/* Default settings. */\nvar defaults = {\n  warning: null,\n  reference: null,\n  text: null,\n  warningContext: null,\n  referenceContext: null,\n  textContext: null,\n  position: {},\n  additional: null,\n  attribute: false,\n  nonTerminated: true\n}\n\n/* Reference types. */\nvar NAMED = 'named'\nvar HEXADECIMAL = 'hexadecimal'\nvar DECIMAL = 'decimal'\n\n/* Map of bases. */\nvar BASE = {}\n\nBASE[HEXADECIMAL] = 16\nBASE[DECIMAL] = 10\n\n/* Map of types to tests. Each type of character reference\n * accepts different characters. This test is used to\n * detect whether a reference has ended (as the semicolon\n * is not strictly needed). */\nvar TESTS = {}\n\nTESTS[NAMED] = alphanumerical\nTESTS[DECIMAL] = decimal\nTESTS[HEXADECIMAL] = hexadecimal\n\n/* Warning messages. */\nvar NAMED_NOT_TERMINATED = 1\nvar NUMERIC_NOT_TERMINATED = 2\nvar NAMED_EMPTY = 3\nvar NUMERIC_EMPTY = 4\nvar NAMED_UNKNOWN = 5\nvar NUMERIC_DISALLOWED = 6\nvar NUMERIC_PROHIBITED = 7\n\nvar MESSAGES = {}\n\nMESSAGES[NAMED_NOT_TERMINATED] =\n  'Named character references must be terminated by a semicolon'\nMESSAGES[NUMERIC_NOT_TERMINATED] =\n  'Numeric character references must be terminated by a semicolon'\nMESSAGES[NAMED_EMPTY] = 'Named character references cannot be empty'\nMESSAGES[NUMERIC_EMPTY] = 'Numeric character references cannot be empty'\nMESSAGES[NAMED_UNKNOWN] = 'Named character references must be known'\nMESSAGES[NUMERIC_DISALLOWED] =\n  'Numeric character references cannot be disallowed'\nMESSAGES[NUMERIC_PROHIBITED] =\n  'Numeric character references cannot be outside the permissible Unicode range'\n\n/* Wrap to ensure clean parameters are given to `parse`. */\nfunction parseEntities(value, options) {\n  var settings = {}\n  var option\n  var key\n\n  if (!options) {\n    options = {}\n  }\n\n  for (key in defaults) {\n    option = options[key]\n    settings[key] =\n      option === null || option === undefined ? defaults[key] : option\n  }\n\n  if (settings.position.indent || settings.position.start) {\n    settings.indent = settings.position.indent || []\n    settings.position = settings.position.start\n  }\n\n  return parse(value, settings)\n}\n\n/* Parse entities. */\nfunction parse(value, settings) {\n  var additional = settings.additional\n  var nonTerminated = settings.nonTerminated\n  var handleText = settings.text\n  var handleReference = settings.reference\n  var handleWarning = settings.warning\n  var textContext = settings.textContext\n  var referenceContext = settings.referenceContext\n  var warningContext = settings.warningContext\n  var pos = settings.position\n  var indent = settings.indent || []\n  var length = value.length\n  var index = 0\n  var lines = -1\n  var column = pos.column || 1\n  var line = pos.line || 1\n  var queue = ''\n  var result = []\n  var entityCharacters\n  var namedEntity\n  var terminated\n  var characters\n  var character\n  var reference\n  var following\n  var warning\n  var reason\n  var output\n  var entity\n  var begin\n  var start\n  var type\n  var test\n  var prev\n  var next\n  var diff\n  var end\n\n  /* Cache the current point. */\n  prev = now()\n\n  /* Wrap `handleWarning`. */\n  warning = handleWarning ? parseError : noop\n\n  /* Ensure the algorithm walks over the first character\n   * and the end (inclusive). */\n  index--\n  length++\n\n  while (++index < length) {\n    /* If the previous character was a newline. */\n    if (character === '\\n') {\n      column = indent[lines] || 1\n    }\n\n    character = at(index)\n\n    /* Handle anything other than an ampersand,\n     * including newlines and EOF. */\n    if (character !== '&') {\n      if (character === '\\n') {\n        line++\n        lines++\n        column = 0\n      }\n\n      if (character) {\n        queue += character\n        column++\n      } else {\n        flush()\n      }\n    } else {\n      following = at(index + 1)\n\n      /* The behaviour depends on the identity of the next\n       * character. */\n      if (\n        following === '\\t' /* Tab */ ||\n        following === '\\n' /* Newline */ ||\n        following === '\\f' /* Form feed */ ||\n        following === ' ' /* Space */ ||\n        following === '<' /* Less-than */ ||\n        following === '&' /* Ampersand */ ||\n        following === '' ||\n        (additional && following === additional)\n      ) {\n        /* Not a character reference. No characters\n         * are consumed, and nothing is returned.\n         * This is not an error, either. */\n        queue += character\n        column++\n\n        continue\n      }\n\n      start = index + 1\n      begin = start\n      end = start\n\n      /* Numerical entity. */\n      if (following !== '#') {\n        type = NAMED\n      } else {\n        end = ++begin\n\n        /* The behaviour further depends on the\n         * character after the U+0023 NUMBER SIGN. */\n        following = at(end)\n\n        if (following === 'x' || following === 'X') {\n          /* ASCII hex digits. */\n          type = HEXADECIMAL\n          end = ++begin\n        } else {\n          /* ASCII digits. */\n          type = DECIMAL\n        }\n      }\n\n      entityCharacters = ''\n      entity = ''\n      characters = ''\n      test = TESTS[type]\n      end--\n\n      while (++end < length) {\n        following = at(end)\n\n        if (!test(following)) {\n          break\n        }\n\n        characters += following\n\n        /* Check if we can match a legacy named\n         * reference.  If so, we cache that as the\n         * last viable named reference.  This\n         * ensures we do not need to walk backwards\n         * later. */\n        if (type === NAMED && own.call(legacy, characters)) {\n          entityCharacters = characters\n          entity = legacy[characters]\n        }\n      }\n\n      terminated = at(end) === ';'\n\n      if (terminated) {\n        end++\n\n        namedEntity = type === NAMED ? decodeEntity(characters) : false\n\n        if (namedEntity) {\n          entityCharacters = characters\n          entity = namedEntity\n        }\n      }\n\n      diff = 1 + end - start\n\n      if (!terminated && !nonTerminated) {\n        /* Empty. */\n      } else if (!characters) {\n        /* An empty (possible) entity is valid, unless\n         * its numeric (thus an ampersand followed by\n         * an octothorp). */\n        if (type !== NAMED) {\n          warning(NUMERIC_EMPTY, diff)\n        }\n      } else if (type === NAMED) {\n        /* An ampersand followed by anything\n         * unknown, and not terminated, is invalid. */\n        if (terminated && !entity) {\n          warning(NAMED_UNKNOWN, 1)\n        } else {\n          /* If theres something after an entity\n           * name which is not known, cap the\n           * reference. */\n          if (entityCharacters !== characters) {\n            end = begin + entityCharacters.length\n            diff = 1 + end - begin\n            terminated = false\n          }\n\n          /* If the reference is not terminated,\n           * warn. */\n          if (!terminated) {\n            reason = entityCharacters ? NAMED_NOT_TERMINATED : NAMED_EMPTY\n\n            if (!settings.attribute) {\n              warning(reason, diff)\n            } else {\n              following = at(end)\n\n              if (following === '=') {\n                warning(reason, diff)\n                entity = null\n              } else if (alphanumerical(following)) {\n                entity = null\n              } else {\n                warning(reason, diff)\n              }\n            }\n          }\n        }\n\n        reference = entity\n      } else {\n        if (!terminated) {\n          /* All non-terminated numeric entities are\n           * not rendered, and trigger a warning. */\n          warning(NUMERIC_NOT_TERMINATED, diff)\n        }\n\n        /* When terminated and number, parse as\n         * either hexadecimal or decimal. */\n        reference = parseInt(characters, BASE[type])\n\n        /* Trigger a warning when the parsed number\n         * is prohibited, and replace with\n         * replacement character. */\n        if (prohibited(reference)) {\n          warning(NUMERIC_PROHIBITED, diff)\n          reference = '\\uFFFD'\n        } else if (reference in invalid) {\n          /* Trigger a warning when the parsed number\n           * is disallowed, and replace by an\n           * alternative. */\n          warning(NUMERIC_DISALLOWED, diff)\n          reference = invalid[reference]\n        } else {\n          /* Parse the number. */\n          output = ''\n\n          /* Trigger a warning when the parsed\n           * number should not be used. */\n          if (disallowed(reference)) {\n            warning(NUMERIC_DISALLOWED, diff)\n          }\n\n          /* Stringify the number. */\n          if (reference > 0xffff) {\n            reference -= 0x10000\n            output += fromCharCode((reference >>> (10 & 0x3ff)) | 0xd800)\n            reference = 0xdc00 | (reference & 0x3ff)\n          }\n\n          reference = output + fromCharCode(reference)\n        }\n      }\n\n      /* If we could not find a reference, queue the\n       * checked characters (as normal characters),\n       * and move the pointer to their end. This is\n       * possible because we can be certain neither\n       * newlines nor ampersands are included. */\n      if (!reference) {\n        characters = value.slice(start - 1, end)\n        queue += characters\n        column += characters.length\n        index = end - 1\n      } else {\n        /* Found it! First eat the queued\n         * characters as normal text, then eat\n         * an entity. */\n        flush()\n\n        prev = now()\n        index = end - 1\n        column += end - start + 1\n        result.push(reference)\n        next = now()\n        next.offset++\n\n        if (handleReference) {\n          handleReference.call(\n            referenceContext,\n            reference,\n            {start: prev, end: next},\n            value.slice(start - 1, end)\n          )\n        }\n\n        prev = next\n      }\n    }\n  }\n\n  /* Return the reduced nodes, and any possible warnings. */\n  return result.join('')\n\n  /* Get current position. */\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: index + (pos.offset || 0)\n    }\n  }\n\n  /* “Throw” a parse-error: a warning. */\n  function parseError(code, offset) {\n    var position = now()\n\n    position.column += offset\n    position.offset += offset\n\n    handleWarning.call(warningContext, MESSAGES[code], position, code)\n  }\n\n  /* Get character at position. */\n  function at(position) {\n    return value.charAt(position)\n  }\n\n  /* Flush `queue` (normal text). Macro invoked before\n   * each entity and at the end of `value`.\n   * Does nothing when `queue` is empty. */\n  function flush() {\n    if (queue) {\n      result.push(queue)\n\n      if (handleText) {\n        handleText.call(textContext, queue, {start: prev, end: now()})\n      }\n\n      queue = ''\n    }\n  }\n}\n\n/* Check if `character` is outside the permissible unicode range. */\nfunction prohibited(code) {\n  return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff\n}\n\n/* Check if `character` is disallowed. */\nfunction disallowed(code) {\n  return (\n    (code >= 0x0001 && code <= 0x0008) ||\n    code === 0x000b ||\n    (code >= 0x000d && code <= 0x001f) ||\n    (code >= 0x007f && code <= 0x009f) ||\n    (code >= 0xfdd0 && code <= 0xfdef) ||\n    (code & 0xffff) === 0xffff ||\n    (code & 0xffff) === 0xfffe\n  )\n}\n"]}]}