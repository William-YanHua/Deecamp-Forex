{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile-location\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile-location\\index.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nmodule.exports = factory;\r\nfunction factory(file) {\r\n    var contents = indices(String(file));\r\n    return {\r\n        toPosition: offsetToPositionFactory(contents),\r\n        toOffset: positionToOffsetFactory(contents)\r\n    };\r\n}\r\nfunction offsetToPositionFactory(indices) {\r\n    return offsetToPosition;\r\n    function offsetToPosition(offset) {\r\n        var index = -1;\r\n        var length = indices.length;\r\n        if (offset < 0) {\r\n            return {};\r\n        }\r\n        while (++index < length) {\r\n            if (indices[index] > offset) {\r\n                return {\r\n                    line: index + 1,\r\n                    column: offset - (indices[index - 1] || 0) + 1,\r\n                    offset: offset\r\n                };\r\n            }\r\n        }\r\n        return {};\r\n    }\r\n}\r\nfunction positionToOffsetFactory(indices) {\r\n    return positionToOffset;\r\n    function positionToOffset(position) {\r\n        var line = position && position.line;\r\n        var column = position && position.column;\r\n        if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {\r\n            return (indices[line - 2] || 0) + column - 1 || 0;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\nfunction indices(value) {\r\n    var result = [];\r\n    var index = value.indexOf('\\n');\r\n    while (index !== -1) {\r\n        result.push(index + 1);\r\n        index = value.indexOf('\\n', index + 1);\r\n    }\r\n    result.push(value.length + 1);\r\n    return result;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile-location\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile-location\\index.js"],"names":[],"mappings":"AAAA,YAAY,CAAA;AAGZ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAA;AAGxB,SAAS,OAAO,CAAC,IAAI;IACnB,IAAI,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;IAEpC,OAAO;QACL,UAAU,EAAE,uBAAuB,CAAC,QAAQ,CAAC;QAC7C,QAAQ,EAAE,uBAAuB,CAAC,QAAQ,CAAC;KAC5C,CAAA;AACH,CAAC;AAID,SAAS,uBAAuB,CAAC,OAAO;IACtC,OAAO,gBAAgB,CAAA;IAIvB,SAAS,gBAAgB,CAAC,MAAM;QAC9B,IAAI,KAAK,GAAG,CAAC,CAAC,CAAA;QACd,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;QAE3B,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,OAAO,EAAE,CAAA;SACV;QAED,OAAO,EAAE,KAAK,GAAG,MAAM,EAAE;YACvB,IAAI,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,EAAE;gBAC3B,OAAO;oBACL,IAAI,EAAE,KAAK,GAAG,CAAC;oBACf,MAAM,EAAE,MAAM,GAAG,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;oBAC9C,MAAM,EAAE,MAAM;iBACf,CAAA;aACF;SACF;QAED,OAAO,EAAE,CAAA;IACX,CAAC;AACH,CAAC;AAID,SAAS,uBAAuB,CAAC,OAAO;IACtC,OAAO,gBAAgB,CAAA;IAIvB,SAAS,gBAAgB,CAAC,QAAQ;QAChC,IAAI,IAAI,GAAG,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAA;QACpC,IAAI,MAAM,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAA;QAExC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,OAAO,EAAE;YACzD,OAAO,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,CAAA;SAClD;QAED,OAAO,CAAC,CAAC,CAAA;IACX,CAAC;AACH,CAAC;AAGD,SAAS,OAAO,CAAC,KAAK;IACpB,IAAI,MAAM,GAAG,EAAE,CAAA;IACf,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;IAE/B,OAAO,KAAK,KAAK,CAAC,CAAC,EAAE;QACnB,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;QACtB,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAA;KACvC;IAED,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IAE7B,OAAO,MAAM,CAAA;AACf,CAAC","sourcesContent":["'use strict'\n\n/* Expose. */\nmodule.exports = factory\n\n/* Factory. */\nfunction factory(file) {\n  var contents = indices(String(file))\n\n  return {\n    toPosition: offsetToPositionFactory(contents),\n    toOffset: positionToOffsetFactory(contents)\n  }\n}\n\n/* Factory to get the line and column-based `position` for\n * `offset` in the bound indices. */\nfunction offsetToPositionFactory(indices) {\n  return offsetToPosition\n\n  /* Get the line and column-based `position` for\n   * `offset` in the bound indices. */\n  function offsetToPosition(offset) {\n    var index = -1\n    var length = indices.length\n\n    if (offset < 0) {\n      return {}\n    }\n\n    while (++index < length) {\n      if (indices[index] > offset) {\n        return {\n          line: index + 1,\n          column: offset - (indices[index - 1] || 0) + 1,\n          offset: offset\n        }\n      }\n    }\n\n    return {}\n  }\n}\n\n/* Factory to get the `offset` for a line and column-based\n * `position` in the bound indices. */\nfunction positionToOffsetFactory(indices) {\n  return positionToOffset\n\n  /* Get the `offset` for a line and column-based\n   * `position` in the bound indices. */\n  function positionToOffset(position) {\n    var line = position && position.line\n    var column = position && position.column\n\n    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {\n      return (indices[line - 2] || 0) + column - 1 || 0\n    }\n\n    return -1\n  }\n}\n\n/* Get indices of line-breaks in `value`. */\nfunction indices(value) {\n  var result = []\n  var index = value.indexOf('\\n')\n\n  while (index !== -1) {\n    result.push(index + 1)\n    index = value.indexOf('\\n', index + 1)\n  }\n\n  result.push(value.length + 1)\n\n  return result\n}\n"]}]}