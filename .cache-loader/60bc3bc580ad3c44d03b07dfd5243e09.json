{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\regression.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\regression.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar assign = require('@antv/util/lib/mix');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isNumber = require('@antv/util/lib/type/is-number');\r\nvar regression = require('regression');\r\nvar getSeriesValues = require('../util/get-series-values');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar getFields = require('../util/option-parser').getFields;\r\nvar silverman = require('../util/bandwidth').silverman;\r\nvar DEFAULT_OPTIONS = {\r\n    as: ['x', 'y'],\r\n    method: 'linear',\r\n    order: 2,\r\n    precision: 2\r\n};\r\nvar REGRESSION_METHODS = [\r\n    'linear',\r\n    'exponential',\r\n    'logarithmic',\r\n    'power',\r\n    'polynomial'\r\n];\r\nfunction transform(dataView, options) {\r\n    options = assign({}, DEFAULT_OPTIONS, options);\r\n    var fields = getFields(options);\r\n    if (!isArray(fields) || fields.length !== 2) {\r\n        throw new TypeError('invalid fields: must be an array of 2 strings.');\r\n    }\r\n    var _a = __read(fields, 2), xField = _a[0], yField = _a[1];\r\n    var method = options.method;\r\n    if (REGRESSION_METHODS.indexOf(method) === -1) {\r\n        throw new TypeError(\"invalid method: \" + method + \". Must be one of \" + REGRESSION_METHODS.join(', '));\r\n    }\r\n    var points = dataView.rows.map(function (row) { return [row[xField], row[yField]]; });\r\n    var regressionResult = regression[method](points, options);\r\n    var extent = options.extent;\r\n    if (!isArray(extent) || extent.length !== 2) {\r\n        extent = dataView.range(xField);\r\n    }\r\n    var bandwidth = options.bandwidth;\r\n    if (!isNumber(bandwidth) || bandwidth <= 0) {\r\n        bandwidth = silverman(dataView.getColumn(xField));\r\n    }\r\n    var valuesToPredict = getSeriesValues(extent, bandwidth);\r\n    var result = [];\r\n    var _b = __read(options.as, 2), asX = _b[0], asY = _b[1];\r\n    valuesToPredict.forEach(function (value) {\r\n        var row = {};\r\n        var _a = __read(regressionResult.predict(value), 2), x = _a[0], y = _a[1];\r\n        row[asX] = x;\r\n        row[asY] = y;\r\n        if (isFinite(y)) {\r\n            result.push(row);\r\n        }\r\n    });\r\n    dataView.rows = result;\r\n}\r\nregisterTransform('regression', transform);\r\nmodule.exports = {\r\n    REGRESSION_METHODS: REGRESSION_METHODS\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\regression.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\regression.js"],"names":[],"mappings":"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","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isNumber = require('@antv/util/lib/type/is-number');\nconst regression = require('regression');\nconst getSeriesValues = require('../util/get-series-values');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  getFields\n} = require('../util/option-parser');\nconst {\n  silverman\n} = require('../util/bandwidth');\n\nconst DEFAULT_OPTIONS = {\n  as: [ 'x', 'y' ],\n  // fields: [ 'x', 'y' ], // required two fields\n  method: 'linear', // regression method: linear, exponential, logarithmic, power, polynomial\n  // extent: [], // extent to execute regression function, default: [ min(x), max(x) ]\n  // bandwidth: 1, // bandWidth to execute regression function\n  order: 2, // order of the polynomial curve\n  precision: 2 // the number of significant figures the output is rounded to\n};\n\nconst REGRESSION_METHODS = [\n  'linear',\n  'exponential',\n  'logarithmic',\n  'power',\n  'polynomial'\n];\n\nfunction transform(dataView, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  const fields = getFields(options);\n  if (!isArray(fields) || fields.length !== 2) {\n    throw new TypeError('invalid fields: must be an array of 2 strings.');\n  }\n  const [ xField, yField ] = fields;\n  const method = options.method;\n  if (REGRESSION_METHODS.indexOf(method) === -1) {\n    throw new TypeError(`invalid method: ${method}. Must be one of ${REGRESSION_METHODS.join(', ')}`);\n  }\n  const points = dataView.rows.map(row => [ row[xField], row[yField] ]);\n  const regressionResult = regression[method](points, options);\n  let extent = options.extent;\n  if (!isArray(extent) || extent.length !== 2) {\n    extent = dataView.range(xField);\n  }\n  let bandwidth = options.bandwidth;\n  if (!isNumber(bandwidth) || bandwidth <= 0) {\n    bandwidth = silverman(dataView.getColumn(xField));\n  }\n  const valuesToPredict = getSeriesValues(extent, bandwidth);\n  const result = [];\n  const [ asX, asY ] = options.as;\n  valuesToPredict.forEach(value => {\n    const row = {};\n    const [ x, y ] = regressionResult.predict(value);\n    row[asX] = x;\n    row[asY] = y;\n    if (isFinite(y)) {\n      result.push(row);\n    }\n  });\n  dataView.rows = result;\n}\n\nregisterTransform('regression', transform);\n\nmodule.exports = {\n  REGRESSION_METHODS\n};\n"]}]}