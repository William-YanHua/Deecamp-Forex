{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\create-react-class\\factory.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\create-react-class\\factory.js","mtime":1517346959000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar _assign = require('object-assign');\r\nvar emptyObject = require('fbjs/lib/emptyObject');\r\nvar _invariant = require('fbjs/lib/invariant');\r\nif (process.env.NODE_ENV !== 'production') {\r\n    var warning = require('fbjs/lib/warning');\r\n}\r\nvar MIXINS_KEY = 'mixins';\r\nfunction identity(fn) {\r\n    return fn;\r\n}\r\nvar ReactPropTypeLocationNames;\r\nif (process.env.NODE_ENV !== 'production') {\r\n    ReactPropTypeLocationNames = {\r\n        prop: 'prop',\r\n        context: 'context',\r\n        childContext: 'child context'\r\n    };\r\n}\r\nelse {\r\n    ReactPropTypeLocationNames = {};\r\n}\r\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\r\n    var injectedMixins = [];\r\n    var ReactClassInterface = {\r\n        mixins: 'DEFINE_MANY',\r\n        statics: 'DEFINE_MANY',\r\n        propTypes: 'DEFINE_MANY',\r\n        contextTypes: 'DEFINE_MANY',\r\n        childContextTypes: 'DEFINE_MANY',\r\n        getDefaultProps: 'DEFINE_MANY_MERGED',\r\n        getInitialState: 'DEFINE_MANY_MERGED',\r\n        getChildContext: 'DEFINE_MANY_MERGED',\r\n        render: 'DEFINE_ONCE',\r\n        componentWillMount: 'DEFINE_MANY',\r\n        componentDidMount: 'DEFINE_MANY',\r\n        componentWillReceiveProps: 'DEFINE_MANY',\r\n        shouldComponentUpdate: 'DEFINE_ONCE',\r\n        componentWillUpdate: 'DEFINE_MANY',\r\n        componentDidUpdate: 'DEFINE_MANY',\r\n        componentWillUnmount: 'DEFINE_MANY',\r\n        UNSAFE_componentWillMount: 'DEFINE_MANY',\r\n        UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\r\n        UNSAFE_componentWillUpdate: 'DEFINE_MANY',\r\n        updateComponent: 'OVERRIDE_BASE'\r\n    };\r\n    var ReactClassStaticInterface = {\r\n        getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\r\n    };\r\n    var RESERVED_SPEC_KEYS = {\r\n        displayName: function (Constructor, displayName) {\r\n            Constructor.displayName = displayName;\r\n        },\r\n        mixins: function (Constructor, mixins) {\r\n            if (mixins) {\r\n                for (var i = 0; i < mixins.length; i++) {\r\n                    mixSpecIntoComponent(Constructor, mixins[i]);\r\n                }\r\n            }\r\n        },\r\n        childContextTypes: function (Constructor, childContextTypes) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                validateTypeDef(Constructor, childContextTypes, 'childContext');\r\n            }\r\n            Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\r\n        },\r\n        contextTypes: function (Constructor, contextTypes) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                validateTypeDef(Constructor, contextTypes, 'context');\r\n            }\r\n            Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\r\n        },\r\n        getDefaultProps: function (Constructor, getDefaultProps) {\r\n            if (Constructor.getDefaultProps) {\r\n                Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\r\n            }\r\n            else {\r\n                Constructor.getDefaultProps = getDefaultProps;\r\n            }\r\n        },\r\n        propTypes: function (Constructor, propTypes) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                validateTypeDef(Constructor, propTypes, 'prop');\r\n            }\r\n            Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\r\n        },\r\n        statics: function (Constructor, statics) {\r\n            mixStaticSpecIntoComponent(Constructor, statics);\r\n        },\r\n        autobind: function () { }\r\n    };\r\n    function validateTypeDef(Constructor, typeDef, location) {\r\n        for (var propName in typeDef) {\r\n            if (typeDef.hasOwnProperty(propName)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' +\r\n                        'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function validateMethodOverride(isAlreadyDefined, name) {\r\n        var specPolicy = ReactClassInterface.hasOwnProperty(name)\r\n            ? ReactClassInterface[name]\r\n            : null;\r\n        if (ReactClassMixin.hasOwnProperty(name)) {\r\n            _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' +\r\n                '`%s` from your class specification. Ensure that your method names ' +\r\n                'do not overlap with React methods.', name);\r\n        }\r\n        if (isAlreadyDefined) {\r\n            _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' +\r\n                '`%s` on your component more than once. This conflict may be due ' +\r\n                'to a mixin.', name);\r\n        }\r\n    }\r\n    function mixSpecIntoComponent(Constructor, spec) {\r\n        if (!spec) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                var typeofSpec = typeof spec;\r\n                var isMixinValid = typeofSpec === 'object' && spec !== null;\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" +\r\n                        'or not an object. Check the mixins included by the component, ' +\r\n                        'as well as any mixins they include themselves. ' +\r\n                        'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" +\r\n            'use a component class or function as a mixin. Instead, just use a ' +\r\n            'regular object.');\r\n        _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" +\r\n            'use a component as a mixin. Instead, just use a regular object.');\r\n        var proto = Constructor.prototype;\r\n        var autoBindPairs = proto.__reactAutoBindPairs;\r\n        if (spec.hasOwnProperty(MIXINS_KEY)) {\r\n            RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\r\n        }\r\n        for (var name in spec) {\r\n            if (!spec.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            if (name === MIXINS_KEY) {\r\n                continue;\r\n            }\r\n            var property = spec[name];\r\n            var isAlreadyDefined = proto.hasOwnProperty(name);\r\n            validateMethodOverride(isAlreadyDefined, name);\r\n            if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\r\n                RESERVED_SPEC_KEYS[name](Constructor, property);\r\n            }\r\n            else {\r\n                var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\r\n                var isFunction = typeof property === 'function';\r\n                var shouldAutoBind = isFunction &&\r\n                    !isReactClassMethod &&\r\n                    !isAlreadyDefined &&\r\n                    spec.autobind !== false;\r\n                if (shouldAutoBind) {\r\n                    autoBindPairs.push(name, property);\r\n                    proto[name] = property;\r\n                }\r\n                else {\r\n                    if (isAlreadyDefined) {\r\n                        var specPolicy = ReactClassInterface[name];\r\n                        _invariant(isReactClassMethod &&\r\n                            (specPolicy === 'DEFINE_MANY_MERGED' ||\r\n                                specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' +\r\n                            'when mixing in component specs.', specPolicy, name);\r\n                        if (specPolicy === 'DEFINE_MANY_MERGED') {\r\n                            proto[name] = createMergedResultFunction(proto[name], property);\r\n                        }\r\n                        else if (specPolicy === 'DEFINE_MANY') {\r\n                            proto[name] = createChainedFunction(proto[name], property);\r\n                        }\r\n                    }\r\n                    else {\r\n                        proto[name] = property;\r\n                        if (process.env.NODE_ENV !== 'production') {\r\n                            if (typeof property === 'function' && spec.displayName) {\r\n                                proto[name].displayName = spec.displayName + '_' + name;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function mixStaticSpecIntoComponent(Constructor, statics) {\r\n        if (!statics) {\r\n            return;\r\n        }\r\n        for (var name in statics) {\r\n            var property = statics[name];\r\n            if (!statics.hasOwnProperty(name)) {\r\n                continue;\r\n            }\r\n            var isReserved = name in RESERVED_SPEC_KEYS;\r\n            _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' +\r\n                'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\r\n                'as an instance property instead; it will still be accessible on the ' +\r\n                'constructor.', name);\r\n            var isAlreadyDefined = name in Constructor;\r\n            if (isAlreadyDefined) {\r\n                var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\r\n                    ? ReactClassStaticInterface[name]\r\n                    : null;\r\n                _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' +\r\n                    '`%s` on your component more than once. This conflict may be ' +\r\n                    'due to a mixin.', name);\r\n                Constructor[name] = createMergedResultFunction(Constructor[name], property);\r\n                return;\r\n            }\r\n            Constructor[name] = property;\r\n        }\r\n    }\r\n    function mergeIntoWithNoDuplicateKeys(one, two) {\r\n        _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\r\n        for (var key in two) {\r\n            if (two.hasOwnProperty(key)) {\r\n                _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' +\r\n                    'Tried to merge two objects with the same key: `%s`. This conflict ' +\r\n                    'may be due to a mixin; in particular, this may be caused by two ' +\r\n                    'getInitialState() or getDefaultProps() methods returning objects ' +\r\n                    'with clashing keys.', key);\r\n                one[key] = two[key];\r\n            }\r\n        }\r\n        return one;\r\n    }\r\n    function createMergedResultFunction(one, two) {\r\n        return function mergedResult() {\r\n            var a = one.apply(this, arguments);\r\n            var b = two.apply(this, arguments);\r\n            if (a == null) {\r\n                return b;\r\n            }\r\n            else if (b == null) {\r\n                return a;\r\n            }\r\n            var c = {};\r\n            mergeIntoWithNoDuplicateKeys(c, a);\r\n            mergeIntoWithNoDuplicateKeys(c, b);\r\n            return c;\r\n        };\r\n    }\r\n    function createChainedFunction(one, two) {\r\n        return function chainedFunction() {\r\n            one.apply(this, arguments);\r\n            two.apply(this, arguments);\r\n        };\r\n    }\r\n    function bindAutoBindMethod(component, method) {\r\n        var boundMethod = method.bind(component);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            boundMethod.__reactBoundContext = component;\r\n            boundMethod.__reactBoundMethod = method;\r\n            boundMethod.__reactBoundArguments = null;\r\n            var componentName = component.constructor.displayName;\r\n            var _bind = boundMethod.bind;\r\n            boundMethod.bind = function (newThis) {\r\n                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n                    args[_key - 1] = arguments[_key];\r\n                }\r\n                if (newThis !== component && newThis !== null) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        warning(false, 'bind(): React component methods may only be bound to the ' +\r\n                            'component instance. See %s', componentName);\r\n                    }\r\n                }\r\n                else if (!args.length) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        warning(false, 'bind(): You are binding a component method to the component. ' +\r\n                            'React does this for you automatically in a high-performance ' +\r\n                            'way, so you can safely remove this call. See %s', componentName);\r\n                    }\r\n                    return boundMethod;\r\n                }\r\n                var reboundMethod = _bind.apply(boundMethod, arguments);\r\n                reboundMethod.__reactBoundContext = component;\r\n                reboundMethod.__reactBoundMethod = method;\r\n                reboundMethod.__reactBoundArguments = args;\r\n                return reboundMethod;\r\n            };\r\n        }\r\n        return boundMethod;\r\n    }\r\n    function bindAutoBindMethods(component) {\r\n        var pairs = component.__reactAutoBindPairs;\r\n        for (var i = 0; i < pairs.length; i += 2) {\r\n            var autoBindKey = pairs[i];\r\n            var method = pairs[i + 1];\r\n            component[autoBindKey] = bindAutoBindMethod(component, method);\r\n        }\r\n    }\r\n    var IsMountedPreMixin = {\r\n        componentDidMount: function () {\r\n            this.__isMounted = true;\r\n        }\r\n    };\r\n    var IsMountedPostMixin = {\r\n        componentWillUnmount: function () {\r\n            this.__isMounted = false;\r\n        }\r\n    };\r\n    var ReactClassMixin = {\r\n        replaceState: function (newState, callback) {\r\n            this.updater.enqueueReplaceState(this, newState, callback);\r\n        },\r\n        isMounted: function () {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' +\r\n                    'subscriptions and pending requests in componentWillUnmount to ' +\r\n                    'prevent memory leaks.', (this.constructor && this.constructor.displayName) ||\r\n                    this.name ||\r\n                    'Component');\r\n                this.__didWarnIsMounted = true;\r\n            }\r\n            return !!this.__isMounted;\r\n        }\r\n    };\r\n    var ReactClassComponent = function () { };\r\n    _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\r\n    function createClass(spec) {\r\n        var Constructor = identity(function (props, context, updater) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' +\r\n                    'JSX instead. See: https://fb.me/react-legacyfactory');\r\n            }\r\n            if (this.__reactAutoBindPairs.length) {\r\n                bindAutoBindMethods(this);\r\n            }\r\n            this.props = props;\r\n            this.context = context;\r\n            this.refs = emptyObject;\r\n            this.updater = updater || ReactNoopUpdateQueue;\r\n            this.state = null;\r\n            var initialState = this.getInitialState ? this.getInitialState() : null;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (initialState === undefined &&\r\n                    this.getInitialState._isMockFunction) {\r\n                    initialState = null;\r\n                }\r\n            }\r\n            _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\r\n            this.state = initialState;\r\n        });\r\n        Constructor.prototype = new ReactClassComponent();\r\n        Constructor.prototype.constructor = Constructor;\r\n        Constructor.prototype.__reactAutoBindPairs = [];\r\n        injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\r\n        mixSpecIntoComponent(Constructor, IsMountedPreMixin);\r\n        mixSpecIntoComponent(Constructor, spec);\r\n        mixSpecIntoComponent(Constructor, IsMountedPostMixin);\r\n        if (Constructor.getDefaultProps) {\r\n            Constructor.defaultProps = Constructor.getDefaultProps();\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (Constructor.getDefaultProps) {\r\n                Constructor.getDefaultProps.isReactClassApproved = {};\r\n            }\r\n            if (Constructor.prototype.getInitialState) {\r\n                Constructor.prototype.getInitialState.isReactClassApproved = {};\r\n            }\r\n        }\r\n        _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' +\r\n                'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\r\n                'The name is phrased as a question because the function is ' +\r\n                'expected to return a value.', spec.displayName || 'A component');\r\n            warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' +\r\n                'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');\r\n            warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\r\n                'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');\r\n        }\r\n        for (var methodName in ReactClassInterface) {\r\n            if (!Constructor.prototype[methodName]) {\r\n                Constructor.prototype[methodName] = null;\r\n            }\r\n        }\r\n        return Constructor;\r\n    }\r\n    return createClass;\r\n}\r\nmodule.exports = factory;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\create-react-class\\factory.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\create-react-class\\factory.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n"]}]}