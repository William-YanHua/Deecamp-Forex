{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\hierarchy\\lib\\layout\\separate-root.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\hierarchy\\lib\\layout\\separate-root.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var hierarchy = require('./hierarchy');\r\nmodule.exports = function (root, options) {\r\n    var left = hierarchy(root.data, options, true);\r\n    var right = hierarchy(root.data, options, true);\r\n    var treeSize = root.children.length;\r\n    var rightTreeSize = Math.round(treeSize / 2);\r\n    var getSide = options.getSide || function (child, index) {\r\n        if (index < rightTreeSize) {\r\n            return 'right';\r\n        }\r\n        return 'left';\r\n    };\r\n    for (var i = 0; i < treeSize; i++) {\r\n        var child = root.children[i];\r\n        var side = getSide(child, i);\r\n        if (side === 'right') {\r\n            right.children.push(child);\r\n        }\r\n        else {\r\n            left.children.push(child);\r\n        }\r\n    }\r\n    left.eachNode(function (node) {\r\n        if (!node.isRoot()) {\r\n            node.side = 'left';\r\n        }\r\n    });\r\n    right.eachNode(function (node) {\r\n        if (!node.isRoot()) {\r\n            node.side = 'right';\r\n        }\r\n    });\r\n    return {\r\n        left: left,\r\n        right: right\r\n    };\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\hierarchy\\lib\\layout\\separate-root.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\hierarchy\\lib\\layout\\separate-root.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAEvC,MAAM,CAAC,OAAO,GAAG,UAAU,IAAI,EAAE,OAAO;IAEtC,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAE/C,IAAI,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAGhD,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACpC,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IAE7C,IAAI,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,UAAU,KAAK,EAAE,KAAK;QACrD,IAAI,KAAK,GAAG,aAAa,EAAE;YACzB,OAAO,OAAO,CAAC;SAChB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE7B,IAAI,IAAI,KAAK,OAAO,EAAE;YACpB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;IAED,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI;QAC1B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;YAClB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;SACpB;IACH,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,QAAQ,CAAC,UAAU,IAAI;QAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE;YAClB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;SACrB;IACH,CAAC,CAAC,CAAC;IACH,OAAO;QACL,IAAI,EAAE,IAAI;QACV,KAAK,EAAE,KAAK;KACb,CAAC;AACJ,CAAC,CAAC","sourcesContent":["var hierarchy = require('./hierarchy');\n\nmodule.exports = function (root, options) {\n  // separate into left and right trees\n  var left = hierarchy(root.data, options, true); // root only\n\n  var right = hierarchy(root.data, options, true); // root only\n  // automatically\n\n  var treeSize = root.children.length;\n  var rightTreeSize = Math.round(treeSize / 2); // separate left and right tree by meta data\n\n  var getSide = options.getSide || function (child, index) {\n    if (index < rightTreeSize) {\n      return 'right';\n    }\n\n    return 'left';\n  };\n\n  for (var i = 0; i < treeSize; i++) {\n    var child = root.children[i];\n    var side = getSide(child, i);\n\n    if (side === 'right') {\n      right.children.push(child);\n    } else {\n      left.children.push(child);\n    }\n  }\n\n  left.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'left';\n    }\n  });\n  right.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'right';\n    }\n  });\n  return {\n    left: left,\n    right: right\n  };\n};"]}]}