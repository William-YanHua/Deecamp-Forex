{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/pages/QuotationPage/QuotationChart.tsx","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/pages/QuotationPage/QuotationChart.tsx","mtime":1596379644591},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport React from \"react\";\nimport { Chart, Geom, Axis, Tooltip, Legend, View, } from \"bizcharts\";\nimport DataSet from \"@antv/data-set\";\nimport Slider from \"bizcharts-plugin-slider\";\nvar QuotationChart = (function (_super) {\n    __extends(QuotationChart, _super);\n    function QuotationChart() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.ds = new DataSet({\n            state: {\n                start: \"2018-09-10\",\n                end: \"2018-10-23\",\n            },\n        });\n        _this.onChange = function (obj) {\n            var startText = obj.startText, endText = obj.endText;\n            _this.ds.setState(\"start\", startText);\n            _this.ds.setState(\"end\", endText);\n        };\n        return _this;\n    }\n    QuotationChart.prototype.render = function () {\n        var _this = this;\n        var DataView = DataSet.DataView;\n        var data = this.props.data;\n        var cols = {\n            time: {\n                type: \"timeCat\",\n                nice: false,\n                range: [0, 1],\n            },\n            trend: {\n                values: [\"上涨\", \"下跌\"],\n            },\n            volume: {\n                alias: \"成交量\",\n            },\n            start: {\n                alias: \"开盘价\",\n            },\n            end: {\n                alias: \"收盘价\",\n            },\n            max: {\n                alias: \"最高价\",\n            },\n            min: {\n                alias: \"最低价\",\n            },\n            range: {\n                alias: \"股票价格\",\n            },\n        };\n        var dv = this.ds.createView();\n        dv.source(data)\n            .transform({\n            type: \"filter\",\n            callback: function (obj) {\n                var date = obj.time;\n                return date <= _this.ds.state.end && date >= _this.ds.state.start;\n            },\n        })\n            .transform({\n            type: \"map\",\n            callback: function (obj) {\n                obj.trend = obj.start <= obj.end ? \"上涨\" : \"下跌\";\n                obj.range = [obj.start, obj.end, obj.max, obj.min];\n                return obj;\n            },\n        });\n        return (React.createElement(\"div\", null,\n            React.createElement(Chart, { height: 600, animate: false, padding: [30, 60, 40, 80], data: dv, scale: cols, forceFit: true },\n                React.createElement(Legend, null),\n                React.createElement(Tooltip, { showTitle: false, itemTpl: \"<li data-index={index}><span style=\\\"background-color:{color};\\\"\\r\\n              class=\\\"g2-tooltip-marker\\\"></span>{name}{value}</li>\" }),\n                React.createElement(View, { end: {\n                        x: 1,\n                        y: 0.5,\n                    }, data: dv },\n                    React.createElement(Axis, { name: \"time\" }),\n                    React.createElement(Axis, { name: \"range\" }),\n                    React.createElement(Geom, { type: \"schema\", position: \"time*range\", color: [\n                            \"trend\",\n                            function (val) {\n                                if (val === \"上涨\") {\n                                    return \"#f04864\";\n                                }\n                                if (val === \"下跌\") {\n                                    return \"#2fc25b\";\n                                }\n                                return \"#ffffff\";\n                            },\n                        ], tooltip: [\n                            \"time*start*end*max*min\",\n                            (function (time, start, end, max, min) {\n                                return {\n                                    name: time,\n                                    value: '<br><span style=\"padding-left: 16px\">开盘价：' +\n                                        start +\n                                        \"</span><br/>\" +\n                                        '<span style=\"padding-left: 16px\">收盘价：' +\n                                        end +\n                                        \"</span><br/>\" +\n                                        '<span style=\"padding-left: 16px\">最高价：' +\n                                        max +\n                                        \"</span><br/>\" +\n                                        '<span style=\"padding-left: 16px\">最低价：' +\n                                        min +\n                                        \"</span>\",\n                                };\n                            }),\n                        ], shape: \"candle\" })),\n                React.createElement(View, { start: {\n                        x: 0,\n                        y: 0.65,\n                    }, data: dv, scale: {\n                        volume: {\n                            tickCount: 2,\n                        },\n                    } },\n                    React.createElement(Axis, { name: \"volume\", label: {\n                            formatter: function (val) {\n                                return parseInt(val, 10) / 1000 + \"k\";\n                            },\n                        } }),\n                    React.createElement(Axis, { name: \"time\", tickLine: null, label: null }),\n                    React.createElement(Geom, { type: \"interval\", position: \"time*volume\", color: [\n                            \"trend\",\n                            function (val) {\n                                if (val === \"上涨\") {\n                                    return \"#f04864\";\n                                }\n                                if (val === \"下跌\") {\n                                    return \"#2fc25b\";\n                                }\n                                return \"#ffffff\";\n                            },\n                        ], tooltip: [\n                            \"time*volume\",\n                            function (time, volume) {\n                                return {\n                                    name: time,\n                                    value: '<br/><span style=\"padding-left: 16px\">成交量：' +\n                                        volume +\n                                        \"</span><br/>\",\n                                };\n                            },\n                        ], shape: \"candle\" }))),\n            React.createElement(\"div\", null,\n                React.createElement(Slider, { padding: [40, 80, 40, 80], width: \"auto\", start: this.ds.state.start, end: this.ds.state.end, xAxis: \"time\", yAxis: \"volume\", data: data, onChange: this.onChange }))));\n    };\n    return QuotationChart;\n}(React.Component));\nexport { QuotationChart };\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/pages/QuotationPage/QuotationChart.tsx","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/src/app/pages/QuotationPage/QuotationChart.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EACL,KAAK,EACL,IAAI,EACJ,IAAI,EACJ,OAAO,EACP,MAAM,EACN,IAAI,GACL,MAAM,WAAW,CAAC;AACnB,OAAO,OAAO,MAAM,gBAAgB,CAAC;AACrC,OAAO,MAAM,MAAM,yBAAyB,CAAC;AAO7C;IAAoC,kCAAsB;IAA1D;QAAA,qEAmNC;QAjNC,QAAE,GAAG,IAAI,OAAO,CAAC;YACf,KAAK,EAAE;gBACL,KAAK,EAAE,YAAY;gBACnB,GAAG,EAAE,YAAY;aAClB;SACF,CAAC,CAAC;QAEH,cAAQ,GAAG,UAAC,GAAG;YACN,IAAA,SAAS,GAAa,GAAG,UAAhB,EAAE,OAAO,GAAI,GAAG,QAAP,CAAQ;YACjC,KAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YACrC,KAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QACnC,CAAC,CAAA;;IAsMH,CAAC;IApMC,+BAAM,GAAN;QAAA,iBAmMC;QAjMQ,IAAA,QAAQ,GAAI,OAAO,SAAX,CAAY;QAEnB,IAAA,IAAI,GAAK,IAAI,CAAC,KAAK,KAAf,CAAgB;QAE5B,IAAM,IAAI,GAAG;YACX,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;aACd;YACD,KAAK,EAAE;gBACL,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;aACrB;YACD,MAAM,EAAE;gBACN,KAAK,EAAE,KAAK;aACb;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,KAAK;aACb;YACD,GAAG,EAAE;gBACH,KAAK,EAAE,KAAK;aACb;YACD,GAAG,EAAE;gBACH,KAAK,EAAE,KAAK;aACb;YACD,GAAG,EAAE;gBACH,KAAK,EAAE,KAAK;aACb;YACD,KAAK,EAAE;gBACL,KAAK,EAAE,MAAM;aACd;SACF,CAAC;QAGF,IAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;QAChC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;aACZ,SAAS,CAAC;YACT,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,UAAC,GAAG;gBACZ,IAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;gBACtB,OAAO,IAAI,IAAI,KAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,IAAI,IAAI,IAAI,KAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;YAClE,CAAC;SACF,CAAC;aACD,SAAS,CAAC;YACT,IAAI,EAAE,KAAK;YACX,QAAQ,EAAE,UAAC,GAAG;gBACZ,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC/C,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;gBACnD,OAAO,GAAG,CAAC;YACb,CAAC;SACF,CAAC,CAAC;QAEL,OAAO,CACL;YACE,oBAAC,KAAK,IACJ,MAAM,EAAE,GAAG,EACX,OAAO,EAAE,KAAK,EACd,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACzB,IAAI,EAAE,EAAE,EACR,KAAK,EAAE,IAAI,EACX,QAAQ,EAAE,IAAI;gBAEd,oBAAC,MAAM,OAAE;gBACT,oBAAC,OAAO,IACN,SAAS,EAAE,KAAK,EAChB,OAAO,EAAC,yIACwD,GAChE;gBACF,oBAAC,IAAI,IACH,GAAG,EAAE;wBACH,CAAC,EAAE,CAAC;wBACJ,CAAC,EAAE,GAAG;qBACP,EACD,IAAI,EAAE,EAAE;oBAER,oBAAC,IAAI,IAAC,IAAI,EAAC,MAAM,GAAE;oBACnB,oBAAC,IAAI,IAAC,IAAI,EAAC,OAAO,GAAE;oBACpB,oBAAC,IAAI,IACH,IAAI,EAAC,QAAQ,EACb,QAAQ,EAAC,YAAY,EACrB,KAAK,EAAE;4BACL,OAAO;4BACP,UAAC,GAAG;gCACF,IAAI,GAAG,KAAK,IAAI,EAAE;oCAChB,OAAO,SAAS,CAAC;iCAClB;gCAED,IAAI,GAAG,KAAK,IAAI,EAAE;oCAChB,OAAO,SAAS,CAAC;iCAClB;gCAED,OAAO,SAAS,CAAC;4BACnB,CAAC;yBACF,EACD,OAAO,EAAE;4BACP,wBAAwB;4BACxB,CAAC,UAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;gCAC1B,OAAO;oCACL,IAAI,EAAE,IAAI;oCACV,KAAK,EACH,2CAA2C;wCAC3C,KAAK;wCACL,cAAc;wCACd,uCAAuC;wCACvC,GAAG;wCACH,cAAc;wCACd,uCAAuC;wCACvC,GAAG;wCACH,cAAc;wCACd,uCAAuC;wCACvC,GAAG;wCACH,SAAS;iCACZ,CAAC;4BACJ,CAAC,CAAQ;yBACV,EACD,KAAK,EAAC,QAAQ,GACd,CACG;gBACP,oBAAC,IAAI,IACH,KAAK,EAAE;wBACL,CAAC,EAAE,CAAC;wBACJ,CAAC,EAAE,IAAI;qBACR,EACD,IAAI,EAAE,EAAE,EACR,KAAK,EAAE;wBACL,MAAM,EAAE;4BACN,SAAS,EAAE,CAAC;yBACb;qBACF;oBAED,oBAAC,IAAI,IACH,IAAI,EAAC,QAAQ,EACb,KAAK,EAAE;4BACL,SAAS,YAAC,GAAG;gCACX,OAAO,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;4BACxC,CAAC;yBACF,GACD;oBACF,oBAAC,IAAI,IAAC,IAAI,EAAC,MAAM,EAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,GAAG;oBAChD,oBAAC,IAAI,IACH,IAAI,EAAC,UAAU,EACf,QAAQ,EAAC,aAAa,EACtB,KAAK,EAAE;4BACL,OAAO;4BACP,UAAC,GAAG;gCACF,IAAI,GAAG,KAAK,IAAI,EAAE;oCAChB,OAAO,SAAS,CAAC;iCAClB;gCAED,IAAI,GAAG,KAAK,IAAI,EAAE;oCAChB,OAAO,SAAS,CAAC;iCAClB;gCAED,OAAO,SAAS,CAAC;4BACnB,CAAC;yBACF,EACD,OAAO,EAAE;4BACP,aAAa;4BACb,UAAC,IAAI,EAAE,MAAM;gCACX,OAAO;oCACL,IAAI,EAAE,IAAI;oCACV,KAAK,EACH,4CAA4C;wCAC5C,MAAM;wCACN,cAAc;iCACjB,CAAC;4BACJ,CAAC;yBACF,EACD,KAAK,EAAC,QAAQ,GACd,CACG,CACD;YACR;gBACE,oBAAC,MAAM,IACL,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EACzB,KAAK,EAAC,MAAM,EAEZ,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAC1B,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EACtB,KAAK,EAAC,MAAM,EACZ,KAAK,EAAC,QAAQ,EAOd,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACvB,CACE,CACF,CACP,CAAC;IACJ,CAAC;IACH,qBAAC;AAAD,CAAC,AAnND,CAAoC,KAAK,CAAC,SAAS,GAmNlD","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Chart,\r\n  Geom,\r\n  Axis,\r\n  Tooltip,\r\n  Legend,\r\n  View,\r\n} from \"bizcharts\";\r\nimport DataSet from \"@antv/data-set\";\r\nimport Slider from \"bizcharts-plugin-slider\";\r\nimport { BaseQuotation } from \"../../models/quotation/BaseQuotation\";\r\n\r\ninterface Props {\r\n  data: BaseQuotation[];\r\n}\r\n\r\nexport class QuotationChart extends React.Component<Props> {\r\n\r\n  ds = new DataSet({\r\n    state: {\r\n      start: \"2018-09-10\",\r\n      end: \"2018-10-23\",\r\n    },\r\n  });\r\n\r\n  onChange = (obj) => {\r\n    const {startText, endText} = obj;\r\n    this.ds.setState(\"start\", startText);\r\n    this.ds.setState(\"end\", endText);\r\n  }\r\n\r\n  render() {\r\n\r\n    const {DataView} = DataSet;\r\n\r\n    const { data } = this.props;\r\n\r\n    const cols = {\r\n      time: {\r\n        type: \"timeCat\",\r\n        nice: false,\r\n        range: [0, 1],\r\n      },\r\n      trend: {\r\n        values: [\"上涨\", \"下跌\"],\r\n      },\r\n      volume: {\r\n        alias: \"成交量\",\r\n      },\r\n      start: {\r\n        alias: \"开盘价\",\r\n      },\r\n      end: {\r\n        alias: \"收盘价\",\r\n      },\r\n      max: {\r\n        alias: \"最高价\",\r\n      },\r\n      min: {\r\n        alias: \"最低价\",\r\n      },\r\n      range: {\r\n        alias: \"股票价格\",\r\n      },\r\n    };\r\n    // 设置状态量，时间格式建议转换为时间戳，转换为时间戳时请注意区间\r\n\r\n    const dv = this.ds.createView();\r\n    dv.source(data)\r\n      .transform({\r\n        type: \"filter\",\r\n        callback: (obj) => {\r\n          const date = obj.time;\r\n          return date <= this.ds.state.end && date >= this.ds.state.start;\r\n        },\r\n      })\r\n      .transform({\r\n        type: \"map\",\r\n        callback: (obj) => {\r\n          obj.trend = obj.start <= obj.end ? \"上涨\" : \"下跌\";\r\n          obj.range = [obj.start, obj.end, obj.max, obj.min];\r\n          return obj;\r\n        },\r\n      });\r\n\r\n    return (\r\n      <div>\r\n        <Chart\r\n          height={600}\r\n          animate={false}\r\n          padding={[30, 60, 40, 80]}\r\n          data={dv}\r\n          scale={cols}\r\n          forceFit={true}\r\n        >\r\n          <Legend/>\r\n          <Tooltip\r\n            showTitle={false}\r\n            itemTpl=\"<li data-index={index}><span style=&quot;background-color:{color};&quot;\r\n              class=&quot;g2-tooltip-marker&quot;></span>{name}{value}</li>\"\r\n          />\r\n          <View\r\n            end={{\r\n              x: 1,\r\n              y: 0.5,\r\n            }}\r\n            data={dv}\r\n          >\r\n            <Axis name=\"time\"/>\r\n            <Axis name=\"range\"/>\r\n            <Geom\r\n              type=\"schema\"\r\n              position=\"time*range\"\r\n              color={[\r\n                \"trend\",\r\n                (val) => {\r\n                  if (val === \"上涨\") {\r\n                    return \"#f04864\";\r\n                  }\r\n\r\n                  if (val === \"下跌\") {\r\n                    return \"#2fc25b\";\r\n                  }\r\n\r\n                  return \"#ffffff\";\r\n                },\r\n              ]}\r\n              tooltip={[\r\n                \"time*start*end*max*min\",\r\n                ((time, start, end, max, min) => {\r\n                  return {\r\n                    name: time,\r\n                    value:\r\n                      '<br><span style=\"padding-left: 16px\">开盘价：' +\r\n                      start +\r\n                      \"</span><br/>\" +\r\n                      '<span style=\"padding-left: 16px\">收盘价：' +\r\n                      end +\r\n                      \"</span><br/>\" +\r\n                      '<span style=\"padding-left: 16px\">最高价：' +\r\n                      max +\r\n                      \"</span><br/>\" +\r\n                      '<span style=\"padding-left: 16px\">最低价：' +\r\n                      min +\r\n                      \"</span>\",\r\n                  };\r\n                }) as any,\r\n              ]}\r\n              shape=\"candle\"\r\n            />\r\n          </View>\r\n          <View\r\n            start={{\r\n              x: 0,\r\n              y: 0.65,\r\n            }}\r\n            data={dv}\r\n            scale={{\r\n              volume: {\r\n                tickCount: 2,\r\n              },\r\n            }}\r\n          >\r\n            <Axis\r\n              name=\"volume\"\r\n              label={{\r\n                formatter(val) {\r\n                  return parseInt(val, 10) / 1000 + \"k\";\r\n                },\r\n              }}\r\n            />\r\n            <Axis name=\"time\" tickLine={null} label={null}/>\r\n            <Geom\r\n              type=\"interval\"\r\n              position=\"time*volume\"\r\n              color={[\r\n                \"trend\",\r\n                (val) => {\r\n                  if (val === \"上涨\") {\r\n                    return \"#f04864\";\r\n                  }\r\n\r\n                  if (val === \"下跌\") {\r\n                    return \"#2fc25b\";\r\n                  }\r\n\r\n                  return \"#ffffff\";\r\n                },\r\n              ]}\r\n              tooltip={[\r\n                \"time*volume\",\r\n                (time, volume) => {\r\n                  return {\r\n                    name: time,\r\n                    value:\r\n                      '<br/><span style=\"padding-left: 16px\">成交量：' +\r\n                      volume +\r\n                      \"</span><br/>\",\r\n                  };\r\n                },\r\n              ]}\r\n              shape=\"candle\"\r\n            />\r\n          </View>\r\n        </Chart>\r\n        <div>\r\n          <Slider\r\n            padding={[40, 80, 40, 80]}\r\n            width=\"auto\"\r\n            // height={26}\r\n            start={this.ds.state.start}\r\n            end={this.ds.state.end}\r\n            xAxis=\"time\"\r\n            yAxis=\"volume\"\r\n            // scales={{\r\n            //   time: {\r\n            //     type: \"timeCat\",\r\n            //     nice: false,\r\n            //   },\r\n            // }}\r\n            data={data}\r\n            onChange={this.onChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}]}