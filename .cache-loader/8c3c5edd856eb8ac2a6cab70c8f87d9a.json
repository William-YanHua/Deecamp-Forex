{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\async-validator\\es\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\async-validator\\es\\index.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import _extends from 'babel-runtime/helpers/extends';\r\nimport _typeof from 'babel-runtime/helpers/typeof';\r\nimport { format, complementError, asyncMap, warning, deepMerge } from './util';\r\nimport validators from './validator/';\r\nimport { messages as defaultMessages, newMessages } from './messages';\r\nfunction Schema(descriptor) {\r\n    this.rules = null;\r\n    this._messages = defaultMessages;\r\n    this.define(descriptor);\r\n}\r\nSchema.prototype = {\r\n    messages: function messages(_messages) {\r\n        if (_messages) {\r\n            this._messages = deepMerge(newMessages(), _messages);\r\n        }\r\n        return this._messages;\r\n    },\r\n    define: function define(rules) {\r\n        if (!rules) {\r\n            throw new Error('Cannot configure a schema with no rules');\r\n        }\r\n        if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) !== 'object' || Array.isArray(rules)) {\r\n            throw new Error('Rules must be an object');\r\n        }\r\n        this.rules = {};\r\n        var z = void 0;\r\n        var item = void 0;\r\n        for (z in rules) {\r\n            if (rules.hasOwnProperty(z)) {\r\n                item = rules[z];\r\n                this.rules[z] = Array.isArray(item) ? item : [item];\r\n            }\r\n        }\r\n    },\r\n    validate: function validate(source_) {\r\n        var _this = this;\r\n        var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n        var oc = arguments[2];\r\n        var source = source_;\r\n        var options = o;\r\n        var callback = oc;\r\n        if (typeof options === 'function') {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        if (!this.rules || Object.keys(this.rules).length === 0) {\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            return;\r\n        }\r\n        function complete(results) {\r\n            var i = void 0;\r\n            var field = void 0;\r\n            var errors = [];\r\n            var fields = {};\r\n            function add(e) {\r\n                if (Array.isArray(e)) {\r\n                    errors = errors.concat.apply(errors, e);\r\n                }\r\n                else {\r\n                    errors.push(e);\r\n                }\r\n            }\r\n            for (i = 0; i < results.length; i++) {\r\n                add(results[i]);\r\n            }\r\n            if (!errors.length) {\r\n                errors = null;\r\n                fields = null;\r\n            }\r\n            else {\r\n                for (i = 0; i < errors.length; i++) {\r\n                    field = errors[i].field;\r\n                    fields[field] = fields[field] || [];\r\n                    fields[field].push(errors[i]);\r\n                }\r\n            }\r\n            callback(errors, fields);\r\n        }\r\n        if (options.messages) {\r\n            var messages = this.messages();\r\n            if (messages === defaultMessages) {\r\n                messages = newMessages();\r\n            }\r\n            deepMerge(messages, options.messages);\r\n            options.messages = messages;\r\n        }\r\n        else {\r\n            options.messages = this.messages();\r\n        }\r\n        var arr = void 0;\r\n        var value = void 0;\r\n        var series = {};\r\n        var keys = options.keys || Object.keys(this.rules);\r\n        keys.forEach(function (z) {\r\n            arr = _this.rules[z];\r\n            value = source[z];\r\n            arr.forEach(function (r) {\r\n                var rule = r;\r\n                if (typeof rule.transform === 'function') {\r\n                    if (source === source_) {\r\n                        source = _extends({}, source);\r\n                    }\r\n                    value = source[z] = rule.transform(value);\r\n                }\r\n                if (typeof rule === 'function') {\r\n                    rule = {\r\n                        validator: rule\r\n                    };\r\n                }\r\n                else {\r\n                    rule = _extends({}, rule);\r\n                }\r\n                rule.validator = _this.getValidationMethod(rule);\r\n                rule.field = z;\r\n                rule.fullField = rule.fullField || z;\r\n                rule.type = _this.getType(rule);\r\n                if (!rule.validator) {\r\n                    return;\r\n                }\r\n                series[z] = series[z] || [];\r\n                series[z].push({\r\n                    rule: rule,\r\n                    value: value,\r\n                    source: source,\r\n                    field: z\r\n                });\r\n            });\r\n        });\r\n        var errorFields = {};\r\n        asyncMap(series, options, function (data, doIt) {\r\n            var rule = data.rule;\r\n            var deep = (rule.type === 'object' || rule.type === 'array') && (_typeof(rule.fields) === 'object' || _typeof(rule.defaultField) === 'object');\r\n            deep = deep && (rule.required || !rule.required && data.value);\r\n            rule.field = data.field;\r\n            function addFullfield(key, schema) {\r\n                return _extends({}, schema, {\r\n                    fullField: rule.fullField + '.' + key\r\n                });\r\n            }\r\n            function cb() {\r\n                var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\r\n                var errors = e;\r\n                if (!Array.isArray(errors)) {\r\n                    errors = [errors];\r\n                }\r\n                if (errors.length) {\r\n                    warning('async-validator:', errors);\r\n                }\r\n                if (errors.length && rule.message) {\r\n                    errors = [].concat(rule.message);\r\n                }\r\n                errors = errors.map(complementError(rule));\r\n                if (options.first && errors.length) {\r\n                    errorFields[rule.field] = 1;\r\n                    return doIt(errors);\r\n                }\r\n                if (!deep) {\r\n                    doIt(errors);\r\n                }\r\n                else {\r\n                    if (rule.required && !data.value) {\r\n                        if (rule.message) {\r\n                            errors = [].concat(rule.message).map(complementError(rule));\r\n                        }\r\n                        else if (options.error) {\r\n                            errors = [options.error(rule, format(options.messages.required, rule.field))];\r\n                        }\r\n                        else {\r\n                            errors = [];\r\n                        }\r\n                        return doIt(errors);\r\n                    }\r\n                    var fieldsSchema = {};\r\n                    if (rule.defaultField) {\r\n                        for (var k in data.value) {\r\n                            if (data.value.hasOwnProperty(k)) {\r\n                                fieldsSchema[k] = rule.defaultField;\r\n                            }\r\n                        }\r\n                    }\r\n                    fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);\r\n                    for (var f in fieldsSchema) {\r\n                        if (fieldsSchema.hasOwnProperty(f)) {\r\n                            var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];\r\n                            fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));\r\n                        }\r\n                    }\r\n                    var schema = new Schema(fieldsSchema);\r\n                    schema.messages(options.messages);\r\n                    if (data.rule.options) {\r\n                        data.rule.options.messages = options.messages;\r\n                        data.rule.options.error = options.error;\r\n                    }\r\n                    schema.validate(data.value, data.rule.options || options, function (errs) {\r\n                        doIt(errs && errs.length ? errors.concat(errs) : errs);\r\n                    });\r\n                }\r\n            }\r\n            var res = rule.validator(rule, data.value, cb, data.source, options);\r\n            if (res && res.then) {\r\n                res.then(function () {\r\n                    return cb();\r\n                }, function (e) {\r\n                    return cb(e);\r\n                });\r\n            }\r\n        }, function (results) {\r\n            complete(results);\r\n        });\r\n    },\r\n    getType: function getType(rule) {\r\n        if (rule.type === undefined && rule.pattern instanceof RegExp) {\r\n            rule.type = 'pattern';\r\n        }\r\n        if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {\r\n            throw new Error(format('Unknown rule type %s', rule.type));\r\n        }\r\n        return rule.type || 'string';\r\n    },\r\n    getValidationMethod: function getValidationMethod(rule) {\r\n        if (typeof rule.validator === 'function') {\r\n            return rule.validator;\r\n        }\r\n        var keys = Object.keys(rule);\r\n        var messageIndex = keys.indexOf('message');\r\n        if (messageIndex !== -1) {\r\n            keys.splice(messageIndex, 1);\r\n        }\r\n        if (keys.length === 1 && keys[0] === 'required') {\r\n            return validators.required;\r\n        }\r\n        return validators[this.getType(rule)] || false;\r\n    }\r\n};\r\nSchema.register = function register(type, validator) {\r\n    if (typeof validator !== 'function') {\r\n        throw new Error('Cannot register a validator by type, validator is not a function');\r\n    }\r\n    validators[type] = validator;\r\n};\r\nSchema.messages = defaultMessages;\r\nexport default Schema;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\async-validator\\es\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\async-validator\\es\\index.js"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,+BAA+B,CAAC;AACrD,OAAO,OAAO,MAAM,8BAA8B,CAAC;AACnD,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAC/E,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,QAAQ,IAAI,eAAe,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AAQtE,SAAS,MAAM,CAAC,UAAU;IACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,SAAS,GAAG,eAAe,CAAC;IACjC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,CAAC,SAAS,GAAG;IACjB,QAAQ,EAAE,SAAS,QAAQ,CAAC,SAAS;QACnC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,CAAC,CAAC;SACtD;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACD,MAAM,EAAE,SAAS,MAAM,CAAC,KAAK;QAC3B,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;SAC5D;QACD,IAAI,CAAC,OAAO,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtG,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;QACf,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC;QAClB,KAAK,CAAC,IAAI,KAAK,EAAE;YACf,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gBAC3B,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aACrD;SACF;IACH,CAAC;IACD,QAAQ,EAAE,SAAS,QAAQ,CAAC,OAAO;QACjC,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/E,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAEtB,IAAI,MAAM,GAAG,OAAO,CAAC;QACrB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;YACjC,QAAQ,GAAG,OAAO,CAAC;YACnB,OAAO,GAAG,EAAE,CAAC;SACd;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACvD,IAAI,QAAQ,EAAE;gBACZ,QAAQ,EAAE,CAAC;aACZ;YACD,OAAO;SACR;QACD,SAAS,QAAQ,CAAC,OAAO;YACvB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;YACf,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;YACnB,IAAI,MAAM,GAAG,EAAE,CAAC;YAChB,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,SAAS,GAAG,CAAC,CAAC;gBACZ,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;oBACpB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;iBACzC;qBAAM;oBACL,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAChB;YACH,CAAC;YAED,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACjB;YACD,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;gBAClB,MAAM,GAAG,IAAI,CAAC;gBACd,MAAM,GAAG,IAAI,CAAC;aACf;iBAAM;gBACL,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBAClC,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;oBACxB,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;oBACpC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC/B;aACF;YACD,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC3B,CAAC;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC/B,IAAI,QAAQ,KAAK,eAAe,EAAE;gBAChC,QAAQ,GAAG,WAAW,EAAE,CAAC;aAC1B;YACD,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B;aAAM;YACL,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;SACpC;QACD,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;QACjB,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;QACnB,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;YACtB,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC;gBACrB,IAAI,IAAI,GAAG,CAAC,CAAC;gBACb,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,UAAU,EAAE;oBACxC,IAAI,MAAM,KAAK,OAAO,EAAE;wBACtB,MAAM,GAAG,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;qBAC/B;oBACD,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBAC3C;gBACD,IAAI,OAAO,IAAI,KAAK,UAAU,EAAE;oBAC9B,IAAI,GAAG;wBACL,SAAS,EAAE,IAAI;qBAChB,CAAC;iBACH;qBAAM;oBACL,IAAI,GAAG,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;iBAC3B;gBACD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBACjD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;gBACrC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACnB,OAAO;iBACR;gBACD,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC5B,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBACb,IAAI,EAAE,IAAI;oBACV,KAAK,EAAE,KAAK;oBACZ,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,CAAC;iBACT,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,IAAI,EAAE,IAAI;YAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACrB,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,QAAQ,CAAC,CAAC;YAC/I,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,SAAS,YAAY,CAAC,GAAG,EAAE,MAAM;gBAC/B,OAAO,QAAQ,CAAC,EAAE,EAAE,MAAM,EAAE;oBAC1B,SAAS,EAAE,IAAI,CAAC,SAAS,GAAG,GAAG,GAAG,GAAG;iBACtC,CAAC,CAAC;YACL,CAAC;YAED,SAAS,EAAE;gBACT,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAE/E,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAC1B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;iBACnB;gBACD,IAAI,MAAM,CAAC,MAAM,EAAE;oBACjB,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC;iBACrC;gBACD,IAAI,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;oBACjC,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAClC;gBAED,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;gBAE3C,IAAI,OAAO,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;oBAClC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC5B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrB;gBACD,IAAI,CAAC,IAAI,EAAE;oBACT,IAAI,CAAC,MAAM,CAAC,CAAC;iBACd;qBAAM;oBAIL,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;wBAChC,IAAI,IAAI,CAAC,OAAO,EAAE;4BAChB,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;yBAC7D;6BAAM,IAAI,OAAO,CAAC,KAAK,EAAE;4BACxB,MAAM,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC/E;6BAAM;4BACL,MAAM,GAAG,EAAE,CAAC;yBACb;wBACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;qBACrB;oBAED,IAAI,YAAY,GAAG,EAAE,CAAC;oBACtB,IAAI,IAAI,CAAC,YAAY,EAAE;wBACrB,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE;4BACxB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gCAChC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC;6BACrC;yBACF;qBACF;oBACD,YAAY,GAAG,QAAQ,CAAC,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5D,KAAK,IAAI,CAAC,IAAI,YAAY,EAAE;wBAC1B,IAAI,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;4BAClC,IAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvF,YAAY,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;yBAC/D;qBACF;oBACD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC;oBACtC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;oBAClC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;wBACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;wBAC9C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;qBACzC;oBACD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,OAAO,EAAE,UAAU,IAAI;wBACtE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACzD,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC;YAED,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACrE,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE;gBACnB,GAAG,CAAC,IAAI,CAAC;oBACP,OAAO,EAAE,EAAE,CAAC;gBACd,CAAC,EAAE,UAAU,CAAC;oBACZ,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;gBACf,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,EAAE,UAAU,OAAO;YAClB,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD,OAAO,EAAE,SAAS,OAAO,CAAC,IAAI;QAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,OAAO,YAAY,MAAM,EAAE;YAC7D,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;SACvB;QACD,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC9F,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;IAC/B,CAAC;IACD,mBAAmB,EAAE,SAAS,mBAAmB,CAAC,IAAI;QACpD,IAAI,OAAO,IAAI,CAAC,SAAS,KAAK,UAAU,EAAE;YACxC,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QACD,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3C,IAAI,YAAY,KAAK,CAAC,CAAC,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;SAC9B;QACD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;YAC/C,OAAO,UAAU,CAAC,QAAQ,CAAC;SAC5B;QACD,OAAO,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC;IACjD,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,IAAI,EAAE,SAAS;IACjD,IAAI,OAAO,SAAS,KAAK,UAAU,EAAE;QACnC,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;KACrF;IACD,UAAU,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,QAAQ,GAAG,eAAe,CAAC;AAElC,eAAe,MAAM,CAAC","sourcesContent":["import _extends from 'babel-runtime/helpers/extends';\nimport _typeof from 'babel-runtime/helpers/typeof';\nimport { format, complementError, asyncMap, warning, deepMerge } from './util';\nimport validators from './validator/';\nimport { messages as defaultMessages, newMessages } from './messages';\n\n/**\n *  Encapsulates a validation schema.\n *\n *  @param descriptor An object declaring validation rules\n *  for this schema.\n */\nfunction Schema(descriptor) {\n  this.rules = null;\n  this._messages = defaultMessages;\n  this.define(descriptor);\n}\n\nSchema.prototype = {\n  messages: function messages(_messages) {\n    if (_messages) {\n      this._messages = deepMerge(newMessages(), _messages);\n    }\n    return this._messages;\n  },\n  define: function define(rules) {\n    if (!rules) {\n      throw new Error('Cannot configure a schema with no rules');\n    }\n    if ((typeof rules === 'undefined' ? 'undefined' : _typeof(rules)) !== 'object' || Array.isArray(rules)) {\n      throw new Error('Rules must be an object');\n    }\n    this.rules = {};\n    var z = void 0;\n    var item = void 0;\n    for (z in rules) {\n      if (rules.hasOwnProperty(z)) {\n        item = rules[z];\n        this.rules[z] = Array.isArray(item) ? item : [item];\n      }\n    }\n  },\n  validate: function validate(source_) {\n    var _this = this;\n\n    var o = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var oc = arguments[2];\n\n    var source = source_;\n    var options = o;\n    var callback = oc;\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!this.rules || Object.keys(this.rules).length === 0) {\n      if (callback) {\n        callback();\n      }\n      return;\n    }\n    function complete(results) {\n      var i = void 0;\n      var field = void 0;\n      var errors = [];\n      var fields = {};\n\n      function add(e) {\n        if (Array.isArray(e)) {\n          errors = errors.concat.apply(errors, e);\n        } else {\n          errors.push(e);\n        }\n      }\n\n      for (i = 0; i < results.length; i++) {\n        add(results[i]);\n      }\n      if (!errors.length) {\n        errors = null;\n        fields = null;\n      } else {\n        for (i = 0; i < errors.length; i++) {\n          field = errors[i].field;\n          fields[field] = fields[field] || [];\n          fields[field].push(errors[i]);\n        }\n      }\n      callback(errors, fields);\n    }\n\n    if (options.messages) {\n      var messages = this.messages();\n      if (messages === defaultMessages) {\n        messages = newMessages();\n      }\n      deepMerge(messages, options.messages);\n      options.messages = messages;\n    } else {\n      options.messages = this.messages();\n    }\n    var arr = void 0;\n    var value = void 0;\n    var series = {};\n    var keys = options.keys || Object.keys(this.rules);\n    keys.forEach(function (z) {\n      arr = _this.rules[z];\n      value = source[z];\n      arr.forEach(function (r) {\n        var rule = r;\n        if (typeof rule.transform === 'function') {\n          if (source === source_) {\n            source = _extends({}, source);\n          }\n          value = source[z] = rule.transform(value);\n        }\n        if (typeof rule === 'function') {\n          rule = {\n            validator: rule\n          };\n        } else {\n          rule = _extends({}, rule);\n        }\n        rule.validator = _this.getValidationMethod(rule);\n        rule.field = z;\n        rule.fullField = rule.fullField || z;\n        rule.type = _this.getType(rule);\n        if (!rule.validator) {\n          return;\n        }\n        series[z] = series[z] || [];\n        series[z].push({\n          rule: rule,\n          value: value,\n          source: source,\n          field: z\n        });\n      });\n    });\n    var errorFields = {};\n    asyncMap(series, options, function (data, doIt) {\n      var rule = data.rule;\n      var deep = (rule.type === 'object' || rule.type === 'array') && (_typeof(rule.fields) === 'object' || _typeof(rule.defaultField) === 'object');\n      deep = deep && (rule.required || !rule.required && data.value);\n      rule.field = data.field;\n      function addFullfield(key, schema) {\n        return _extends({}, schema, {\n          fullField: rule.fullField + '.' + key\n        });\n      }\n\n      function cb() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        var errors = e;\n        if (!Array.isArray(errors)) {\n          errors = [errors];\n        }\n        if (errors.length) {\n          warning('async-validator:', errors);\n        }\n        if (errors.length && rule.message) {\n          errors = [].concat(rule.message);\n        }\n\n        errors = errors.map(complementError(rule));\n\n        if (options.first && errors.length) {\n          errorFields[rule.field] = 1;\n          return doIt(errors);\n        }\n        if (!deep) {\n          doIt(errors);\n        } else {\n          // if rule is required but the target object\n          // does not exist fail at the rule level and don't\n          // go deeper\n          if (rule.required && !data.value) {\n            if (rule.message) {\n              errors = [].concat(rule.message).map(complementError(rule));\n            } else if (options.error) {\n              errors = [options.error(rule, format(options.messages.required, rule.field))];\n            } else {\n              errors = [];\n            }\n            return doIt(errors);\n          }\n\n          var fieldsSchema = {};\n          if (rule.defaultField) {\n            for (var k in data.value) {\n              if (data.value.hasOwnProperty(k)) {\n                fieldsSchema[k] = rule.defaultField;\n              }\n            }\n          }\n          fieldsSchema = _extends({}, fieldsSchema, data.rule.fields);\n          for (var f in fieldsSchema) {\n            if (fieldsSchema.hasOwnProperty(f)) {\n              var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];\n              fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));\n            }\n          }\n          var schema = new Schema(fieldsSchema);\n          schema.messages(options.messages);\n          if (data.rule.options) {\n            data.rule.options.messages = options.messages;\n            data.rule.options.error = options.error;\n          }\n          schema.validate(data.value, data.rule.options || options, function (errs) {\n            doIt(errs && errs.length ? errors.concat(errs) : errs);\n          });\n        }\n      }\n\n      var res = rule.validator(rule, data.value, cb, data.source, options);\n      if (res && res.then) {\n        res.then(function () {\n          return cb();\n        }, function (e) {\n          return cb(e);\n        });\n      }\n    }, function (results) {\n      complete(results);\n    });\n  },\n  getType: function getType(rule) {\n    if (rule.type === undefined && rule.pattern instanceof RegExp) {\n      rule.type = 'pattern';\n    }\n    if (typeof rule.validator !== 'function' && rule.type && !validators.hasOwnProperty(rule.type)) {\n      throw new Error(format('Unknown rule type %s', rule.type));\n    }\n    return rule.type || 'string';\n  },\n  getValidationMethod: function getValidationMethod(rule) {\n    if (typeof rule.validator === 'function') {\n      return rule.validator;\n    }\n    var keys = Object.keys(rule);\n    var messageIndex = keys.indexOf('message');\n    if (messageIndex !== -1) {\n      keys.splice(messageIndex, 1);\n    }\n    if (keys.length === 1 && keys[0] === 'required') {\n      return validators.required;\n    }\n    return validators[this.getType(rule)] || false;\n  }\n};\n\nSchema.register = function register(type, validator) {\n  if (typeof validator !== 'function') {\n    throw new Error('Cannot register a validator by type, validator is not a function');\n  }\n  validators[type] = validator;\n};\n\nSchema.messages = defaultMessages;\n\nexport default Schema;"]}]}