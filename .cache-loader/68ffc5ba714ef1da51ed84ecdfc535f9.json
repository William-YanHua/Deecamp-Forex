{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-svg-path\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-svg-path\\index.js","mtime":1472942075000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["module.exports = parse;\r\nvar length = { a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0 };\r\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\r\nfunction parse(path) {\r\n    var data = [];\r\n    path.replace(segment, function (_, command, args) {\r\n        var type = command.toLowerCase();\r\n        args = parseValues(args);\r\n        if (type == 'm' && args.length > 2) {\r\n            data.push([command].concat(args.splice(0, 2)));\r\n            type = 'l';\r\n            command = command == 'm' ? 'l' : 'L';\r\n        }\r\n        while (true) {\r\n            if (args.length == length[type]) {\r\n                args.unshift(command);\r\n                return data.push(args);\r\n            }\r\n            if (args.length < length[type])\r\n                throw new Error('malformed path data');\r\n            data.push([command].concat(args.splice(0, length[type])));\r\n        }\r\n    });\r\n    return data;\r\n}\r\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\r\nfunction parseValues(args) {\r\n    var numbers = args.match(number);\r\n    return numbers ? numbers.map(Number) : [];\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-svg-path\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\parse-svg-path\\index.js"],"names":[],"mappings":"AACA,MAAM,CAAC,OAAO,GAAG,KAAK,CAAA;AAOtB,IAAI,MAAM,GAAG,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,CAAA;AAOzE,IAAI,OAAO,GAAG,kCAAkC,CAAA;AAWhD,SAAS,KAAK,CAAC,IAAI;IAClB,IAAI,IAAI,GAAG,EAAE,CAAA;IACb,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,CAAC,EAAE,OAAO,EAAE,IAAI;QAC9C,IAAI,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;QAChC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;QAGxB,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YACnC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA;YAC9C,IAAI,GAAG,GAAG,CAAA;YACV,OAAO,GAAG,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;SACpC;QAED,OAAO,IAAI,EAAE;YACZ,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;gBACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACtB;YACD,IAAI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;YACtE,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;SACzD;IACF,CAAC,CAAC,CAAA;IACF,OAAO,IAAI,CAAA;AACZ,CAAC;AAED,IAAI,MAAM,GAAG,mCAAmC,CAAA;AAEhD,SAAS,WAAW,CAAC,IAAI;IACxB,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IAChC,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;AAC1C,CAAC","sourcesContent":["\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n"]}]}