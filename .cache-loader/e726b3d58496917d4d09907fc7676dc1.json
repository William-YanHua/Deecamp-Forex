{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/util/scale-pool.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/util/scale-pool.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale } from '../../util/scale';\nvar ScalePool = (function () {\n    function ScalePool() {\n        this.scales = new Map();\n        this.syncScales = new Map();\n    }\n    ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n        var finalScaleDef = scaleDef;\n        var cacheScaleMeta = this.getScaleMeta(key);\n        if (data.length === 0 && cacheScaleMeta) {\n            var cacheScale = cacheScaleMeta.scale;\n            var cacheScaleDef = {\n                type: cacheScale.type,\n            };\n            if (cacheScale.isCategory) {\n                cacheScaleDef.values = cacheScale.values;\n            }\n            finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n        }\n        var scale = createScaleByField(field, data, finalScaleDef);\n        this.cacheScale(scale, scaleDef, key);\n        return scale;\n    };\n    ScalePool.prototype.sync = function () {\n        var _this = this;\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            var min = Number.MAX_SAFE_INTEGER;\n            var max = Number.MIN_SAFE_INTEGER;\n            var values = [];\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n                min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n                each(scale.values, function (v) {\n                    if (!values.includes(v)) {\n                        values.push(v);\n                    }\n                });\n            });\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                if (scale.isContinuous) {\n                    scale.change({\n                        min: min,\n                        max: max,\n                        values: values,\n                    });\n                }\n                else if (scale.isCategory) {\n                    scale.change({\n                        values: values,\n                    });\n                }\n            });\n        });\n    };\n    ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n        var sm = this.getScaleMeta(key);\n        if (sm && sm.scale.type === scale.type) {\n            syncScale(sm.scale, scale);\n            sm.scaleDef = scaleDef;\n        }\n        else {\n            sm = {\n                key: key,\n                scale: scale,\n                scaleDef: scaleDef,\n            };\n            this.scales.set(key, sm);\n        }\n        var syncKey = this.getSyncKey(sm);\n        sm.syncKey = syncKey;\n        this.removeFromSyncScales(key);\n        if (syncKey) {\n            var scaleKeys = this.syncScales.get(syncKey);\n            if (!scaleKeys) {\n                scaleKeys = [];\n                this.syncScales.set(syncKey, scaleKeys);\n            }\n            scaleKeys.push(key);\n        }\n    };\n    ScalePool.prototype.getScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (!scaleMeta) {\n            var field = last(key.split('-'));\n            var scaleKeys = this.syncScales.get(field);\n            if (scaleKeys && scaleKeys.length) {\n                scaleMeta = this.getScaleMeta(scaleKeys[0]);\n            }\n        }\n        return scaleMeta && scaleMeta.scale;\n    };\n    ScalePool.prototype.deleteScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (scaleMeta) {\n            var syncKey = scaleMeta.syncKey;\n            var scaleKeys = this.syncScales.get(syncKey);\n            if (scaleKeys && scaleKeys.length) {\n                var idx = scaleKeys.indexOf(key);\n                if (idx !== -1) {\n                    scaleKeys.splice(idx, 1);\n                }\n            }\n        }\n        this.scales.delete(key);\n    };\n    ScalePool.prototype.clear = function () {\n        this.scales.clear();\n        this.syncScales.clear();\n    };\n    ScalePool.prototype.removeFromSyncScales = function (key) {\n        var _this = this;\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            var idx = scaleKeys.indexOf(key);\n            if (idx !== -1) {\n                scaleKeys.splice(idx, 1);\n                if (scaleKeys.length === 0) {\n                    _this.syncScales.delete(syncKey);\n                }\n                return false;\n            }\n        });\n    };\n    ScalePool.prototype.getSyncKey = function (sm) {\n        var scale = sm.scale, scaleDef = sm.scaleDef;\n        var field = scale.field;\n        var sync = get(scaleDef, ['sync']);\n        return sync === true ? field : sync === false ? undefined : sync;\n    };\n    ScalePool.prototype.getScaleMeta = function (key) {\n        return this.scales.get(key);\n    };\n    return ScalePool;\n}());\nexport { ScalePool };\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/util/scale-pool.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/util/scale-pool.js"],"names":[],"mappings":"AAGA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAEjE,IAAI,SAAS,GAAiB,CAAC;IAC3B,SAAS,SAAS;QAEd,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;QAExB,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IAChC,CAAC;IAQD,SAAS,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;QAClE,IAAI,aAAa,GAAG,QAAQ,CAAC;QAC7B,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,cAAc,EAAE;YAErC,IAAI,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC;YACtC,IAAI,aAAa,GAAG;gBAChB,IAAI,EAAE,UAAU,CAAC,IAAI;aACxB,CAAC;YACF,IAAI,UAAU,CAAC,UAAU,EAAE;gBAEvB,aAAa,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;aAC5C;YACD,aAAa,GAAG,OAAO,CAAC,aAAa,EAAE,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAC7E;QACD,IAAI,KAAK,GAAG,kBAAkB,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QAE3D,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QACtC,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IAIF,SAAS,CAAC,SAAS,CAAC,IAAI,GAAG;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,SAAS,EAAE,OAAO;YAEhD,IAAI,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC;YAClC,IAAI,GAAG,GAAG,MAAM,CAAC,gBAAgB,CAAC;YAClC,IAAI,MAAM,GAAG,EAAE,CAAC;YAEhB,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG;gBACzB,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChC,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC3D,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBAE3D,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC;oBAC1B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;wBACrB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAClB;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,SAAS,EAAE,UAAU,GAAG;gBACzB,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAChC,IAAI,KAAK,CAAC,YAAY,EAAE;oBACpB,KAAK,CAAC,MAAM,CAAC;wBACT,GAAG,EAAE,GAAG;wBACR,GAAG,EAAE,GAAG;wBACR,MAAM,EAAE,MAAM;qBACjB,CAAC,CAAC;iBACN;qBACI,IAAI,KAAK,CAAC,UAAU,EAAE;oBACvB,KAAK,CAAC,MAAM,CAAC;wBACT,MAAM,EAAE,MAAM;qBACjB,CAAC,CAAC;iBACN;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAOF,SAAS,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE3D,IAAI,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QAEhC,IAAI,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YACpC,SAAS,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3B,EAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAE1B;aACI;YACD,EAAE,GAAG;gBACD,GAAG,EAAE,GAAG;gBACR,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,QAAQ;aACrB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;SAC5B;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QAClC,EAAE,CAAC,OAAO,GAAG,OAAO,CAAC;QAErB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAE/B,IAAI,OAAO,EAAE;YAET,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7C,IAAI,CAAC,SAAS,EAAE;gBACZ,SAAS,GAAG,EAAE,CAAC;gBACf,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;aAC3C;YACD,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACvB;IACL,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,GAAG;QACxC,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,EAAE;YACZ,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;YACjC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;gBAC/B,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/C;SACJ;QACD,OAAO,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC;IACxC,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,WAAW,GAAG,UAAU,GAAG;QAC3C,IAAI,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,SAAS,EAAE;YACX,IAAI,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;YAChC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAE7C,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,EAAE;gBAC/B,IAAI,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACjC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;oBACZ,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBAC5B;aACJ;SACJ;QAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC,CAAC;IAIF,SAAS,CAAC,SAAS,CAAC,KAAK,GAAG;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAC5B,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,oBAAoB,GAAG,UAAU,GAAG;QACpD,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,SAAS,EAAE,OAAO;YAChD,IAAI,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;gBACZ,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAEzB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBACpC;gBACD,OAAO,KAAK,CAAC;aAChB;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,EAAE;QACzC,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,EAAE,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;QAC7C,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QACxB,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAEnC,OAAO,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;IACrE,CAAC,CAAC;IAKF,SAAS,CAAC,SAAS,CAAC,YAAY,GAAG,UAAU,GAAG;QAC5C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC;IACF,OAAO,SAAS,CAAC;AACrB,CAAC,EAAE,CAAC,CAAC;AACL,OAAO,EAAE,SAAS,EAAE,CAAC","sourcesContent":["/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */ (function () {\n    function ScalePool() {\n        /** 所有的 scales */\n        this.scales = new Map();\n        /** 需要同步的 scale 分组， key: scaleKeyArray */\n        this.syncScales = new Map();\n    }\n    /**\n     * 创建 scale\n     * @param field\n     * @param data\n     * @param scaleDef\n     * @param key\n     */\n    ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n        var finalScaleDef = scaleDef;\n        var cacheScaleMeta = this.getScaleMeta(key);\n        if (data.length === 0 && cacheScaleMeta) {\n            // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n            var cacheScale = cacheScaleMeta.scale;\n            var cacheScaleDef = {\n                type: cacheScale.type,\n            };\n            if (cacheScale.isCategory) {\n                // 如果是分类类型，保持 values\n                cacheScaleDef.values = cacheScale.values;\n            }\n            finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n        }\n        var scale = createScaleByField(field, data, finalScaleDef);\n        // 缓存起来\n        this.cacheScale(scale, scaleDef, key);\n        return scale;\n    };\n    /**\n     * 同步 scale\n     */\n    ScalePool.prototype.sync = function () {\n        var _this = this;\n        // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            // min, max, values\n            var min = Number.MAX_SAFE_INTEGER;\n            var max = Number.MIN_SAFE_INTEGER;\n            var values = [];\n            // 1. 遍历求得最大最小值，values 等\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n                min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n                // 去重\n                each(scale.values, function (v) {\n                    if (!values.includes(v)) {\n                        values.push(v);\n                    }\n                });\n            });\n            // 2. 同步\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                if (scale.isContinuous) {\n                    scale.change({\n                        min: min,\n                        max: max,\n                        values: values,\n                    });\n                }\n                else if (scale.isCategory) {\n                    scale.change({\n                        values: values,\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * 缓存一个 scale\n     * @param scale\n     * @param scaleDef\n     * @param key\n     */\n    ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n        // 1. 缓存到 scales\n        var sm = this.getScaleMeta(key);\n        // 存在则更新，同时检测类型是否一致\n        if (sm && sm.scale.type === scale.type) {\n            syncScale(sm.scale, scale);\n            sm.scaleDef = scaleDef;\n            // 更新 scaleDef\n        }\n        else {\n            sm = {\n                key: key,\n                scale: scale,\n                scaleDef: scaleDef,\n            };\n            this.scales.set(key, sm);\n        }\n        // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n        var syncKey = this.getSyncKey(sm);\n        sm.syncKey = syncKey; // 设置 sync 同步的 key\n        // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n        this.removeFromSyncScales(key);\n        // 存在 sync 标记才进行 sync\n        if (syncKey) {\n            // 不存在这个 syncKey，则创建一个空数组\n            var scaleKeys = this.syncScales.get(syncKey);\n            if (!scaleKeys) {\n                scaleKeys = [];\n                this.syncScales.set(syncKey, scaleKeys);\n            }\n            scaleKeys.push(key);\n        }\n    };\n    /**\n     * 通过 key 获取 scale\n     * @param key\n     */\n    ScalePool.prototype.getScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (!scaleMeta) {\n            var field = last(key.split('-'));\n            var scaleKeys = this.syncScales.get(field);\n            if (scaleKeys && scaleKeys.length) {\n                scaleMeta = this.getScaleMeta(scaleKeys[0]);\n            }\n        }\n        return scaleMeta && scaleMeta.scale;\n    };\n    /**\n     * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n     * @param key\n     */\n    ScalePool.prototype.deleteScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (scaleMeta) {\n            var syncKey = scaleMeta.syncKey;\n            var scaleKeys = this.syncScales.get(syncKey);\n            // 移除同步的关系\n            if (scaleKeys && scaleKeys.length) {\n                var idx = scaleKeys.indexOf(key);\n                if (idx !== -1) {\n                    scaleKeys.splice(idx, 1);\n                }\n            }\n        }\n        // 删除 scale 实例\n        this.scales.delete(key);\n    };\n    /**\n     * 清空\n     */\n    ScalePool.prototype.clear = function () {\n        this.scales.clear();\n        this.syncScales.clear();\n    };\n    /**\n     * 删除 sync scale 引用\n     * @param key\n     */\n    ScalePool.prototype.removeFromSyncScales = function (key) {\n        var _this = this;\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            var idx = scaleKeys.indexOf(key);\n            if (idx !== -1) {\n                scaleKeys.splice(idx, 1);\n                // 删除空数组值\n                if (scaleKeys.length === 0) {\n                    _this.syncScales.delete(syncKey);\n                }\n                return false; // 跳出循环\n            }\n        });\n    };\n    /**\n     * get sync key\n     * @param sm\n     */\n    ScalePool.prototype.getSyncKey = function (sm) {\n        var scale = sm.scale, scaleDef = sm.scaleDef;\n        var field = scale.field;\n        var sync = get(scaleDef, ['sync']);\n        // 如果 sync = true，则直接使用字段名作为 syncKey\n        return sync === true ? field : sync === false ? undefined : sync;\n    };\n    /**\n     * 通过 key 获取 scale\n     * @param key\n     */\n    ScalePool.prototype.getScaleMeta = function (key) {\n        return this.scales.get(key);\n    };\n    return ScalePool;\n}());\nexport { ScalePool };\n//# sourceMappingURL=scale-pool.js.map"]}]}