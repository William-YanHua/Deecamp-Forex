{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\prim.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\prim.js","mtime":1513986947000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var _ = require(\"../lodash\"), Graph = require(\"../graph\"), PriorityQueue = require(\"../data/priority-queue\");\r\nmodule.exports = prim;\r\nfunction prim(g, weightFunc) {\r\n    var result = new Graph(), parents = {}, pq = new PriorityQueue(), v;\r\n    function updateNeighbors(edge) {\r\n        var w = edge.v === v ? edge.w : edge.v, pri = pq.priority(w);\r\n        if (pri !== undefined) {\r\n            var edgeWeight = weightFunc(edge);\r\n            if (edgeWeight < pri) {\r\n                parents[w] = v;\r\n                pq.decrease(w, edgeWeight);\r\n            }\r\n        }\r\n    }\r\n    if (g.nodeCount() === 0) {\r\n        return result;\r\n    }\r\n    _.each(g.nodes(), function (v) {\r\n        pq.add(v, Number.POSITIVE_INFINITY);\r\n        result.setNode(v);\r\n    });\r\n    pq.decrease(g.nodes()[0], 0);\r\n    var init = false;\r\n    while (pq.size() > 0) {\r\n        v = pq.removeMin();\r\n        if (_.has(parents, v)) {\r\n            result.setEdge(v, parents[v]);\r\n        }\r\n        else if (init) {\r\n            throw new Error(\"Input graph is not connected: \" + g);\r\n        }\r\n        else {\r\n            init = true;\r\n        }\r\n        g.nodeEdges(v).forEach(updateNeighbors);\r\n    }\r\n    return result;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\prim.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\alg\\prim.js"],"names":[],"mappings":"AAAA,IAAI,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,EACxB,KAAK,GAAG,OAAO,CAAC,UAAU,CAAC,EAC3B,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAEtD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAEtB,SAAS,IAAI,CAAC,CAAC,EAAE,UAAU;IACzB,IAAI,MAAM,GAAG,IAAI,KAAK,EAAE,EACpB,OAAO,GAAG,EAAE,EACZ,EAAE,GAAG,IAAI,aAAa,EAAE,EACxB,CAAC,CAAC;IAEN,SAAS,eAAe,CAAC,IAAI;QAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAClC,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACzB,IAAI,GAAG,KAAK,SAAS,EAAE;YACrB,IAAI,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,UAAU,GAAG,GAAG,EAAE;gBACpB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACf,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAED,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;QACvB,OAAO,MAAM,CAAC;KACf;IAED,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAS,CAAC;QAC1B,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACpC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;IAGH,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE7B,IAAI,IAAI,GAAG,KAAK,CAAC;IACjB,OAAO,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;QACpB,CAAC,GAAG,EAAE,CAAC,SAAS,EAAE,CAAC;QACnB,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE;YACrB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/B;aAAM,IAAI,IAAI,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,GAAG,CAAC,CAAC,CAAC;SACvD;aAAM;YACL,IAAI,GAAG,IAAI,CAAC;SACb;QAED,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;KACzC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["var _ = require(\"../lodash\"),\n    Graph = require(\"../graph\"),\n    PriorityQueue = require(\"../data/priority-queue\");\n\nmodule.exports = prim;\n\nfunction prim(g, weightFunc) {\n  var result = new Graph(),\n      parents = {},\n      pq = new PriorityQueue(),\n      v;\n\n  function updateNeighbors(edge) {\n    var w = edge.v === v ? edge.w : edge.v,\n        pri = pq.priority(w);\n    if (pri !== undefined) {\n      var edgeWeight = weightFunc(edge);\n      if (edgeWeight < pri) {\n        parents[w] = v;\n        pq.decrease(w, edgeWeight);\n      }\n    }\n  }\n\n  if (g.nodeCount() === 0) {\n    return result;\n  }\n\n  _.each(g.nodes(), function(v) {\n    pq.add(v, Number.POSITIVE_INFINITY);\n    result.setNode(v);\n  });\n\n  // Start from an arbitrary node\n  pq.decrease(g.nodes()[0], 0);\n\n  var init = false;\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    if (_.has(parents, v)) {\n      result.setEdge(v, parents[v]);\n    } else if (init) {\n      throw new Error(\"Input graph is not connected: \" + g);\n    } else {\n      init = true;\n    }\n\n    g.nodeEdges(v).forEach(updateNeighbors);\n  }\n\n  return result;\n}\n"]}]}