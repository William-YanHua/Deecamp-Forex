{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\history\\es\\createTransitionManager.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\history\\es\\createTransitionManager.js","mtime":1503477301000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import warning from 'warning';\r\nvar createTransitionManager = function createTransitionManager() {\r\n    var prompt = null;\r\n    var setPrompt = function setPrompt(nextPrompt) {\r\n        warning(prompt == null, 'A history supports only one prompt at a time');\r\n        prompt = nextPrompt;\r\n        return function () {\r\n            if (prompt === nextPrompt)\r\n                prompt = null;\r\n        };\r\n    };\r\n    var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {\r\n        if (prompt != null) {\r\n            var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\r\n            if (typeof result === 'string') {\r\n                if (typeof getUserConfirmation === 'function') {\r\n                    getUserConfirmation(result, callback);\r\n                }\r\n                else {\r\n                    warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\r\n                    callback(true);\r\n                }\r\n            }\r\n            else {\r\n                callback(result !== false);\r\n            }\r\n        }\r\n        else {\r\n            callback(true);\r\n        }\r\n    };\r\n    var listeners = [];\r\n    var appendListener = function appendListener(fn) {\r\n        var isActive = true;\r\n        var listener = function listener() {\r\n            if (isActive)\r\n                fn.apply(undefined, arguments);\r\n        };\r\n        listeners.push(listener);\r\n        return function () {\r\n            isActive = false;\r\n            listeners = listeners.filter(function (item) {\r\n                return item !== listener;\r\n            });\r\n        };\r\n    };\r\n    var notifyListeners = function notifyListeners() {\r\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n            args[_key] = arguments[_key];\r\n        }\r\n        listeners.forEach(function (listener) {\r\n            return listener.apply(undefined, args);\r\n        });\r\n    };\r\n    return {\r\n        setPrompt: setPrompt,\r\n        confirmTransitionTo: confirmTransitionTo,\r\n        appendListener: appendListener,\r\n        notifyListeners: notifyListeners\r\n    };\r\n};\r\nexport default createTransitionManager;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\history\\es\\createTransitionManager.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\history\\es\\createTransitionManager.js"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,SAAS,CAAC;AAE9B,IAAI,uBAAuB,GAAG,SAAS,uBAAuB;IAC5D,IAAI,MAAM,GAAG,IAAI,CAAC;IAElB,IAAI,SAAS,GAAG,SAAS,SAAS,CAAC,UAAU;QAC3C,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE,8CAA8C,CAAC,CAAC;QAExE,MAAM,GAAG,UAAU,CAAC;QAEpB,OAAO;YACL,IAAI,MAAM,KAAK,UAAU;gBAAE,MAAM,GAAG,IAAI,CAAC;QAC3C,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,mBAAmB,GAAG,SAAS,mBAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE,mBAAmB,EAAE,QAAQ;QAIpG,IAAI,MAAM,IAAI,IAAI,EAAE;YAClB,IAAI,MAAM,GAAG,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;YAE9E,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAC9B,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;oBAC7C,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;iBACvC;qBAAM;oBACL,OAAO,CAAC,KAAK,EAAE,iFAAiF,CAAC,CAAC;oBAElG,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAChB;aACF;iBAAM;gBAEL,QAAQ,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC;aAC5B;SACF;aAAM;YACL,QAAQ,CAAC,IAAI,CAAC,CAAC;SAChB;IACH,CAAC,CAAC;IAEF,IAAI,SAAS,GAAG,EAAE,CAAC;IAEnB,IAAI,cAAc,GAAG,SAAS,cAAc,CAAC,EAAE;QAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC;QAEpB,IAAI,QAAQ,GAAG,SAAS,QAAQ;YAC9B,IAAI,QAAQ;gBAAE,EAAE,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEzB,OAAO;YACL,QAAQ,GAAG,KAAK,CAAC;YACjB,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,IAAI;gBACzC,OAAO,IAAI,KAAK,QAAQ,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,IAAI,eAAe,GAAG,SAAS,eAAe;QAC5C,KAAK,IAAI,IAAI,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE;YACnF,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;SAC9B;QAED,SAAS,CAAC,OAAO,CAAC,UAAU,QAAQ;YAClC,OAAO,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,SAAS,EAAE,SAAS;QACpB,mBAAmB,EAAE,mBAAmB;QACxC,cAAc,EAAE,cAAc;QAC9B,eAAe,EAAE,eAAe;KACjC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,uBAAuB,CAAC","sourcesContent":["import warning from 'warning';\n\nvar createTransitionManager = function createTransitionManager() {\n  var prompt = null;\n\n  var setPrompt = function setPrompt(nextPrompt) {\n    warning(prompt == null, 'A history supports only one prompt at a time');\n\n    prompt = nextPrompt;\n\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  };\n\n  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\n\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  };\n\n  var listeners = [];\n\n  var appendListener = function appendListener(fn) {\n    var isActive = true;\n\n    var listener = function listener() {\n      if (isActive) fn.apply(undefined, arguments);\n    };\n\n    listeners.push(listener);\n\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  };\n\n  var notifyListeners = function notifyListeners() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(undefined, args);\n    });\n  };\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n};\n\nexport default createTransitionManager;"]}]}