{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\geojson.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\geojson.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var getPointAtLength = require('point-at-length');\r\nvar cloneDeep = require('@antv/util/lib/clone');\r\nvar geoPath = require('d3-geo').geoPath;\r\nvar _a = require('../data-set'), GEO = _a.GEO, registerConnector = _a.registerConnector;\r\nvar geoPathGenerator = geoPath();\r\nfunction GeoJSONConnector(data, options, dataView) {\r\n    dataView.dataType = GEO;\r\n    var features = cloneDeep(data.features);\r\n    features.forEach(function (feature) {\r\n        feature.name = feature.properties.name;\r\n        feature.longitude = [];\r\n        feature.latitude = [];\r\n        var pathData = feature.pathData = geoPathGenerator(feature);\r\n        var points = getPointAtLength(pathData);\r\n        points._path.forEach(function (point) {\r\n            feature.longitude.push(point[1]);\r\n            feature.latitude.push(point[2]);\r\n        });\r\n        var centroid = geoPathGenerator.centroid(feature);\r\n        feature.centroidX = centroid[0];\r\n        feature.centroidY = centroid[1];\r\n    });\r\n    return features;\r\n}\r\nregisterConnector('geo', GeoJSONConnector);\r\nregisterConnector('geojson', GeoJSONConnector);\r\nregisterConnector('GeoJSON', GeoJSONConnector);\r\nmodule.exports = GeoJSONConnector;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\geojson.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\connector\\geojson.js"],"names":[],"mappings":"AAAA,IAAM,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACpD,IAAM,SAAS,GAAG,OAAO,CAAC,sBAAsB,CAAC,CAAC;AAEhD,IAAA,mCAAO,CACa;AAChB,IAAA,2BAGoB,EAFxB,YAAG,EACH,wCACwB,CAAC;AAE3B,IAAM,gBAAgB,GAAG,OAAO,EAAE,CAAC;AAEnC,SAAS,gBAAgB,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ;IAC/C,QAAQ,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAG1C,QAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;QACtB,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;QACvC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC;QACvB,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;QACtB,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAC9D,IAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;QAC1C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,KAAK;YACxB,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,IAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpD,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAChC,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAGH,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,iBAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;AAC3C,iBAAiB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAC/C,iBAAiB,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AAE/C,MAAM,CAAC,OAAO,GAAG,gBAAgB,CAAC","sourcesContent":["const getPointAtLength = require('point-at-length');\nconst cloneDeep = require('@antv/util/lib/clone');\nconst {\n  geoPath\n} = require('d3-geo');\nconst {\n  GEO,\n  registerConnector\n} = require('../data-set');\n\nconst geoPathGenerator = geoPath();\n\nfunction GeoJSONConnector(data, options, dataView) {\n  dataView.dataType = GEO;\n  const features = cloneDeep(data.features);\n\n  // pre-process\n  features.forEach(feature => {\n    feature.name = feature.properties.name;\n    feature.longitude = [];\n    feature.latitude = [];\n    const pathData = feature.pathData = geoPathGenerator(feature);\n    const points = getPointAtLength(pathData);\n    points._path.forEach(point => {\n      feature.longitude.push(point[1]);\n      feature.latitude.push(point[2]);\n    });\n    const centroid = geoPathGenerator.centroid(feature);\n    feature.centroidX = centroid[0];\n    feature.centroidY = centroid[1];\n  });\n\n  // dataView.origin = features;\n  return features;\n}\n\nregisterConnector('geo', GeoJSONConnector);\nregisterConnector('geojson', GeoJSONConnector);\nregisterConnector('GeoJSON', GeoJSONConnector);\n\nmodule.exports = GeoJSONConnector;\n"]}]}