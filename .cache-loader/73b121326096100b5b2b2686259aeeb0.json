{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\density\\layer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\density\\layer.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { getScale } from '@antv/scale';\r\nimport { clone, deepMix, sortBy, valuesOfKey, getRange, each } from '@antv/util';\r\nimport { registerPlotType } from '../../base/global';\r\nimport { sturges } from '../../util/math';\r\nimport Area from '../area/layer';\r\nvar kernels = {\r\n    epanechnikov: function (dist) {\r\n        return Math.abs(dist) <= 1 ? 0.75 * (1 - dist * dist) : 0;\r\n    },\r\n    gaussian: function (dist) {\r\n        return (1 / Math.sqrt(Math.PI * 2)) * Math.exp(-0.5 * Math.pow(dist, 2));\r\n    },\r\n    uniform: function (dist) {\r\n        return Math.abs(dist) <= 1 ? 0.5 : 0;\r\n    },\r\n    triangle: function (dist) {\r\n        return Math.abs(dist) <= 1 ? 1 - Math.abs(dist) : 0;\r\n    },\r\n    quartic: function (dist) {\r\n        var v = 1 - dist * dist;\r\n        return Math.abs(dist) <= 1 ? (15 / 16) * v * v : 0;\r\n    },\r\n    triweight: function (dist) {\r\n        var v = 1 - dist * dist;\r\n        return Math.abs(dist) <= 1 ? (15 / 16) * Math.pow(v, 3) : 0;\r\n    },\r\n    cosinus: function (dist) {\r\n        var v = (Math.PI / 4) * Math.cos(0.5 * Math.PI * dist);\r\n        return Math.abs(dist) <= 1 ? v : 0;\r\n    },\r\n};\r\nvar DensityLayer = (function (_super) {\r\n    __extends(DensityLayer, _super);\r\n    function DensityLayer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = 'density';\r\n        return _this;\r\n    }\r\n    DensityLayer.prototype.init = function () {\r\n        var originXAxisConfig = this.options.xAxis ? clone(this.options.xAxis) : {};\r\n        this.options.xField = 'value';\r\n        this.options.yField = 'density';\r\n        this.options.xAxis = deepMix({}, originXAxisConfig, { type: 'linear' });\r\n        this.options.smooth = true;\r\n        _super.prototype.init.call(this);\r\n    };\r\n    DensityLayer.prototype.processData = function (originData) {\r\n        var _this = this;\r\n        var _a = this.options, binField = _a.binField, binWidth = _a.binWidth, binNumber = _a.binNumber, kernel = _a.kernel;\r\n        var _kernel = kernel ? kernel : 'epanechnikov';\r\n        var kernelFunc = kernels[_kernel];\r\n        var originDataCopy = clone(originData);\r\n        sortBy(originDataCopy, binField);\r\n        var values = valuesOfKey(originDataCopy, binField);\r\n        var range = getRange(values);\r\n        var rangeWidth = range.max - range.min;\r\n        var _binNumber = binNumber;\r\n        var _binWidth = binWidth;\r\n        if (!binNumber && binWidth) {\r\n            _binNumber = Math.floor(rangeWidth / binWidth);\r\n        }\r\n        if (!binWidth && binNumber) {\r\n            _binWidth = rangeWidth / binNumber;\r\n        }\r\n        if (!binNumber && !binWidth) {\r\n            _binNumber = sturges(values);\r\n            _binWidth = rangeWidth / binNumber;\r\n        }\r\n        var LinearScale = getScale('linear');\r\n        var scale = new LinearScale({\r\n            min: range.min,\r\n            max: range.max,\r\n            tickCount: _binNumber,\r\n            nice: false,\r\n        });\r\n        var samples = scale.getTicks();\r\n        var densities = [];\r\n        each(samples, function (s) {\r\n            var density = _this.kernelDensityEstimator(_binWidth, kernelFunc, s, values);\r\n            densities.push({ value: s.text, density: density });\r\n        });\r\n        return densities;\r\n    };\r\n    DensityLayer.prototype.kernelDensityEstimator = function (binWidth, kernelFunc, x, values) {\r\n        var sum = 0;\r\n        each(values, function (v) {\r\n            var dist = (x.tickValue - v) / binWidth;\r\n            sum += kernelFunc(dist);\r\n        });\r\n        return values.length === 0 ? 0 : sum / values.length;\r\n    };\r\n    return DensityLayer;\r\n}(Area));\r\nexport default DensityLayer;\r\nregisterPlotType('density', DensityLayer);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\density\\layer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\density\\layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { getScale } from '@antv/scale';\nimport { clone, deepMix, sortBy, valuesOfKey, getRange, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { sturges } from '../../util/math';\nimport Area from '../area/layer';\nvar kernels = {\n    epanechnikov: function (dist) {\n        return Math.abs(dist) <= 1 ? 0.75 * (1 - dist * dist) : 0;\n    },\n    gaussian: function (dist) {\n        return (1 / Math.sqrt(Math.PI * 2)) * Math.exp(-0.5 * Math.pow(dist, 2));\n    },\n    uniform: function (dist) {\n        return Math.abs(dist) <= 1 ? 0.5 : 0;\n    },\n    triangle: function (dist) {\n        return Math.abs(dist) <= 1 ? 1 - Math.abs(dist) : 0;\n    },\n    quartic: function (dist) {\n        var v = 1 - dist * dist;\n        return Math.abs(dist) <= 1 ? (15 / 16) * v * v : 0;\n    },\n    triweight: function (dist) {\n        var v = 1 - dist * dist;\n        return Math.abs(dist) <= 1 ? (15 / 16) * Math.pow(v, 3) : 0;\n    },\n    cosinus: function (dist) {\n        var v = (Math.PI / 4) * Math.cos(0.5 * Math.PI * dist);\n        return Math.abs(dist) <= 1 ? v : 0;\n    },\n};\nvar DensityLayer = /** @class */ (function (_super) {\n    __extends(DensityLayer, _super);\n    function DensityLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'density';\n        return _this;\n    }\n    DensityLayer.prototype.init = function () {\n        var originXAxisConfig = this.options.xAxis ? clone(this.options.xAxis) : {};\n        this.options.xField = 'value';\n        this.options.yField = 'density';\n        this.options.xAxis = deepMix({}, originXAxisConfig, { type: 'linear' });\n        this.options.smooth = true;\n        _super.prototype.init.call(this);\n    };\n    DensityLayer.prototype.processData = function (originData) {\n        var _this = this;\n        var _a = this.options, binField = _a.binField, binWidth = _a.binWidth, binNumber = _a.binNumber, kernel = _a.kernel;\n        var _kernel = kernel ? kernel : 'epanechnikov';\n        var kernelFunc = kernels[_kernel];\n        var originDataCopy = clone(originData);\n        sortBy(originDataCopy, binField);\n        // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n        var values = valuesOfKey(originDataCopy, binField);\n        var range = getRange(values);\n        var rangeWidth = range.max - range.min;\n        var _binNumber = binNumber;\n        var _binWidth = binWidth;\n        if (!binNumber && binWidth) {\n            _binNumber = Math.floor(rangeWidth / binWidth);\n        }\n        if (!binWidth && binNumber) {\n            _binWidth = rangeWidth / binNumber;\n        }\n        // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n        if (!binNumber && !binWidth) {\n            _binNumber = sturges(values);\n            _binWidth = rangeWidth / binNumber;\n        }\n        // 根据binNumber获取samples\n        var LinearScale = getScale('linear');\n        var scale = new LinearScale({\n            min: range.min,\n            max: range.max,\n            tickCount: _binNumber,\n            nice: false,\n        });\n        var samples = scale.getTicks();\n        // 计算KDE\n        var densities = [];\n        each(samples, function (s) {\n            var density = _this.kernelDensityEstimator(_binWidth, kernelFunc, s, values);\n            densities.push({ value: s.text, density: density });\n        });\n        return densities;\n    };\n    DensityLayer.prototype.kernelDensityEstimator = function (binWidth, kernelFunc, x, values) {\n        var sum = 0;\n        each(values, function (v) {\n            var dist = (x.tickValue - v) / binWidth;\n            sum += kernelFunc(dist);\n        });\n        return values.length === 0 ? 0 : sum / values.length;\n    };\n    return DensityLayer;\n}(Area));\nexport default DensityLayer;\nregisterPlotType('density', DensityLayer);\n//# sourceMappingURL=layer.js.map"]}]}