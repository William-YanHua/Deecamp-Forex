{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/controller/axis.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/controller/axis.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isUndefined } from '@antv/util';\nimport { DIRECTION, COMPONENT_TYPE, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, LineAxis, LineGrid } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { getAxisDirection, getAxisFactorByRegion, getAxisRegion, getAxisThemeCfg, getAxisTitleText, getCircleAxisCenterRadius, isVertical, } from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base';\nvar OMIT_CFG = ['container'];\nvar AXIS_DEFAULT_ANIMATE_CFG = __assign(__assign({}, DEFAULT_ANIMATE_CFG), { appear: null });\nvar Axis = (function (_super) {\n    __extends(Axis, _super);\n    function Axis(view) {\n        var _this = _super.call(this, view) || this;\n        _this.cache = new Map();\n        _this.gridContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        _this.axisContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        return _this;\n    }\n    Object.defineProperty(Axis.prototype, \"name\", {\n        get: function () {\n            return 'axis';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Axis.prototype.init = function () { };\n    Axis.prototype.render = function () {\n        this.option = this.view.getOptions().axes;\n        this.createXAxes();\n        this.createYAxes();\n    };\n    Axis.prototype.layout = function () {\n        var _this = this;\n        var coordinate = this.view.getCoordinate();\n        each(this.getComponents(), function (co) {\n            var component = co.component, direction = co.direction, type = co.type, extra = co.extra;\n            var dim = extra.dim, scale = extra.scale, alignTick = extra.alignTick;\n            var updated;\n            if (type === COMPONENT_TYPE.AXIS) {\n                if (coordinate.isPolar) {\n                    if (dim === 'x') {\n                        updated = coordinate.isTransposed\n                            ? getAxisRegion(coordinate, direction)\n                            : getCircleAxisCenterRadius(coordinate);\n                    }\n                    else if (dim === 'y') {\n                        updated = coordinate.isTransposed\n                            ? getCircleAxisCenterRadius(coordinate)\n                            : getAxisRegion(coordinate, direction);\n                    }\n                }\n                else {\n                    updated = getAxisRegion(coordinate, direction);\n                }\n            }\n            else if (type === COMPONENT_TYPE.GRID) {\n                if (coordinate.isPolar) {\n                    var items = void 0;\n                    if (coordinate.isTransposed) {\n                        items =\n                            dim === 'x'\n                                ? getCircleGridItems(coordinate, _this.view.getYScales()[0], scale, alignTick, dim)\n                                : getLineGridItems(coordinate, scale, dim, alignTick);\n                    }\n                    else {\n                        items =\n                            dim === 'x'\n                                ? getLineGridItems(coordinate, scale, dim, alignTick)\n                                : getCircleGridItems(coordinate, _this.view.getXScale(), scale, alignTick, dim);\n                    }\n                    updated = {\n                        items: items,\n                        center: _this.view.getCoordinate().getCenter(),\n                    };\n                }\n                else {\n                    updated = { items: getLineGridItems(coordinate, scale, dim, alignTick) };\n                }\n            }\n            component.update(updated);\n        });\n    };\n    Axis.prototype.update = function () {\n        this.option = this.view.getOptions().axes;\n        var updatedCache = new Map();\n        this.updateXAxes(updatedCache);\n        this.updateYAxes(updatedCache);\n        var newCache = new Map();\n        this.cache.forEach(function (co, key) {\n            if (updatedCache.has(key)) {\n                newCache.set(key, co);\n            }\n            else {\n                co.component.destroy();\n            }\n        });\n        this.cache = newCache;\n    };\n    Axis.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.cache.clear();\n        this.gridContainer.clear();\n        this.axisContainer.clear();\n    };\n    Axis.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.gridContainer.remove(true);\n        this.axisContainer.remove(true);\n    };\n    Axis.prototype.getComponents = function () {\n        var co = [];\n        this.cache.forEach(function (value) {\n            co.push(value);\n        });\n        return co;\n    };\n    Axis.prototype.updateXAxes = function (updatedCache) {\n        var scale = this.view.getXScale();\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var field = scale.field;\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption === false) {\n            return;\n        }\n        var coordinate = this.view.getCoordinate();\n        var axisId = this.getId('axis', field);\n        var gridId = this.getId('grid', field);\n        var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n        var layer = LAYER.BG;\n        var dim = 'x';\n        if (coordinate.isRect) {\n            var axis = this.cache.get(axisId);\n            if (axis) {\n                var cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            var grid = this.cache.get(gridId);\n            if (grid) {\n                var cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else if (coordinate.isPolar) {\n            var axis = this.cache.get(axisId);\n            if (axis) {\n                var cfg = coordinate.isTransposed\n                    ? this.getLineAxisCfg(scale, xAxisOption, DIRECTION.RADIUS)\n                    : this.getCircleAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        return;\n                    }\n                    else {\n                        axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                }\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            var grid = this.cache.get(gridId);\n            if (grid) {\n                var cfg = coordinate.isTransposed\n                    ? this.getCircleGridCfg(scale, xAxisOption, DIRECTION.RADIUS, dim)\n                    : this.getLineGridCfg(scale, xAxisOption, DIRECTION.CIRCLE, dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        return;\n                    }\n                    else {\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n                }\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else {\n        }\n    };\n    Axis.prototype.updateYAxes = function (updatedCache) {\n        var _this = this;\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    var axis = _this.cache.get(axisId);\n                    if (axis) {\n                        var cfg = _this.getLineAxisCfg(scale, yAxisOption, direction);\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    var grid = _this.cache.get(gridId);\n                    if (grid) {\n                        var cfg = _this.getLineGridCfg(scale, yAxisOption, direction, dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    var axis = _this.cache.get(axisId);\n                    if (axis) {\n                        var cfg = coordinate.isTransposed\n                            ? _this.getCircleAxisCfg(scale, yAxisOption, DIRECTION.CIRCLE)\n                            : _this.getLineAxisCfg(scale, yAxisOption, DIRECTION.RADIUS);\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                axis = _this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            }\n                        }\n                        else {\n                            axis = _this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        }\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    var grid = _this.cache.get(gridId);\n                    if (grid) {\n                        var cfg = coordinate.isTransposed\n                            ? _this.getLineGridCfg(scale, yAxisOption, DIRECTION.CIRCLE, dim)\n                            : _this.getCircleGridCfg(scale, yAxisOption, DIRECTION.RADIUS, dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                grid = _this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            }\n                        }\n                        else {\n                            grid = _this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        }\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else {\n                }\n            }\n        });\n    };\n    Axis.prototype.createXAxes = function () {\n        var scale = this.view.getXScale();\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption !== false) {\n            var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n            var layer = LAYER.BG;\n            var dim = 'x';\n            var coordinate = this.view.getCoordinate();\n            var axisId = this.getId('axis', scale.field);\n            var gridId = this.getId('grid', scale.field);\n            if (coordinate.isRect) {\n                var axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                var grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else if (coordinate.isPolar) {\n                var axis = void 0;\n                var grid = void 0;\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        return;\n                    }\n                    else {\n                        axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                    grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n                }\n                this.cache.set(axisId, axis);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else {\n            }\n        }\n    };\n    Axis.prototype.createYAxes = function () {\n        var _this = this;\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    var axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                    _this.cache.set(axisId, axis);\n                    var grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    var axis = void 0;\n                    var grid = void 0;\n                    if (coordinate.isTransposed) {\n                        if (isUndefined(yAxisOption)) {\n                            return;\n                        }\n                        else {\n                            axis = _this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            grid = _this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                        }\n                    }\n                    else {\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        grid = _this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                    _this.cache.set(_this.getId('axis', scale.field), axis);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else {\n                }\n            }\n        });\n    };\n    Axis.prototype.createLineAxis = function (scale, option, layer, direction, dim) {\n        var axis = {\n            component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n            layer: layer,\n            direction: direction === DIRECTION.RADIUS ? DIRECTION.NONE : direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createLineGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getLineGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new LineGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    Axis.prototype.createCircleAxis = function (scale, option, layer, direction, dim) {\n        var axis = {\n            component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createCircleGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getCircleGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new CircleGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    Axis.prototype.getLineAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var coordinate = this.view.getCoordinate();\n        var region = getAxisRegion(coordinate, direction);\n        var titleText = getAxisTitleText(scale, axisOption);\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction);\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({ title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix(__assign(__assign({ container: container }, region), { ticks: scale.getTicks().map(function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); }), verticalFactor: coordinate.isPolar\n                ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1\n                : getAxisFactorByRegion(region, coordinate.getCenter()) }), axisThemeCfg, optionWithTitle);\n        var _a = this.getAnimateCfg(cfg), animate = _a.animate, animateOption = _a.animateOption;\n        cfg.animateOption = animateOption;\n        cfg.animate = animate;\n        var isAxisVertical = isVertical(region);\n        var verticalLimitLength = get(cfg, 'verticalLimitLength', isAxisVertical ? 1 / 3 : 1 / 2);\n        if (verticalLimitLength <= 1) {\n            var canvasWidth = this.view.getCanvas().get('width');\n            var canvasHeight = this.view.getCanvas().get('height');\n            cfg.verticalLimitLength = verticalLimitLength * (isAxisVertical ? canvasWidth : canvasHeight);\n        }\n        return cfg;\n    };\n    Axis.prototype.getLineGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction);\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n        }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n        gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n        return gridCfg;\n    };\n    Axis.prototype.getCircleAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var coordinate = this.view.getCoordinate();\n        var ticks = scale.getTicks().map(function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); });\n        if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n            ticks.pop();\n        }\n        var titleText = getAxisTitleText(scale, axisOption);\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), DIRECTION.CIRCLE);\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({ title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix(__assign(__assign({ container: container }, getCircleAxisCenterRadius(this.view.getCoordinate())), { ticks: ticks, verticalFactor: 1 }), axisThemeCfg, optionWithTitle);\n        var _a = this.getAnimateCfg(cfg), animate = _a.animate, animateOption = _a.animateOption;\n        cfg.animate = animate;\n        cfg.animateOption = animateOption;\n        return cfg;\n    };\n    Axis.prototype.getCircleGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), DIRECTION.RADIUS);\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n            center: this.view.getCoordinate().getCenter(),\n        }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n        var alignTick = get(gridCfg, 'alignTick', true);\n        var verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n        gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim);\n        return gridCfg;\n    };\n    Axis.prototype.getId = function (name, key) {\n        var coordinate = this.view.getCoordinate();\n        return name + \"-\" + key + \"-\" + coordinate.type;\n    };\n    Axis.prototype.getAnimateCfg = function (cfg) {\n        return {\n            animate: this.view.getOptions().animate && get(cfg, 'animate'),\n            animateOption: cfg && cfg.animateOption ? deepMix({}, AXIS_DEFAULT_ANIMATE_CFG, cfg.animateOption) : AXIS_DEFAULT_ANIMATE_CFG,\n        };\n    };\n    return Axis;\n}(Controller));\nexport default Axis;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/controller/axis.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g2plot/node_modules/@antv/g2/esm/chart/controller/axis.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isUndefined } from '@antv/util';\nimport { DIRECTION, COMPONENT_TYPE, LAYER } from '../../constant';\nimport { CircleAxis, CircleGrid, LineAxis, LineGrid } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { getAxisDirection, getAxisFactorByRegion, getAxisRegion, getAxisThemeCfg, getAxisTitleText, getCircleAxisCenterRadius, isVertical, } from '../../util/axis';\nimport { getAxisOption } from '../../util/axis';\nimport { getCircleGridItems, getGridThemeCfg, getLineGridItems, showGrid } from '../../util/grid';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base';\n// update 组件的时候，忽略的数据更新\nvar OMIT_CFG = ['container'];\n// 坐标轴默认动画配置\nvar AXIS_DEFAULT_ANIMATE_CFG = __assign(__assign({}, DEFAULT_ANIMATE_CFG), { appear: null });\n/**\n * @ignore\n * G2 Axis controller, will:\n *  - create component\n *    - axis\n *    - grid\n *  - life circle\n */\nvar Axis = /** @class */ (function (_super) {\n    __extends(Axis, _super);\n    function Axis(view) {\n        var _this = _super.call(this, view) || this;\n        /** 使用 object 存储组件 */\n        _this.cache = new Map();\n        // 先创建 gridContainer，将 grid 放到 axis 底层\n        _this.gridContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        _this.axisContainer = _this.view.getLayer(LAYER.BG).addGroup();\n        return _this;\n    }\n    Object.defineProperty(Axis.prototype, \"name\", {\n        get: function () {\n            return 'axis';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Axis.prototype.init = function () { };\n    Axis.prototype.render = function () {\n        this.option = this.view.getOptions().axes;\n        this.createXAxes();\n        this.createYAxes();\n    };\n    /**\n     * 更新组件布局，位置大小\n     */\n    Axis.prototype.layout = function () {\n        var _this = this;\n        var coordinate = this.view.getCoordinate();\n        each(this.getComponents(), function (co) {\n            var component = co.component, direction = co.direction, type = co.type, extra = co.extra;\n            var dim = extra.dim, scale = extra.scale, alignTick = extra.alignTick;\n            var updated;\n            if (type === COMPONENT_TYPE.AXIS) {\n                if (coordinate.isPolar) {\n                    if (dim === 'x') {\n                        updated = coordinate.isTransposed\n                            ? getAxisRegion(coordinate, direction)\n                            : getCircleAxisCenterRadius(coordinate);\n                    }\n                    else if (dim === 'y') {\n                        updated = coordinate.isTransposed\n                            ? getCircleAxisCenterRadius(coordinate)\n                            : getAxisRegion(coordinate, direction);\n                    }\n                }\n                else {\n                    updated = getAxisRegion(coordinate, direction);\n                }\n            }\n            else if (type === COMPONENT_TYPE.GRID) {\n                if (coordinate.isPolar) {\n                    var items = void 0;\n                    if (coordinate.isTransposed) {\n                        items =\n                            dim === 'x'\n                                ? getCircleGridItems(coordinate, _this.view.getYScales()[0], scale, alignTick, dim)\n                                : getLineGridItems(coordinate, scale, dim, alignTick);\n                    }\n                    else {\n                        items =\n                            dim === 'x'\n                                ? getLineGridItems(coordinate, scale, dim, alignTick)\n                                : getCircleGridItems(coordinate, _this.view.getXScale(), scale, alignTick, dim);\n                    }\n                    updated = {\n                        items: items,\n                        // coordinate 更新之后，center 也变化了\n                        center: _this.view.getCoordinate().getCenter(),\n                    };\n                }\n                else {\n                    updated = { items: getLineGridItems(coordinate, scale, dim, alignTick) };\n                }\n            }\n            component.update(updated);\n        });\n    };\n    /**\n     * 更新 axis 组件\n     */\n    Axis.prototype.update = function () {\n        this.option = this.view.getOptions().axes;\n        var updatedCache = new Map();\n        this.updateXAxes(updatedCache);\n        this.updateYAxes(updatedCache);\n        // 处理完成之后，销毁删除的\n        // 不在处理中的\n        var newCache = new Map();\n        this.cache.forEach(function (co, key) {\n            if (updatedCache.has(key)) {\n                newCache.set(key, co);\n            }\n            else {\n                // 不存在，则是所有需要被销毁的组件\n                co.component.destroy();\n            }\n        });\n        // 更新缓存\n        this.cache = newCache;\n    };\n    Axis.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.cache.clear();\n        this.gridContainer.clear();\n        this.axisContainer.clear();\n    };\n    Axis.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.gridContainer.remove(true);\n        this.axisContainer.remove(true);\n    };\n    /**\n     * @override\n     */\n    Axis.prototype.getComponents = function () {\n        var co = [];\n        this.cache.forEach(function (value) {\n            co.push(value);\n        });\n        return co;\n    };\n    /**\n     * 更新 x axis\n     * @param updatedCache\n     */\n    Axis.prototype.updateXAxes = function (updatedCache) {\n        // x axis\n        var scale = this.view.getXScale();\n        // @ts-ignore\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var field = scale.field;\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption === false) {\n            return;\n        }\n        var coordinate = this.view.getCoordinate();\n        var axisId = this.getId('axis', field);\n        var gridId = this.getId('grid', field);\n        var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n        var layer = LAYER.BG;\n        var dim = 'x';\n        if (coordinate.isRect) {\n            // 1. do axis update\n            var axis = this.cache.get(axisId);\n            // 存在则更新\n            if (axis) {\n                var cfg = this.getLineAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                // 不存在，则创建\n                axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            // 2. do grid update\n            var grid = this.cache.get(gridId);\n            // 存在则更新\n            if (grid) {\n                var cfg = this.getLineGridCfg(scale, xAxisOption, direction, dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                // 不存在则创建\n                grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else if (coordinate.isPolar) {\n            // 1. do axis update\n            var axis = this.cache.get(axisId);\n            // 存在则更新\n            if (axis) {\n                var cfg = coordinate.isTransposed\n                    ? this.getLineAxisCfg(scale, xAxisOption, DIRECTION.RADIUS)\n                    : this.getCircleAxisCfg(scale, xAxisOption, direction);\n                omit(cfg, OMIT_CFG);\n                axis.component.update(cfg);\n                updatedCache.set(axisId, axis);\n            }\n            else {\n                // 不存在，则创建\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        // 默认不渲染转置极坐标下的坐标轴\n                        return;\n                    }\n                    else {\n                        axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                }\n                this.cache.set(axisId, axis);\n                updatedCache.set(axisId, axis);\n            }\n            // 2. do grid update\n            var grid = this.cache.get(gridId);\n            // 存在则更新\n            if (grid) {\n                var cfg = coordinate.isTransposed\n                    ? this.getCircleGridCfg(scale, xAxisOption, DIRECTION.RADIUS, dim)\n                    : this.getLineGridCfg(scale, xAxisOption, DIRECTION.CIRCLE, dim);\n                omit(cfg, OMIT_CFG);\n                grid.component.update(cfg);\n                updatedCache.set(gridId, grid);\n            }\n            else {\n                // 不存在则创建\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        return;\n                    }\n                    else {\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n                }\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                    updatedCache.set(gridId, grid);\n                }\n            }\n        }\n        else {\n            // helix and other, do not draw axis\n        }\n    };\n    Axis.prototype.updateYAxes = function (updatedCache) {\n        var _this = this;\n        // y axes\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            // @ts-ignore\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    // 1. do axis update\n                    var axis = _this.cache.get(axisId);\n                    // 存在则更新\n                    if (axis) {\n                        var cfg = _this.getLineAxisCfg(scale, yAxisOption, direction);\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        // 不存在，则创建\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    // 2. do grid update\n                    var grid = _this.cache.get(gridId);\n                    // 存在则更新\n                    if (grid) {\n                        var cfg = _this.getLineGridCfg(scale, yAxisOption, direction, dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        // 不存在则创建\n                        grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    // 1. do axis update\n                    var axis = _this.cache.get(axisId);\n                    // 存在则更新\n                    if (axis) {\n                        var cfg = coordinate.isTransposed\n                            ? _this.getCircleAxisCfg(scale, yAxisOption, DIRECTION.CIRCLE)\n                            : _this.getLineAxisCfg(scale, yAxisOption, DIRECTION.RADIUS);\n                        // @ts-ignore\n                        omit(cfg, OMIT_CFG);\n                        axis.component.update(cfg);\n                        updatedCache.set(axisId, axis);\n                    }\n                    else {\n                        // 不存在，则创建\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                axis = _this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            }\n                        }\n                        else {\n                            axis = _this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        }\n                        _this.cache.set(axisId, axis);\n                        updatedCache.set(axisId, axis);\n                    }\n                    // 2. do grid update\n                    var grid = _this.cache.get(gridId);\n                    // 存在则更新\n                    if (grid) {\n                        var cfg = coordinate.isTransposed\n                            ? _this.getLineGridCfg(scale, yAxisOption, DIRECTION.CIRCLE, dim)\n                            : _this.getCircleGridCfg(scale, yAxisOption, DIRECTION.RADIUS, dim);\n                        omit(cfg, OMIT_CFG);\n                        grid.component.update(cfg);\n                        updatedCache.set(gridId, grid);\n                    }\n                    else {\n                        // 不存在则创建\n                        if (coordinate.isTransposed) {\n                            if (isUndefined(yAxisOption)) {\n                                return;\n                            }\n                            else {\n                                grid = _this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            }\n                        }\n                        else {\n                            grid = _this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        }\n                        if (grid) {\n                            _this.cache.set(gridId, grid);\n                            updatedCache.set(gridId, grid);\n                        }\n                    }\n                }\n                else {\n                    // helix and other, do not draw axis\n                }\n            }\n        });\n    };\n    /**\n     * 创建 x axis 组件\n     */\n    Axis.prototype.createXAxes = function () {\n        // x axis\n        var scale = this.view.getXScale();\n        if (!scale || scale.isIdentity) {\n            return;\n        }\n        var xAxisOption = getAxisOption(this.option, scale.field);\n        if (xAxisOption !== false) {\n            var direction = getAxisDirection(xAxisOption, DIRECTION.BOTTOM);\n            var layer = LAYER.BG;\n            var dim = 'x';\n            var coordinate = this.view.getCoordinate();\n            var axisId = this.getId('axis', scale.field);\n            var gridId = this.getId('grid', scale.field);\n            if (coordinate.isRect) {\n                // axis\n                var axis = this.createLineAxis(scale, xAxisOption, layer, direction, dim);\n                this.cache.set(axisId, axis);\n                // grid\n                var grid = this.createLineGrid(scale, xAxisOption, layer, direction, dim);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else if (coordinate.isPolar) {\n                var axis = void 0;\n                var grid = void 0;\n                if (coordinate.isTransposed) {\n                    if (isUndefined(xAxisOption)) {\n                        // 默认不渲染转置极坐标的坐标轴\n                        return;\n                    }\n                    else {\n                        // 如果用户打开了隐藏的坐标轴 chart.axis(true)/chart.axis('x', true)\n                        // 那么对于转置了的极坐标，半径轴显示的是 x 轴对应的数据\n                        axis = this.createLineAxis(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                        grid = this.createCircleGrid(scale, xAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                }\n                else {\n                    axis = this.createCircleAxis(scale, xAxisOption, layer, direction, dim);\n                    // grid，极坐标下的 x 轴网格线沿着半径方向绘制\n                    grid = this.createLineGrid(scale, xAxisOption, layer, DIRECTION.CIRCLE, dim);\n                }\n                this.cache.set(axisId, axis);\n                if (grid) {\n                    this.cache.set(gridId, grid);\n                }\n            }\n            else {\n                // helix and other, do not draw axis\n            }\n        }\n    };\n    /**\n     * create y axis\n     */\n    Axis.prototype.createYAxes = function () {\n        var _this = this;\n        // y axes\n        var yScales = this.view.getYScales();\n        each(yScales, function (scale, idx) {\n            // @ts-ignore\n            if (!scale || scale.isIdentity) {\n                return;\n            }\n            var field = scale.field;\n            var yAxisOption = getAxisOption(_this.option, field);\n            if (yAxisOption !== false) {\n                var layer = LAYER.BG;\n                var dim = 'y';\n                var axisId = _this.getId('axis', field);\n                var gridId = _this.getId('grid', field);\n                var coordinate = _this.view.getCoordinate();\n                if (coordinate.isRect) {\n                    var direction = getAxisDirection(yAxisOption, idx === 0 ? DIRECTION.LEFT : DIRECTION.RIGHT);\n                    // axis\n                    var axis = _this.createLineAxis(scale, yAxisOption, layer, direction, dim);\n                    _this.cache.set(axisId, axis);\n                    // grid\n                    var grid = _this.createLineGrid(scale, yAxisOption, layer, direction, dim);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else if (coordinate.isPolar) {\n                    var axis = void 0;\n                    var grid = void 0;\n                    if (coordinate.isTransposed) {\n                        if (isUndefined(yAxisOption)) {\n                            return;\n                        }\n                        else {\n                            axis = _this.createCircleAxis(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                            grid = _this.createLineGrid(scale, yAxisOption, layer, DIRECTION.CIRCLE, dim);\n                        }\n                    }\n                    else {\n                        axis = _this.createLineAxis(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                        grid = _this.createCircleGrid(scale, yAxisOption, layer, DIRECTION.RADIUS, dim);\n                    }\n                    _this.cache.set(_this.getId('axis', scale.field), axis);\n                    if (grid) {\n                        _this.cache.set(gridId, grid);\n                    }\n                }\n                else {\n                    // helix and other, do not draw axis\n                }\n            }\n        });\n    };\n    /**\n     * 创建 line axis\n     * @param scale\n     * @param option\n     * @param layer\n     * @param direction\n     * @param dim\n     */\n    Axis.prototype.createLineAxis = function (scale, option, layer, direction, dim) {\n        // axis\n        var axis = {\n            component: new LineAxis(this.getLineAxisCfg(scale, option, direction)),\n            layer: layer,\n            direction: direction === DIRECTION.RADIUS ? DIRECTION.NONE : direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createLineGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getLineGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new LineGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    Axis.prototype.createCircleAxis = function (scale, option, layer, direction, dim) {\n        var axis = {\n            component: new CircleAxis(this.getCircleAxisCfg(scale, option, direction)),\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.AXIS,\n            extra: { dim: dim, scale: scale },\n        };\n        axis.component.set('field', scale.field);\n        axis.component.init();\n        return axis;\n    };\n    Axis.prototype.createCircleGrid = function (scale, option, layer, direction, dim) {\n        var cfg = this.getCircleGridCfg(scale, option, direction, dim);\n        if (cfg) {\n            var grid = {\n                component: new CircleGrid(cfg),\n                layer: layer,\n                direction: DIRECTION.NONE,\n                type: COMPONENT_TYPE.GRID,\n                extra: {\n                    dim: dim,\n                    scale: scale,\n                    alignTick: get(cfg, 'alignTick', true),\n                },\n            };\n            grid.component.init();\n            return grid;\n        }\n    };\n    /**\n     * generate line axis cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return line axis cfg\n     */\n    Axis.prototype.getLineAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var coordinate = this.view.getCoordinate();\n        var region = getAxisRegion(coordinate, direction);\n        var titleText = getAxisTitleText(scale, axisOption);\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), direction);\n        // the cfg order should be ensure\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({ title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix(__assign(__assign({ container: container }, region), { ticks: scale.getTicks().map(function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); }), verticalFactor: coordinate.isPolar\n                ? getAxisFactorByRegion(region, coordinate.getCenter()) * -1\n                : getAxisFactorByRegion(region, coordinate.getCenter()) }), axisThemeCfg, optionWithTitle);\n        var _a = this.getAnimateCfg(cfg), animate = _a.animate, animateOption = _a.animateOption;\n        cfg.animateOption = animateOption;\n        cfg.animate = animate;\n        // 计算 verticalLimitLength\n        var isAxisVertical = isVertical(region);\n        // TODO: 1 / 3 等默认值需要有一个全局的配置的地方\n        var verticalLimitLength = get(cfg, 'verticalLimitLength', isAxisVertical ? 1 / 3 : 1 / 2);\n        if (verticalLimitLength <= 1) {\n            // 配置的相对值，相对于画布\n            var canvasWidth = this.view.getCanvas().get('width');\n            var canvasHeight = this.view.getCanvas().get('height');\n            cfg.verticalLimitLength = verticalLimitLength * (isAxisVertical ? canvasWidth : canvasHeight);\n        }\n        return cfg;\n    };\n    /**\n     * generate line grid cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @param dim\n     * @return line grid cfg\n     */\n    Axis.prototype.getLineGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), direction);\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n        }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n        gridCfg.items = getLineGridItems(this.view.getCoordinate(), scale, dim, get(gridCfg, 'alignTick', true));\n        return gridCfg;\n    };\n    /**\n     * generate circle axis cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return circle axis cfg\n     */\n    Axis.prototype.getCircleAxisCfg = function (scale, axisOption, direction) {\n        var container = this.axisContainer;\n        var coordinate = this.view.getCoordinate();\n        var ticks = scale.getTicks().map(function (tick) { return ({ id: \"\" + tick.tickValue, name: tick.text, value: tick.value }); });\n        if (!scale.isCategory && Math.abs(coordinate.endAngle - coordinate.startAngle) === Math.PI * 2) {\n            // x 轴对应的值如果是非 cat 类型，在整圆的情况下坐标轴第一个和最后一个文本会重叠，默认只展示第一个文本\n            ticks.pop();\n        }\n        var titleText = getAxisTitleText(scale, axisOption);\n        var axisThemeCfg = getAxisThemeCfg(this.view.getTheme(), DIRECTION.CIRCLE);\n        // the cfg order should be ensure\n        var optionWithTitle = get(axisOption, ['title'])\n            ? deepMix({ title: { style: { text: titleText } } }, axisOption)\n            : axisOption;\n        var cfg = deepMix(__assign(__assign({ container: container }, getCircleAxisCenterRadius(this.view.getCoordinate())), { ticks: ticks, verticalFactor: 1 }), axisThemeCfg, optionWithTitle);\n        var _a = this.getAnimateCfg(cfg), animate = _a.animate, animateOption = _a.animateOption;\n        cfg.animate = animate;\n        cfg.animateOption = animateOption;\n        return cfg;\n    };\n    /**\n     * generate circle grid cfg\n     * @param scale\n     * @param axisOption\n     * @param direction\n     * @return circle grid cfg\n     */\n    Axis.prototype.getCircleGridCfg = function (scale, axisOption, direction, dim) {\n        if (!showGrid(getAxisThemeCfg(this.view.getTheme(), direction), axisOption)) {\n            return undefined;\n        }\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        var gridThemeCfg = getGridThemeCfg(this.view.getTheme(), DIRECTION.RADIUS);\n        var gridCfg = deepMix({\n            container: this.gridContainer,\n            center: this.view.getCoordinate().getCenter(),\n        }, gridThemeCfg, get(axisOption, 'grid'), this.getAnimateCfg(axisOption));\n        var alignTick = get(gridCfg, 'alignTick', true);\n        var verticalScale = dim === 'x' ? this.view.getYScales()[0] : this.view.getXScale();\n        gridCfg.items = getCircleGridItems(this.view.getCoordinate(), verticalScale, scale, alignTick, dim);\n        // the cfg order should be ensure\n        // grid 动画以 axis 为准\n        return gridCfg;\n    };\n    Axis.prototype.getId = function (name, key) {\n        var coordinate = this.view.getCoordinate();\n        // 坐标系类型也作为组件的 key\n        return name + \"-\" + key + \"-\" + coordinate.type;\n    };\n    Axis.prototype.getAnimateCfg = function (cfg) {\n        return {\n            animate: this.view.getOptions().animate && get(cfg, 'animate'),\n            animateOption: cfg && cfg.animateOption ? deepMix({}, AXIS_DEFAULT_ANIMATE_CFG, cfg.animateOption) : AXIS_DEFAULT_ANIMATE_CFG,\n        };\n    };\n    return Axis;\n}(Controller));\nexport default Axis;\n//# sourceMappingURL=axis.js.map"]}]}