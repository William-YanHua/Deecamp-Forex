{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/format-path.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/format-path.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _getSegmentPoints(segment) {\n    var points = [];\n    switch (segment[0]) {\n        case 'M':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'L':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'A':\n            points.push([segment[6], segment[7]]);\n            break;\n        case 'Q':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'T':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'C':\n            points.push([segment[5], segment[6]]);\n            points.push([segment[1], segment[2]]);\n            points.push([segment[3], segment[4]]);\n            break;\n        case 'S':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'H':\n            points.push([segment[1], segment[1]]);\n            break;\n        case 'V':\n            points.push([segment[1], segment[1]]);\n            break;\n        default:\n    }\n    return points;\n}\nfunction _splitPoints(points, former, count) {\n    var result = [].concat(points);\n    var index = void 0;\n    var t = 1 / (count + 1);\n    var formerEnd = _getSegmentPoints(former)[0];\n    for (var i = 1; i <= count; i++) {\n        t *= i;\n        index = Math.floor(points.length * t);\n        if (index === 0) {\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n        else {\n            result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n    }\n    return result;\n}\nmodule.exports = function formatPath(fromPath, toPath) {\n    if (fromPath.length <= 1) {\n        return fromPath;\n    }\n    var points = void 0;\n    for (var i = 0; i < toPath.length; i++) {\n        if (fromPath[i][0] !== toPath[i][0]) {\n            points = _getSegmentPoints(fromPath[i]);\n            switch (toPath[i][0]) {\n                case 'M':\n                    fromPath[i] = ['M'].concat(points[0]);\n                    break;\n                case 'L':\n                    fromPath[i] = ['L'].concat(points[0]);\n                    break;\n                case 'A':\n                    fromPath[i] = [].concat(toPath[i]);\n                    fromPath[i][6] = points[0][0];\n                    fromPath[i][7] = points[0][1];\n                    break;\n                case 'Q':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                case 'T':\n                    fromPath[i] = ['T'].concat(points[0]);\n                    break;\n                case 'C':\n                    if (points.length < 3) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 2);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                case 'S':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n                        return arr.concat(i);\n                    }, []));\n                    break;\n                default:\n                    fromPath[i] = toPath[i];\n            }\n        }\n    }\n    return fromPath;\n};\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/format-path.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/util/lib/path/format-path.js"],"names":[],"mappings":"AAMA,SAAS,iBAAiB,CAAC,OAAO;IAChC,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,QAAQ,OAAO,CAAC,CAAC,CAAC,EAAE;QAClB,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,KAAK,GAAG;YACN,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM;QACR,QAAQ;KAET;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAGD,SAAS,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK;IACzC,IAAI,MAAM,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC;IACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACxB,IAAI,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE;QAC/B,CAAC,IAAI,CAAC,CAAC;QACP,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACtC,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAChH;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SACzH;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,UAAU,CAAC,QAAQ,EAAE,MAAM;IACnD,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;QACxB,OAAO,QAAQ,CAAC;KACjB;IACD,IAAI,MAAM,GAAG,KAAK,CAAC,CAAC;IACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAEnC,MAAM,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YACxC,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACpB,KAAK,GAAG;oBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,GAAG;oBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,GAAG;oBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9B,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrB,IAAI,CAAC,GAAG,CAAC,EAAE;4BACT,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;yBACnD;6BAAM;4BACL,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BACxB,MAAM;yBACP;qBACF;oBACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;wBACvD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACR,MAAM;gBACR,KAAK,GAAG;oBACN,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtC,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrB,IAAI,CAAC,GAAG,CAAC,EAAE;4BACT,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;yBACnD;6BAAM;4BACL,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BACxB,MAAM;yBACP;qBACF;oBACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;wBACvD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACR,MAAM;gBACR,KAAK,GAAG;oBACN,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrB,IAAI,CAAC,GAAG,CAAC,EAAE;4BACT,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;yBACnD;6BAAM;4BACL,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;4BACxB,MAAM;yBACP;qBACF;oBACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;wBACvD,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACR,MAAM;gBACR;oBACE,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;aAC3B;SACF;KACF;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n  var points = [];\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n    default:\n\n  }\n  return points;\n}\n\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index = void 0;\n  var t = 1 / (count + 1);\n  var formerEnd = _getSegmentPoints(former)[0];\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n  return result;\n}\n\nmodule.exports = function formatPath(fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n  var points = void 0;\n  for (var i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n  return fromPath;\n};"]}]}