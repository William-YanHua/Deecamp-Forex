{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gingery.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gingery.js","mtime":1467599198000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator } from \"d3-geo\";\r\nimport { abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt } from \"./math\";\r\nexport function gingeryRaw(rho, n) {\r\n    var k = 2 * pi / n, rho2 = rho * rho;\r\n    function forward(lambda, phi) {\r\n        var p = azimuthalEquidistantRaw(lambda, phi), x = p[0], y = p[1], r2 = x * x + y * y;\r\n        if (r2 > rho2) {\r\n            var r = sqrt(r2), theta = atan2(y, x), theta0 = k * round(theta / k), alpha = theta - theta0, rhoCosAlpha = rho * cos(alpha), k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha), s_ = gingeryLength(alpha, k_), e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\r\n            x = r;\r\n            var i = 50, delta;\r\n            do {\r\n                x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\r\n            } while (abs(delta) > epsilon && --i > 0);\r\n            y = alpha * sin(x);\r\n            if (x < halfPi)\r\n                y -= k_ * (x - halfPi);\r\n            var s = sin(theta0), c = cos(theta0);\r\n            p[0] = x * c - y * s;\r\n            p[1] = x * s + y * c;\r\n        }\r\n        return p;\r\n    }\r\n    forward.invert = function (x, y) {\r\n        var r2 = x * x + y * y;\r\n        if (r2 > rho2) {\r\n            var r = sqrt(r2), theta = atan2(y, x), theta0 = k * round(theta / k), dTheta = theta - theta0;\r\n            x = r * cos(dTheta);\r\n            y = r * sin(dTheta);\r\n            var x_halfPi = x - halfPi, sinx = sin(x), alpha = y / sinx, delta = x < halfPi ? Infinity : 0, i = 10;\r\n            while (true) {\r\n                var rhosinAlpha = rho * sin(alpha), rhoCosAlpha = rho * cos(alpha), sinRhoCosAlpha = sin(rhoCosAlpha), halfPi_RhoCosAlpha = halfPi - rhoCosAlpha, k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha, s_ = gingeryLength(alpha, k_);\r\n                if (abs(delta) < epsilon2 || !--i)\r\n                    break;\r\n                alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (sinx - x_halfPi * 2 * (halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\r\n                    rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\r\n            }\r\n            r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\r\n            theta = theta0 + alpha;\r\n            x = r * cos(theta);\r\n            y = r * sin(theta);\r\n        }\r\n        return azimuthalEquidistantRaw.invert(x, y);\r\n    };\r\n    return forward;\r\n}\r\nfunction gingeryLength(alpha, k) {\r\n    return function (x) {\r\n        var y_ = alpha * cos(x);\r\n        if (x < halfPi)\r\n            y_ -= k;\r\n        return sqrt(1 + y_ * y_);\r\n    };\r\n}\r\nfunction gingeryIntegrate(f, a, b) {\r\n    var n = 50, h = (b - a) / n, s = f(a) + f(b);\r\n    for (var i = 1, x = a; i < n; ++i)\r\n        s += 2 * f(x += h);\r\n    return s * 0.5 * h;\r\n}\r\nexport default function () {\r\n    var n = 6, rho = 30 * radians, cRho = cos(rho), sRho = sin(rho), m = projectionMutator(gingeryRaw), p = m(rho, n), stream_ = p.stream, epsilon = 1e-2, cr = -cos(epsilon * radians), sr = sin(epsilon * radians);\r\n    p.radius = function (_) {\r\n        if (!arguments.length)\r\n            return rho * degrees;\r\n        cRho = cos(rho = _ * radians);\r\n        sRho = sin(rho);\r\n        return m(rho, n);\r\n    };\r\n    p.lobes = function (_) {\r\n        if (!arguments.length)\r\n            return n;\r\n        return m(rho, n = +_);\r\n    };\r\n    p.stream = function (stream) {\r\n        var rotate = p.rotate(), rotateStream = stream_(stream), sphereStream = (p.rotate([0, 0]), stream_(stream));\r\n        p.rotate(rotate);\r\n        rotateStream.sphere = function () {\r\n            sphereStream.polygonStart(), sphereStream.lineStart();\r\n            for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\r\n                sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\r\n                sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\r\n            }\r\n            sphereStream.lineEnd(), sphereStream.polygonEnd();\r\n        };\r\n        return rotateStream;\r\n    };\r\n    return p\r\n        .rotate([90, -40])\r\n        .scale(91.7095)\r\n        .clipAngle(180 - 1e-3);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gingery.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gingery.js"],"names":[],"mappings":"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","sourcesContent":["import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n"]}]}