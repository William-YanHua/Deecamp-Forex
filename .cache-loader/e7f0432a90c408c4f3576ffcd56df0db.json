{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-column\\layer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-column\\layer.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { deepMix } from '@antv/util';\r\nimport { registerPlotType } from '../../base/global';\r\nimport ConnectedArea from '../../components/connected-area';\r\nimport BaseColumnLayer from '../column/layer';\r\nimport './theme';\r\nimport './component/label';\r\nimport './component/label-auto';\r\nimport { getGeometryByType } from '../../util/view';\r\nvar StackedColumnLayer = (function (_super) {\r\n    __extends(StackedColumnLayer, _super);\r\n    function StackedColumnLayer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = 'stackedColumn';\r\n        return _this;\r\n    }\r\n    StackedColumnLayer.getDefaultOptions = function () {\r\n        return deepMix({}, _super.getDefaultOptions.call(this), {\r\n            legend: {\r\n                visible: true,\r\n                position: 'right-top',\r\n            },\r\n            label: {\r\n                visible: false,\r\n                position: 'middle',\r\n                offset: 0,\r\n                adjustColor: true,\r\n            },\r\n            connectedArea: {\r\n                visible: false,\r\n                triggerOn: 'mouseenter',\r\n            },\r\n        });\r\n    };\r\n    StackedColumnLayer.prototype.init = function () {\r\n        if (this.options.connectedArea.visible) {\r\n            this.options.tooltip.crosshairs = null;\r\n        }\r\n        _super.prototype.init.call(this);\r\n    };\r\n    StackedColumnLayer.prototype.afterRender = function () {\r\n        var props = this.options;\r\n        if (props.connectedArea.visible) {\r\n            this.connectedArea = new ConnectedArea(__assign({ view: this.view, field: props.stackField, animation: props.animation === false ? false : true }, props.connectedArea));\r\n        }\r\n        _super.prototype.afterRender.call(this);\r\n    };\r\n    StackedColumnLayer.prototype.getColorScale = function () {\r\n        var stackField = this.options.stackField;\r\n        return this.view.getScaleByField(stackField);\r\n    };\r\n    StackedColumnLayer.prototype.adjustColumn = function (column) {\r\n        column.adjust = [\r\n            {\r\n                type: 'stack',\r\n            },\r\n        ];\r\n    };\r\n    StackedColumnLayer.prototype.renderLabel = function () {\r\n        var scales = this.config.scales;\r\n        var _a = this.options, label = _a.label, yField = _a.yField;\r\n        var scale = scales[yField];\r\n        if (label && label.visible) {\r\n            var geometry = getGeometryByType(this.view, 'interval');\r\n            this.doRenderLabel(geometry, __assign({ type: 'stacked-column', formatter: scale.formatter && (function (value) { return scale.formatter(value); }) }, this.options.label));\r\n        }\r\n    };\r\n    StackedColumnLayer.prototype.geometryTooltip = function () {\r\n        this.column.tooltip = {};\r\n        var tooltipOptions = this.options.tooltip;\r\n        if (tooltipOptions.fields) {\r\n            this.column.tooltip.fields = tooltipOptions.fields;\r\n        }\r\n        if (tooltipOptions.formatter) {\r\n            this.column.tooltip.callback = tooltipOptions.formatter;\r\n            if (!tooltipOptions.fields) {\r\n                this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\r\n            }\r\n        }\r\n    };\r\n    return StackedColumnLayer;\r\n}(BaseColumnLayer));\r\nexport default StackedColumnLayer;\r\nregisterPlotType('stackedColumn', StackedColumnLayer);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-column\\layer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-column\\layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ConnectedArea from '../../components/connected-area';\nimport BaseColumnLayer from '../column/layer';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\nvar StackedColumnLayer = /** @class */ (function (_super) {\n    __extends(StackedColumnLayer, _super);\n    function StackedColumnLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'stackedColumn';\n        return _this;\n    }\n    StackedColumnLayer.getDefaultOptions = function () {\n        return deepMix({}, _super.getDefaultOptions.call(this), {\n            legend: {\n                visible: true,\n                position: 'right-top',\n            },\n            label: {\n                visible: false,\n                position: 'middle',\n                offset: 0,\n                adjustColor: true,\n            },\n            connectedArea: {\n                visible: false,\n                triggerOn: 'mouseenter',\n            },\n        });\n    };\n    StackedColumnLayer.prototype.init = function () {\n        if (this.options.connectedArea.visible) {\n            this.options.tooltip.crosshairs = null;\n        }\n        _super.prototype.init.call(this);\n    };\n    StackedColumnLayer.prototype.afterRender = function () {\n        var props = this.options;\n        // 绘制区域连接组件\n        if (props.connectedArea.visible) {\n            this.connectedArea = new ConnectedArea(__assign({ view: this.view, field: props.stackField, animation: props.animation === false ? false : true }, props.connectedArea));\n        }\n        _super.prototype.afterRender.call(this);\n    };\n    StackedColumnLayer.prototype.getColorScale = function () {\n        var stackField = this.options.stackField;\n        return this.view.getScaleByField(stackField);\n    };\n    StackedColumnLayer.prototype.adjustColumn = function (column) {\n        column.adjust = [\n            {\n                type: 'stack',\n            },\n        ];\n    };\n    StackedColumnLayer.prototype.renderLabel = function () {\n        var scales = this.config.scales;\n        var _a = this.options, label = _a.label, yField = _a.yField;\n        var scale = scales[yField];\n        if (label && label.visible) {\n            var geometry = getGeometryByType(this.view, 'interval');\n            this.doRenderLabel(geometry, __assign({ type: 'stacked-column', formatter: scale.formatter && (function (value) { return scale.formatter(value); }) }, this.options.label));\n        }\n    };\n    StackedColumnLayer.prototype.geometryTooltip = function () {\n        this.column.tooltip = {};\n        var tooltipOptions = this.options.tooltip;\n        if (tooltipOptions.fields) {\n            this.column.tooltip.fields = tooltipOptions.fields;\n        }\n        if (tooltipOptions.formatter) {\n            this.column.tooltip.callback = tooltipOptions.formatter;\n            if (!tooltipOptions.fields) {\n                this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n            }\n        }\n    };\n    return StackedColumnLayer;\n}(BaseColumnLayer));\nexport default StackedColumnLayer;\nregisterPlotType('stackedColumn', StackedColumnLayer);\n//# sourceMappingURL=layer.js.map"]}]}