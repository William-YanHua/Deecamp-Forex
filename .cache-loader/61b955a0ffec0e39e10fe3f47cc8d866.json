{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\data\\priority-queue.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\data\\priority-queue.js","mtime":1514744380000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var _ = require(\"../lodash\");\r\nmodule.exports = PriorityQueue;\r\nfunction PriorityQueue() {\r\n    this._arr = [];\r\n    this._keyIndices = {};\r\n}\r\nPriorityQueue.prototype.size = function () {\r\n    return this._arr.length;\r\n};\r\nPriorityQueue.prototype.keys = function () {\r\n    return this._arr.map(function (x) { return x.key; });\r\n};\r\nPriorityQueue.prototype.has = function (key) {\r\n    return _.has(this._keyIndices, key);\r\n};\r\nPriorityQueue.prototype.priority = function (key) {\r\n    var index = this._keyIndices[key];\r\n    if (index !== undefined) {\r\n        return this._arr[index].priority;\r\n    }\r\n};\r\nPriorityQueue.prototype.min = function () {\r\n    if (this.size() === 0) {\r\n        throw new Error(\"Queue underflow\");\r\n    }\r\n    return this._arr[0].key;\r\n};\r\nPriorityQueue.prototype.add = function (key, priority) {\r\n    var keyIndices = this._keyIndices;\r\n    key = String(key);\r\n    if (!_.has(keyIndices, key)) {\r\n        var arr = this._arr;\r\n        var index = arr.length;\r\n        keyIndices[key] = index;\r\n        arr.push({ key: key, priority: priority });\r\n        this._decrease(index);\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nPriorityQueue.prototype.removeMin = function () {\r\n    this._swap(0, this._arr.length - 1);\r\n    var min = this._arr.pop();\r\n    delete this._keyIndices[min.key];\r\n    this._heapify(0);\r\n    return min.key;\r\n};\r\nPriorityQueue.prototype.decrease = function (key, priority) {\r\n    var index = this._keyIndices[key];\r\n    if (priority > this._arr[index].priority) {\r\n        throw new Error(\"New priority is greater than current priority. \" +\r\n            \"Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\r\n    }\r\n    this._arr[index].priority = priority;\r\n    this._decrease(index);\r\n};\r\nPriorityQueue.prototype._heapify = function (i) {\r\n    var arr = this._arr;\r\n    var l = 2 * i, r = l + 1, largest = i;\r\n    if (l < arr.length) {\r\n        largest = arr[l].priority < arr[largest].priority ? l : largest;\r\n        if (r < arr.length) {\r\n            largest = arr[r].priority < arr[largest].priority ? r : largest;\r\n        }\r\n        if (largest !== i) {\r\n            this._swap(i, largest);\r\n            this._heapify(largest);\r\n        }\r\n    }\r\n};\r\nPriorityQueue.prototype._decrease = function (index) {\r\n    var arr = this._arr;\r\n    var priority = arr[index].priority;\r\n    var parent;\r\n    while (index !== 0) {\r\n        parent = index >> 1;\r\n        if (arr[parent].priority < priority) {\r\n            break;\r\n        }\r\n        this._swap(index, parent);\r\n        index = parent;\r\n    }\r\n};\r\nPriorityQueue.prototype._swap = function (i, j) {\r\n    var arr = this._arr;\r\n    var keyIndices = this._keyIndices;\r\n    var origArrI = arr[i];\r\n    var origArrJ = arr[j];\r\n    arr[i] = origArrJ;\r\n    arr[j] = origArrI;\r\n    keyIndices[origArrJ.key] = i;\r\n    keyIndices[origArrI.key] = j;\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\data\\priority-queue.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\graphlib\\lib\\data\\priority-queue.js"],"names":[],"mappings":"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","sourcesContent":["var _ = require(\"../lodash\");\n\nmodule.exports = PriorityQueue;\n\n/**\n * A min-priority queue data structure. This algorithm is derived from Cormen,\n * et al., \"Introduction to Algorithms\". The basic idea of a min-priority\n * queue is that you can efficiently (in O(1) time) get the smallest key in\n * the queue. Adding and removing elements takes O(log n) time. A key can\n * have its priority decreased in O(log n) time.\n */\nfunction PriorityQueue() {\n  this._arr = [];\n  this._keyIndices = {};\n}\n\n/**\n * Returns the number of elements in the queue. Takes `O(1)` time.\n */\nPriorityQueue.prototype.size = function() {\n  return this._arr.length;\n};\n\n/**\n * Returns the keys that are in the queue. Takes `O(n)` time.\n */\nPriorityQueue.prototype.keys = function() {\n  return this._arr.map(function(x) { return x.key; });\n};\n\n/**\n * Returns `true` if **key** is in the queue and `false` if not.\n */\nPriorityQueue.prototype.has = function(key) {\n  return _.has(this._keyIndices, key);\n};\n\n/**\n * Returns the priority for **key**. If **key** is not present in the queue\n * then this function returns `undefined`. Takes `O(1)` time.\n *\n * @param {Object} key\n */\nPriorityQueue.prototype.priority = function(key) {\n  var index = this._keyIndices[key];\n  if (index !== undefined) {\n    return this._arr[index].priority;\n  }\n};\n\n/**\n * Returns the key for the minimum element in this queue. If the queue is\n * empty this function throws an Error. Takes `O(1)` time.\n */\nPriorityQueue.prototype.min = function() {\n  if (this.size() === 0) {\n    throw new Error(\"Queue underflow\");\n  }\n  return this._arr[0].key;\n};\n\n/**\n * Inserts a new key into the priority queue. If the key already exists in\n * the queue this function returns `false`; otherwise it will return `true`.\n * Takes `O(n)` time.\n *\n * @param {Object} key the key to add\n * @param {Number} priority the initial priority for the key\n */\nPriorityQueue.prototype.add = function(key, priority) {\n  var keyIndices = this._keyIndices;\n  key = String(key);\n  if (!_.has(keyIndices, key)) {\n    var arr = this._arr;\n    var index = arr.length;\n    keyIndices[key] = index;\n    arr.push({key: key, priority: priority});\n    this._decrease(index);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Removes and returns the smallest key in the queue. Takes `O(log n)` time.\n */\nPriorityQueue.prototype.removeMin = function() {\n  this._swap(0, this._arr.length - 1);\n  var min = this._arr.pop();\n  delete this._keyIndices[min.key];\n  this._heapify(0);\n  return min.key;\n};\n\n/**\n * Decreases the priority for **key** to **priority**. If the new priority is\n * greater than the previous priority, this function will throw an Error.\n *\n * @param {Object} key the key for which to raise priority\n * @param {Number} priority the new priority for the key\n */\nPriorityQueue.prototype.decrease = function(key, priority) {\n  var index = this._keyIndices[key];\n  if (priority > this._arr[index].priority) {\n    throw new Error(\"New priority is greater than current priority. \" +\n        \"Key: \" + key + \" Old: \" + this._arr[index].priority + \" New: \" + priority);\n  }\n  this._arr[index].priority = priority;\n  this._decrease(index);\n};\n\nPriorityQueue.prototype._heapify = function(i) {\n  var arr = this._arr;\n  var l = 2 * i,\n      r = l + 1,\n      largest = i;\n  if (l < arr.length) {\n    largest = arr[l].priority < arr[largest].priority ? l : largest;\n    if (r < arr.length) {\n      largest = arr[r].priority < arr[largest].priority ? r : largest;\n    }\n    if (largest !== i) {\n      this._swap(i, largest);\n      this._heapify(largest);\n    }\n  }\n};\n\nPriorityQueue.prototype._decrease = function(index) {\n  var arr = this._arr;\n  var priority = arr[index].priority;\n  var parent;\n  while (index !== 0) {\n    parent = index >> 1;\n    if (arr[parent].priority < priority) {\n      break;\n    }\n    this._swap(index, parent);\n    index = parent;\n  }\n};\n\nPriorityQueue.prototype._swap = function(i, j) {\n  var arr = this._arr;\n  var keyIndices = this._keyIndices;\n  var origArrI = arr[i];\n  var origArrJ = arr[j];\n  arr[i] = origArrJ;\n  arr[j] = origArrI;\n  keyIndices[origArrJ.key] = i;\n  keyIndices[origArrI.key] = j;\n};\n"]}]}