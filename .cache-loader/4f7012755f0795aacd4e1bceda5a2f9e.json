{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\format-path.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\format-path.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["function _getSegmentPoints(segment) {\r\n    var points = [];\r\n    switch (segment[0]) {\r\n        case 'M':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'L':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'A':\r\n            points.push([segment[6], segment[7]]);\r\n            break;\r\n        case 'Q':\r\n            points.push([segment[3], segment[4]]);\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'T':\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'C':\r\n            points.push([segment[5], segment[6]]);\r\n            points.push([segment[1], segment[2]]);\r\n            points.push([segment[3], segment[4]]);\r\n            break;\r\n        case 'S':\r\n            points.push([segment[3], segment[4]]);\r\n            points.push([segment[1], segment[2]]);\r\n            break;\r\n        case 'H':\r\n            points.push([segment[1], segment[1]]);\r\n            break;\r\n        case 'V':\r\n            points.push([segment[1], segment[1]]);\r\n            break;\r\n        default:\r\n    }\r\n    return points;\r\n}\r\nfunction _splitPoints(points, former, count) {\r\n    var result = [].concat(points);\r\n    var index;\r\n    var t = 1 / (count + 1);\r\n    var formerEnd = _getSegmentPoints(former)[0];\r\n    for (var i = 1; i <= count; i++) {\r\n        t *= i;\r\n        index = Math.floor(points.length * t);\r\n        if (index === 0) {\r\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\r\n        }\r\n        else {\r\n            result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport default function formatPath(fromPath, toPath) {\r\n    if (fromPath.length <= 1) {\r\n        return fromPath;\r\n    }\r\n    var points;\r\n    for (var i = 0; i < toPath.length; i++) {\r\n        if (fromPath[i][0] !== toPath[i][0]) {\r\n            points = _getSegmentPoints(fromPath[i]);\r\n            switch (toPath[i][0]) {\r\n                case 'M':\r\n                    fromPath[i] = ['M'].concat(points[0]);\r\n                    break;\r\n                case 'L':\r\n                    fromPath[i] = ['L'].concat(points[0]);\r\n                    break;\r\n                case 'A':\r\n                    fromPath[i] = [].concat(toPath[i]);\r\n                    fromPath[i][6] = points[0][0];\r\n                    fromPath[i][7] = points[0][1];\r\n                    break;\r\n                case 'Q':\r\n                    if (points.length < 2) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 1);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                case 'T':\r\n                    fromPath[i] = ['T'].concat(points[0]);\r\n                    break;\r\n                case 'C':\r\n                    if (points.length < 3) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 2);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                case 'S':\r\n                    if (points.length < 2) {\r\n                        if (i > 0) {\r\n                            points = _splitPoints(points, fromPath[i - 1], 1);\r\n                        }\r\n                        else {\r\n                            fromPath[i] = toPath[i];\r\n                            break;\r\n                        }\r\n                    }\r\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\r\n                    break;\r\n                default:\r\n                    fromPath[i] = toPath[i];\r\n            }\r\n        }\r\n    }\r\n    return fromPath;\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\format-path.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\path-util\\esm\\format-path.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n    var points = [];\n    switch (segment[0]) {\n        case 'M':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'L':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'A':\n            points.push([segment[6], segment[7]]);\n            break;\n        case 'Q':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'T':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'C':\n            points.push([segment[5], segment[6]]);\n            points.push([segment[1], segment[2]]);\n            points.push([segment[3], segment[4]]);\n            break;\n        case 'S':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'H':\n            points.push([segment[1], segment[1]]);\n            break;\n        case 'V':\n            points.push([segment[1], segment[1]]);\n            break;\n        default:\n    }\n    return points;\n}\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n    var result = [].concat(points);\n    var index;\n    var t = 1 / (count + 1);\n    var formerEnd = _getSegmentPoints(former)[0];\n    for (var i = 1; i <= count; i++) {\n        t *= i;\n        index = Math.floor(points.length * t);\n        if (index === 0) {\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n        else {\n            result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n    }\n    return result;\n}\nexport default function formatPath(fromPath, toPath) {\n    if (fromPath.length <= 1) {\n        return fromPath;\n    }\n    var points;\n    for (var i = 0; i < toPath.length; i++) {\n        if (fromPath[i][0] !== toPath[i][0]) {\n            // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n            points = _getSegmentPoints(fromPath[i]);\n            switch (toPath[i][0]) {\n                case 'M':\n                    fromPath[i] = ['M'].concat(points[0]);\n                    break;\n                case 'L':\n                    fromPath[i] = ['L'].concat(points[0]);\n                    break;\n                case 'A':\n                    fromPath[i] = [].concat(toPath[i]);\n                    fromPath[i][6] = points[0][0];\n                    fromPath[i][7] = points[0][1];\n                    break;\n                case 'Q':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                case 'T':\n                    fromPath[i] = ['T'].concat(points[0]);\n                    break;\n                case 'C':\n                    if (points.length < 3) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 2);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                case 'S':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                default:\n                    fromPath[i] = toPath[i];\n            }\n        }\n    }\n    return fromPath;\n}\n//# sourceMappingURL=format-path.js.map"]}]}