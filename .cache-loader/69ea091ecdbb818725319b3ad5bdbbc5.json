{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\base\\controller\\canvas.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\base\\controller\\canvas.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { modifyCSS } from '@antv/dom-util';\r\nimport { Canvas, SVG } from '../../dependents';\r\nimport { debounce, get } from '@antv/util';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nimport { getGlobalTheme } from '../../theme/global';\r\nimport ThemeController from './theme';\r\nvar CanvasController = (function () {\r\n    function CanvasController(cfg) {\r\n        var _this = this;\r\n        this.onResize = debounce(function () {\r\n            if (_this.plot.destroyed) {\r\n                return;\r\n            }\r\n            var _a = _this.getCanvasSize(), width = _a.width, height = _a.height;\r\n            if (_this.width === width && _this.height === height) {\r\n                return;\r\n            }\r\n            _this.width = width;\r\n            _this.height = height;\r\n            _this.plot.updateConfig({ width: width, height: height });\r\n            _this.plot.render();\r\n        }, 300);\r\n        var containerDOM = cfg.containerDOM, plot = cfg.plot;\r\n        this.containerDOM = containerDOM;\r\n        this.plot = plot;\r\n        this.init();\r\n    }\r\n    CanvasController.prototype.getCanvasSize = function () {\r\n        var theme = getGlobalTheme();\r\n        var width = this.plot.width ? this.plot.width : theme.width;\r\n        var height = this.plot.height ? this.plot.height : theme.height;\r\n        if (this.plot.forceFit) {\r\n            width = this.containerDOM.offsetWidth ? this.containerDOM.offsetWidth : width;\r\n            height = this.containerDOM.offsetHeight ? this.containerDOM.offsetHeight : height;\r\n        }\r\n        return { width: width, height: height };\r\n    };\r\n    CanvasController.prototype.getCanvasDOM = function () {\r\n        return this.canvas.get('container');\r\n    };\r\n    CanvasController.prototype.updateCanvasSize = function () {\r\n        var _a = this.getCanvasSize(), width = _a.width, height = _a.height;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.canvas.changeSize(width, height);\r\n    };\r\n    CanvasController.prototype.updateCanvasTheme = function () {\r\n        var theme = this.plot.theme;\r\n        var globalTheme = ThemeController.getGlobalTheme(theme);\r\n        var fill = get(globalTheme, 'backgroundStyle.fill');\r\n        if (fill) {\r\n            this.updateCanvasStyle({\r\n                backgroundColor: fill,\r\n            });\r\n        }\r\n    };\r\n    CanvasController.prototype.updateCanvasStyle = function (styles) {\r\n        modifyCSS(this.getCanvasDOM(), styles);\r\n        modifyCSS(this.canvas.get('el'), {\r\n            display: 'inline-block',\r\n            verticalAlign: 'middle',\r\n        });\r\n    };\r\n    CanvasController.prototype.destroy = function () {\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.unobserve(this.containerDOM);\r\n            this.resizeObserver.disconnect();\r\n            this.containerDOM = null;\r\n        }\r\n        this.canvas.destroy();\r\n    };\r\n    CanvasController.prototype.bindForceFit = function () {\r\n        var forceFit = this.plot.forceFit;\r\n        if (forceFit) {\r\n            this.resizeObserver = new ResizeObserver(this.onResize);\r\n            this.resizeObserver.observe(this.containerDOM);\r\n        }\r\n    };\r\n    CanvasController.prototype.init = function () {\r\n        this.initGCanvas();\r\n        this.bindForceFit();\r\n        this.updateCanvasStyle({ position: 'relative' });\r\n    };\r\n    CanvasController.prototype.initGCanvas = function () {\r\n        var _a = this.plot, _b = _a.renderer, renderer = _b === void 0 ? 'canvas' : _b, pixelRatio = _a.pixelRatio, _c = _a.localRefresh, localRefresh = _c === void 0 ? false : _c;\r\n        var _d = this.getCanvasSize(), width = _d.width, height = _d.height;\r\n        var G = renderer === 'canvas' ? Canvas : SVG;\r\n        this.canvas = new G({\r\n            localRefresh: localRefresh,\r\n            container: this.containerDOM,\r\n            width: width,\r\n            height: height,\r\n            pixelRatio: pixelRatio,\r\n        });\r\n        this.width = width;\r\n        this.height = height;\r\n        this.updateCanvasTheme();\r\n    };\r\n    return CanvasController;\r\n}());\r\nexport default CanvasController;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\base\\controller\\canvas.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\base\\controller\\canvas.js"],"names":[],"mappings":"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","sourcesContent":["import { modifyCSS } from '@antv/dom-util';\nimport { Canvas, SVG } from '../../dependents';\nimport { debounce, get } from '@antv/util';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { getGlobalTheme } from '../../theme/global';\nimport ThemeController from './theme';\n/**\n * Canvas controller\n * 1. create G.Canvas, destroy G.Canvas\n * 2. process auto fit container\n * 3. API for G.Canvas\n */\nvar CanvasController = /** @class */ (function () {\n    function CanvasController(cfg) {\n        var _this = this;\n        /**\n         * when the container size changed, trigger it after 300ms.\n         */\n        this.onResize = debounce(function () {\n            if (_this.plot.destroyed) {\n                return;\n            }\n            var _a = _this.getCanvasSize(), width = _a.width, height = _a.height;\n            /** height measure不准导致重复 forceFit */\n            if (_this.width === width && _this.height === height) {\n                return;\n            }\n            // got new width, height, re-render the plot\n            _this.width = width;\n            _this.height = height;\n            _this.plot.updateConfig({ width: width, height: height });\n            _this.plot.render();\n        }, 300);\n        var containerDOM = cfg.containerDOM, plot = cfg.plot;\n        this.containerDOM = containerDOM;\n        this.plot = plot;\n        this.init();\n    }\n    /**\n     * get canvas size from props.\n     * @returns the width, height of canvas\n     */\n    CanvasController.prototype.getCanvasSize = function () {\n        var theme = getGlobalTheme();\n        var width = this.plot.width ? this.plot.width : theme.width;\n        var height = this.plot.height ? this.plot.height : theme.height;\n        // if forceFit = true, then use the container's size as default.\n        if (this.plot.forceFit) {\n            width = this.containerDOM.offsetWidth ? this.containerDOM.offsetWidth : width;\n            height = this.containerDOM.offsetHeight ? this.containerDOM.offsetHeight : height;\n        }\n        return { width: width, height: height };\n    };\n    /**\n     * get the canvas dom\n     * @returns Canvas DOM\n     */\n    CanvasController.prototype.getCanvasDOM = function () {\n        return this.canvas.get('container');\n    };\n    /**\n     * update the plot size\n     */\n    CanvasController.prototype.updateCanvasSize = function () {\n        var _a = this.getCanvasSize(), width = _a.width, height = _a.height;\n        this.width = width;\n        this.height = height;\n        this.canvas.changeSize(width, height);\n        // this.plot.updateRange();\n    };\n    /**\n     * 根据主题调整canvas样式\n     */\n    CanvasController.prototype.updateCanvasTheme = function () {\n        var theme = this.plot.theme;\n        var globalTheme = ThemeController.getGlobalTheme(theme);\n        var fill = get(globalTheme, 'backgroundStyle.fill');\n        if (fill) {\n            this.updateCanvasStyle({\n                backgroundColor: fill,\n            });\n        }\n    };\n    /**\n     * update the canvas dom styles\n     * @param styles\n     */\n    CanvasController.prototype.updateCanvasStyle = function (styles) {\n        // 修改容器的样式\n        modifyCSS(this.getCanvasDOM(), styles);\n        // 修改 canvas 的样式\n        modifyCSS(this.canvas.get('el'), {\n            display: 'inline-block',\n            verticalAlign: 'middle',\n        });\n    };\n    /**\n     * destroy the plot, remove resize event.\n     */\n    CanvasController.prototype.destroy = function () {\n        // remove event\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(this.containerDOM);\n            this.resizeObserver.disconnect();\n            this.containerDOM = null;\n        }\n        // remove G.Canvas\n        this.canvas.destroy();\n    };\n    /**\n     * when forceFit = true, then bind the event to listen the container size change\n     */\n    CanvasController.prototype.bindForceFit = function () {\n        var forceFit = this.plot.forceFit;\n        // use ResizeObserver to listen the container size change.\n        if (forceFit) {\n            this.resizeObserver = new ResizeObserver(this.onResize);\n            this.resizeObserver.observe(this.containerDOM);\n        }\n    };\n    /**\n     * init life circle\n     */\n    CanvasController.prototype.init = function () {\n        this.initGCanvas();\n        this.bindForceFit();\n        // 追加容器的 css 样式，防止 tooltip 的位置参考点不正确\n        this.updateCanvasStyle({ position: 'relative' });\n    };\n    /**\n     * init G.Canvas instance\n     */\n    CanvasController.prototype.initGCanvas = function () {\n        /** 创建canvas */\n        var _a = this.plot, _b = _a.renderer, renderer = _b === void 0 ? 'canvas' : _b, pixelRatio = _a.pixelRatio, _c = _a.localRefresh, localRefresh = _c === void 0 ? false : _c;\n        var _d = this.getCanvasSize(), width = _d.width, height = _d.height;\n        var G = renderer === 'canvas' ? Canvas : SVG;\n        this.canvas = new G({\n            localRefresh: localRefresh,\n            container: this.containerDOM,\n            width: width,\n            height: height,\n            pixelRatio: pixelRatio,\n        });\n        this.width = width;\n        this.height = height;\n        this.updateCanvasTheme();\n    };\n    return CanvasController;\n}());\nexport default CanvasController;\n//# sourceMappingURL=canvas.js.map"]}]}