{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g-math/lib/polyline.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g-math/lib/polyline.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar segments_1 = require(\"./segments\");\nvar util_1 = require(\"./util\");\nexports.default = {\n    box: function (points) {\n        var xArr = [];\n        var yArr = [];\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            xArr.push(point[0]);\n            yArr.push(point[1]);\n        }\n        return util_1.getBBoxByArray(xArr, yArr);\n    },\n    length: function (points) {\n        return segments_1.lengthOfSegment(points);\n    },\n    pointAt: function (points, t) {\n        return segments_1.pointAtSegments(points, t);\n    },\n    pointDistance: function (points, x, y) {\n        return segments_1.distanceAtSegment(points, x, y);\n    },\n    tangentAngle: function (points, t) {\n        return segments_1.angleAtSegments(points, t);\n    },\n};\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g-math/lib/polyline.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/g-math/lib/polyline.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,IAAI,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACvC,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,OAAO,CAAC,OAAO,GAAG;IAMd,GAAG,EAAE,UAAU,MAAM;QACjB,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;SACvB;QACD,OAAO,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAMD,MAAM,EAAE,UAAU,MAAM;QACpB,OAAO,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;IAOD,OAAO,EAAE,UAAU,MAAM,EAAE,CAAC;QACxB,OAAO,UAAU,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IAQD,aAAa,EAAE,UAAU,MAAM,EAAE,CAAC,EAAE,CAAC;QACjC,OAAO,UAAU,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtD,CAAC;IAOD,YAAY,EAAE,UAAU,MAAM,EAAE,CAAC;QAC7B,OAAO,UAAU,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;CACJ,CAAC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar segments_1 = require(\"./segments\");\nvar util_1 = require(\"./util\");\nexports.default = {\n    /**\n     * 计算多折线的包围盒\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 包围盒\n     */\n    box: function (points) {\n        var xArr = [];\n        var yArr = [];\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            xArr.push(point[0]);\n            yArr.push(point[1]);\n        }\n        return util_1.getBBoxByArray(xArr, yArr);\n    },\n    /**\n     * 计算多折线的长度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 多条边的长度\n     */\n    length: function (points) {\n        return segments_1.lengthOfSegment(points);\n    },\n    /**\n     * 根据比例获取多折线的点\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的点\n     */\n    pointAt: function (points, t) {\n        return segments_1.pointAtSegments(points, t);\n    },\n    /**\n     * 指定点到多折线的距离\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} x 指定点的 x\n     * @param {number} y 指定点的 y\n     * @return {number} 点到多折线的距离\n     */\n    pointDistance: function (points, x, y) {\n        return segments_1.distanceAtSegment(points, x, y);\n    },\n    /**\n     * 根据比例获取多折线的切线角度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的角度\n     */\n    tangentAngle: function (points, t) {\n        return segments_1.angleAtSegments(points, t);\n    },\n};\n//# sourceMappingURL=polyline.js.map"]}]}