{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\laskowski.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\laskowski.js","mtime":1467599198000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\r\nimport { abs, epsilon, pi, sign } from \"./math\";\r\nexport function laskowskiRaw(lambda, phi) {\r\n    var lambda2 = lambda * lambda, phi2 = phi * phi;\r\n    return [\r\n        lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\r\n        phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\r\n    ];\r\n}\r\nlaskowskiRaw.invert = function (x, y) {\r\n    var lambda = sign(x) * pi, phi = y / 2, i = 50;\r\n    do {\r\n        var lambda2 = lambda * lambda, phi2 = phi * phi, lambdaPhi = lambda * phi, fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x, fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y, deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009), deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2), deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2), deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2), denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda, deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator, deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\r\n        lambda -= deltaLambda, phi -= deltaPhi;\r\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\r\n    return i && [lambda, phi];\r\n};\r\nexport default function () {\r\n    return projection(laskowskiRaw)\r\n        .scale(139.98);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\laskowski.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\laskowski.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n"]}]}