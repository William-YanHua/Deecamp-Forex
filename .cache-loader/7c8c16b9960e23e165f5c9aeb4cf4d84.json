{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-bar\\layer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-bar\\layer.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { deepMix } from '@antv/util';\r\nimport { registerPlotType } from '../../base/global';\r\nimport BaseBarLayer from '../bar/layer';\r\nimport './theme';\r\nimport './component/label';\r\nimport './component/label-auto';\r\nimport { getGeometryByType } from '../../util/view';\r\nvar StackedBarLayer = (function (_super) {\r\n    __extends(StackedBarLayer, _super);\r\n    function StackedBarLayer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = 'stackedBar';\r\n        return _this;\r\n    }\r\n    StackedBarLayer.getDefaultOptions = function () {\r\n        return deepMix({}, _super.getDefaultOptions.call(this), {\r\n            xAxis: {\r\n                visible: true,\r\n                autoRotateTitle: false,\r\n                grid: {\r\n                    visible: true,\r\n                },\r\n                line: {\r\n                    visible: false,\r\n                },\r\n                tickLine: {\r\n                    visible: true,\r\n                },\r\n                label: {\r\n                    visible: true,\r\n                    autoRotate: true,\r\n                    autoHide: true,\r\n                },\r\n                title: {\r\n                    visible: true,\r\n                    spacing: 12,\r\n                },\r\n            },\r\n            yAxis: {\r\n                visible: true,\r\n                autoRotateTitle: true,\r\n                grid: {\r\n                    visible: false,\r\n                },\r\n                line: {\r\n                    visible: false,\r\n                },\r\n                tickLine: {\r\n                    visible: false,\r\n                },\r\n                label: {\r\n                    visible: true,\r\n                    autoRotate: true,\r\n                    autoHide: true,\r\n                },\r\n                title: {\r\n                    visible: false,\r\n                    spacing: 12,\r\n                },\r\n            },\r\n            legend: {\r\n                visible: true,\r\n                position: 'top-left',\r\n                offsetY: 0,\r\n            },\r\n        });\r\n    };\r\n    StackedBarLayer.prototype.getColorScale = function () {\r\n        var stackField = this.options.stackField;\r\n        return this.view.getScaleByField(stackField);\r\n    };\r\n    StackedBarLayer.prototype.adjustBar = function (bar) {\r\n        bar.adjust = [\r\n            {\r\n                type: 'stack',\r\n            },\r\n        ];\r\n    };\r\n    StackedBarLayer.prototype.renderLabel = function () {\r\n        var scales = this.config.scales;\r\n        var _a = this.options, label = _a.label, xField = _a.xField;\r\n        var scale = scales[xField];\r\n        if (label === null || label === void 0 ? void 0 : label.visible) {\r\n            var geometry = getGeometryByType(this.view, 'interval');\r\n            this.doRenderLabel(geometry, __assign({ type: 'stacked-bar', formatter: scale.formatter && (function (value) { return scale.formatter(value); }) }, this.options.label));\r\n        }\r\n    };\r\n    StackedBarLayer.prototype.geometryTooltip = function () {\r\n        this.bar.tooltip = {};\r\n        var tooltipOptions = this.options.tooltip;\r\n        if (tooltipOptions.fields) {\r\n            this.bar.tooltip.fields = tooltipOptions.fields;\r\n        }\r\n        if (tooltipOptions.formatter) {\r\n            this.bar.tooltip.callback = tooltipOptions.formatter;\r\n            if (!tooltipOptions.fields) {\r\n                this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\r\n            }\r\n        }\r\n    };\r\n    return StackedBarLayer;\r\n}(BaseBarLayer));\r\nexport default StackedBarLayer;\r\nregisterPlotType('stackedBar', StackedBarLayer);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-bar\\layer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\plots\\stacked-bar\\layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseBarLayer from '../bar/layer';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\nvar StackedBarLayer = /** @class */ (function (_super) {\n    __extends(StackedBarLayer, _super);\n    function StackedBarLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'stackedBar';\n        return _this;\n    }\n    StackedBarLayer.getDefaultOptions = function () {\n        return deepMix({}, _super.getDefaultOptions.call(this), {\n            xAxis: {\n                visible: true,\n                autoRotateTitle: false,\n                grid: {\n                    visible: true,\n                },\n                line: {\n                    visible: false,\n                },\n                tickLine: {\n                    visible: true,\n                },\n                label: {\n                    visible: true,\n                    autoRotate: true,\n                    autoHide: true,\n                },\n                title: {\n                    visible: true,\n                    spacing: 12,\n                },\n            },\n            yAxis: {\n                visible: true,\n                autoRotateTitle: true,\n                grid: {\n                    visible: false,\n                },\n                line: {\n                    visible: false,\n                },\n                tickLine: {\n                    visible: false,\n                },\n                label: {\n                    visible: true,\n                    autoRotate: true,\n                    autoHide: true,\n                },\n                title: {\n                    visible: false,\n                    spacing: 12,\n                },\n            },\n            legend: {\n                visible: true,\n                position: 'top-left',\n                offsetY: 0,\n            },\n        });\n    };\n    StackedBarLayer.prototype.getColorScale = function () {\n        var stackField = this.options.stackField;\n        return this.view.getScaleByField(stackField);\n    };\n    StackedBarLayer.prototype.adjustBar = function (bar) {\n        bar.adjust = [\n            {\n                type: 'stack',\n            },\n        ];\n    };\n    StackedBarLayer.prototype.renderLabel = function () {\n        var scales = this.config.scales;\n        var _a = this.options, label = _a.label, xField = _a.xField;\n        var scale = scales[xField];\n        if (label === null || label === void 0 ? void 0 : label.visible) {\n            var geometry = getGeometryByType(this.view, 'interval');\n            this.doRenderLabel(geometry, __assign({ type: 'stacked-bar', formatter: scale.formatter && (function (value) { return scale.formatter(value); }) }, this.options.label));\n        }\n    };\n    StackedBarLayer.prototype.geometryTooltip = function () {\n        this.bar.tooltip = {};\n        var tooltipOptions = this.options.tooltip;\n        if (tooltipOptions.fields) {\n            this.bar.tooltip.fields = tooltipOptions.fields;\n        }\n        if (tooltipOptions.formatter) {\n            this.bar.tooltip.callback = tooltipOptions.formatter;\n            if (!tooltipOptions.fields) {\n                this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n            }\n        }\n    };\n    return StackedBarLayer;\n}(BaseBarLayer));\nexport default StackedBarLayer;\nregisterPlotType('stackedBar', StackedBarLayer);\n//# sourceMappingURL=layer.js.map"]}]}