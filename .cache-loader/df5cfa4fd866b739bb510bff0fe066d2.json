{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile\\core.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile\\core.js","mtime":1510870990000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["'use strict';\r\nvar path = require('path');\r\nvar replace = require('replace-ext');\r\nvar buffer = require('is-buffer');\r\nmodule.exports = VFile;\r\nvar own = {}.hasOwnProperty;\r\nvar proto = VFile.prototype;\r\nproto.toString = toString;\r\nvar order = [\r\n    'history',\r\n    'path',\r\n    'basename',\r\n    'stem',\r\n    'extname',\r\n    'dirname'\r\n];\r\nfunction VFile(options) {\r\n    var prop;\r\n    var index;\r\n    var length;\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n    else if (typeof options === 'string' || buffer(options)) {\r\n        options = { contents: options };\r\n    }\r\n    else if ('message' in options && 'messages' in options) {\r\n        return options;\r\n    }\r\n    if (!(this instanceof VFile)) {\r\n        return new VFile(options);\r\n    }\r\n    this.data = {};\r\n    this.messages = [];\r\n    this.history = [];\r\n    this.cwd = process.cwd();\r\n    index = -1;\r\n    length = order.length;\r\n    while (++index < length) {\r\n        prop = order[index];\r\n        if (own.call(options, prop)) {\r\n            this[prop] = options[prop];\r\n        }\r\n    }\r\n    for (prop in options) {\r\n        if (order.indexOf(prop) === -1) {\r\n            this[prop] = options[prop];\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(proto, 'path', {\r\n    get: function () {\r\n        return this.history[this.history.length - 1];\r\n    },\r\n    set: function (path) {\r\n        assertNonEmpty(path, 'path');\r\n        if (path !== this.path) {\r\n            this.history.push(path);\r\n        }\r\n    }\r\n});\r\nObject.defineProperty(proto, 'dirname', {\r\n    get: function () {\r\n        return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\r\n    },\r\n    set: function (dirname) {\r\n        assertPath(this.path, 'dirname');\r\n        this.path = path.join(dirname || '', this.basename);\r\n    }\r\n});\r\nObject.defineProperty(proto, 'basename', {\r\n    get: function () {\r\n        return typeof this.path === 'string' ? path.basename(this.path) : undefined;\r\n    },\r\n    set: function (basename) {\r\n        assertNonEmpty(basename, 'basename');\r\n        assertPart(basename, 'basename');\r\n        this.path = path.join(this.dirname || '', basename);\r\n    }\r\n});\r\nObject.defineProperty(proto, 'extname', {\r\n    get: function () {\r\n        return typeof this.path === 'string' ? path.extname(this.path) : undefined;\r\n    },\r\n    set: function (extname) {\r\n        var ext = extname || '';\r\n        assertPart(ext, 'extname');\r\n        assertPath(this.path, 'extname');\r\n        if (ext) {\r\n            if (ext.charAt(0) !== '.') {\r\n                throw new Error('`extname` must start with `.`');\r\n            }\r\n            if (ext.indexOf('.', 1) !== -1) {\r\n                throw new Error('`extname` cannot contain multiple dots');\r\n            }\r\n        }\r\n        this.path = replace(this.path, ext);\r\n    }\r\n});\r\nObject.defineProperty(proto, 'stem', {\r\n    get: function () {\r\n        return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\r\n    },\r\n    set: function (stem) {\r\n        assertNonEmpty(stem, 'stem');\r\n        assertPart(stem, 'stem');\r\n        this.path = path.join(this.dirname || '', stem + (this.extname || ''));\r\n    }\r\n});\r\nfunction toString(encoding) {\r\n    var value = this.contents || '';\r\n    return buffer(value) ? value.toString(encoding) : String(value);\r\n}\r\nfunction assertPart(part, name) {\r\n    if (part.indexOf(path.sep) !== -1) {\r\n        throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\r\n    }\r\n}\r\nfunction assertNonEmpty(part, name) {\r\n    if (!part) {\r\n        throw new Error('`' + name + '` cannot be empty');\r\n    }\r\n}\r\nfunction assertPath(path, name) {\r\n    if (!path) {\r\n        throw new Error('Setting `' + name + '` requires `path` to be set too');\r\n    }\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile\\core.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\vfile\\core.js"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nvar path = require('path');\nvar replace = require('replace-ext');\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\n\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n\nproto.toString = toString;\n\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\nvar order = [\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n];\n\n/* Construct a new file. */\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options};\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n\n  /* Set path related properties in the correct order. */\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  /* Set non-path related properties. */\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\n/* Access full path (`~/index.min.js`). */\nObject.defineProperty(proto, 'path', {\n  get: function () {\n    return this.history[this.history.length - 1];\n  },\n  set: function (path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n\n/* Access parent path (`~`). */\nObject.defineProperty(proto, 'dirname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function (dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n\n/* Access basename (`index.min.js`). */\nObject.defineProperty(proto, 'basename', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function (basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n\n/* Access extname (`.js`). */\nObject.defineProperty(proto, 'extname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function (extname) {\n    var ext = extname || '';\n\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n\n/* Access stem (`index.min`). */\nObject.defineProperty(proto, 'stem', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function (stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n\n/* Get the value of the file. */\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/* Assert that `part` is not empty. */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/* Assert `path` exists. */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n"]}]}