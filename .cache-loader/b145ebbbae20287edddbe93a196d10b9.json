{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\rank\\index.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\rank\\index.js","mtime":1517934108000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["\"use strict\";\r\nvar rankUtil = require(\"./util\"), longestPath = rankUtil.longestPath, feasibleTree = require(\"./feasible-tree\"), networkSimplex = require(\"./network-simplex\");\r\nmodule.exports = rank;\r\nfunction rank(g) {\r\n    switch (g.graph().ranker) {\r\n        case \"network-simplex\":\r\n            networkSimplexRanker(g);\r\n            break;\r\n        case \"tight-tree\":\r\n            tightTreeRanker(g);\r\n            break;\r\n        case \"longest-path\":\r\n            longestPathRanker(g);\r\n            break;\r\n        default: networkSimplexRanker(g);\r\n    }\r\n}\r\nvar longestPathRanker = longestPath;\r\nfunction tightTreeRanker(g) {\r\n    longestPath(g);\r\n    feasibleTree(g);\r\n}\r\nfunction networkSimplexRanker(g) {\r\n    networkSimplex(g);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\rank\\index.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\dagre\\lib\\rank\\index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,EAC5B,WAAW,GAAG,QAAQ,CAAC,WAAW,EAClC,YAAY,GAAG,OAAO,CAAC,iBAAiB,CAAC,EACzC,cAAc,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAElD,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAqBtB,SAAS,IAAI,CAAC,CAAC;IACb,QAAO,CAAC,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE;QACvB,KAAK,iBAAiB;YAAE,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM;QACvD,KAAK,YAAY;YAAE,eAAe,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM;QAC7C,KAAK,cAAc;YAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM;QACjD,OAAO,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;KAClC;AACH,CAAC;AAGD,IAAI,iBAAiB,GAAG,WAAW,CAAC;AAEpC,SAAS,eAAe,CAAC,CAAC;IACxB,WAAW,CAAC,CAAC,CAAC,CAAC;IACf,YAAY,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,SAAS,oBAAoB,CAAC,CAAC;IAC7B,cAAc,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC","sourcesContent":["\"use strict\";\n\nvar rankUtil = require(\"./util\"),\n    longestPath = rankUtil.longestPath,\n    feasibleTree = require(\"./feasible-tree\"),\n    networkSimplex = require(\"./network-simplex\");\n\nmodule.exports = rank;\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch(g.graph().ranker) {\n    case \"network-simplex\": networkSimplexRanker(g); break;\n    case \"tight-tree\": tightTreeRanker(g); break;\n    case \"longest-path\": longestPathRanker(g); break;\n    default: networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n"]}]}