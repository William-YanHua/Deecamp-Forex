{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\view.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\view.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    }\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar EventEmitter = require('wolfy87-eventemitter');\r\nvar assign = require('@antv/util/lib/mix');\r\nvar clone = require('@antv/util/lib/clone');\r\nvar cloneDeep = require('@antv/util/lib/clone');\r\nvar find = require('@antv/util/lib/array/find');\r\nvar forIn = require('@antv/util/lib/each');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar isPlainObject = require('@antv/util/lib/type/is-plain-object');\r\nvar isMatch = require('@antv/util/lib/object/is-match');\r\nvar isObject = require('@antv/util/lib/type/is-object');\r\nvar isString = require('@antv/util/lib/type/is-string');\r\nvar keys = require('@antv/util/lib/object/keys');\r\nvar pick = require('@antv/util/lib/pick');\r\nfunction cloneOptions(options) {\r\n    var result = {};\r\n    forIn(options, function (value, key) {\r\n        if (isObject(value) && value.isView) {\r\n            result[key] = value;\r\n        }\r\n        else if (isArray(value)) {\r\n            result[key] = value.concat([]);\r\n        }\r\n        else if (isPlainObject(value)) {\r\n            result[key] = clone(value);\r\n        }\r\n        else {\r\n            result[key] = value;\r\n        }\r\n    });\r\n    return result;\r\n}\r\nvar View = (function (_super) {\r\n    __extends(View, _super);\r\n    function View(dataSet, options) {\r\n        var _this = _super.call(this) || this;\r\n        var me = _this;\r\n        options = options || {};\r\n        dataSet = dataSet || {};\r\n        if (!dataSet.isDataSet) {\r\n            options = dataSet;\r\n            dataSet = null;\r\n        }\r\n        assign(me, {\r\n            dataSet: dataSet,\r\n            loose: !dataSet,\r\n            dataType: 'table',\r\n            isView: true,\r\n            isDataView: true,\r\n            origin: [],\r\n            rows: [],\r\n            transforms: [],\r\n            watchingStates: null\r\n        }, options);\r\n        if (!me.loose) {\r\n            var watchingStates_1 = me.watchingStates;\r\n            dataSet.on('statechange', function (name) {\r\n                if (isArray(watchingStates_1)) {\r\n                    if (watchingStates_1.indexOf(name) > -1) {\r\n                        me._reExecute();\r\n                    }\r\n                }\r\n                else {\r\n                    me._reExecute();\r\n                }\r\n            });\r\n        }\r\n        return _this;\r\n    }\r\n    View.prototype._parseStateExpression = function (expr) {\r\n        var dataSet = this.dataSet;\r\n        var matched = /^\\$state\\.(\\w+)/.exec(expr);\r\n        if (matched) {\r\n            return dataSet.state[matched[1]];\r\n        }\r\n        return expr;\r\n    };\r\n    View.prototype._preparseOptions = function (options) {\r\n        var me = this;\r\n        var optionsCloned = cloneOptions(options);\r\n        if (me.loose) {\r\n            return optionsCloned;\r\n        }\r\n        forIn(optionsCloned, function (value, key) {\r\n            if (isString(value) && /^\\$state\\./.test(value)) {\r\n                optionsCloned[key] = me._parseStateExpression(value);\r\n            }\r\n        });\r\n        return optionsCloned;\r\n    };\r\n    View.prototype._prepareSource = function (source, options) {\r\n        var me = this;\r\n        var DataSet = View.DataSet;\r\n        me._source = {\r\n            source: source,\r\n            options: options\r\n        };\r\n        if (!options) {\r\n            if (source instanceof View || isString(source)) {\r\n                me.origin = DataSet.getConnector('default')(source, me.dataSet);\r\n            }\r\n            else if (isArray(source)) {\r\n                me.origin = source;\r\n            }\r\n            else if (isObject(source) && source.type) {\r\n                options = me._preparseOptions(source);\r\n                me.origin = DataSet.getConnector(options.type)(options, me);\r\n            }\r\n            else {\r\n                throw new TypeError('Invalid source');\r\n            }\r\n        }\r\n        else {\r\n            options = me._preparseOptions(options);\r\n            me.origin = DataSet.getConnector(options.type)(source, options, me);\r\n        }\r\n        me.rows = cloneDeep(me.origin);\r\n        return me;\r\n    };\r\n    View.prototype.source = function (source, options) {\r\n        var me = this;\r\n        me._prepareSource(source, options);\r\n        me._reExecuteTransforms();\r\n        me.trigger('change');\r\n        return me;\r\n    };\r\n    View.prototype.transform = function (options) {\r\n        if (options === void 0) { options = {}; }\r\n        var me = this;\r\n        me.transforms.push(options);\r\n        me._executeTransform(options);\r\n        return me;\r\n    };\r\n    View.prototype._executeTransform = function (options) {\r\n        var me = this;\r\n        options = me._preparseOptions(options);\r\n        var transform = View.DataSet.getTransform(options.type);\r\n        transform(me, options);\r\n    };\r\n    View.prototype._reExecuteTransforms = function () {\r\n        var me = this;\r\n        me.transforms.forEach(function (options) {\r\n            me._executeTransform(options);\r\n        });\r\n    };\r\n    View.prototype.addRow = function (row) {\r\n        this.rows.push(row);\r\n    };\r\n    View.prototype.removeRow = function (index) {\r\n        this.rows.splice(index, 1);\r\n    };\r\n    View.prototype.updateRow = function (index, newRow) {\r\n        assign(this.rows[index], newRow);\r\n    };\r\n    View.prototype.findRows = function (query) {\r\n        return this.rows.filter(function (row) { return isMatch(row, query); });\r\n    };\r\n    View.prototype.findRow = function (query) {\r\n        return find(this.rows, query);\r\n    };\r\n    View.prototype.getColumnNames = function () {\r\n        var firstRow = this.rows[0];\r\n        if (firstRow) {\r\n            return keys(firstRow);\r\n        }\r\n        return [];\r\n    };\r\n    View.prototype.getColumnName = function (index) {\r\n        return this.getColumnNames()[index];\r\n    };\r\n    View.prototype.getColumnIndex = function (columnName) {\r\n        var columnNames = this.getColumnNames();\r\n        return columnNames.indexOf(columnName);\r\n    };\r\n    View.prototype.getColumn = function (columnName) {\r\n        return this.rows.map(function (row) { return row[columnName]; });\r\n    };\r\n    View.prototype.getColumnData = function (columnName) {\r\n        return this.getColumn(columnName);\r\n    };\r\n    View.prototype.getSubset = function (startRowIndex, endRowIndex, columnNames) {\r\n        var subset = [];\r\n        for (var i = startRowIndex; i <= endRowIndex; i++) {\r\n            subset.push(pick(this.rows[i], columnNames));\r\n        }\r\n        return subset;\r\n    };\r\n    View.prototype.toString = function (prettyPrint) {\r\n        var me = this;\r\n        if (prettyPrint) {\r\n            return JSON.stringify(me.rows, null, 2);\r\n        }\r\n        return JSON.stringify(me.rows);\r\n    };\r\n    View.prototype._reExecute = function () {\r\n        var me = this;\r\n        var _a = me._source, source = _a.source, options = _a.options;\r\n        me._prepareSource(source, options);\r\n        me._reExecuteTransforms();\r\n        me.trigger('change');\r\n    };\r\n    return View;\r\n}(EventEmitter));\r\nmodule.exports = View;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\view.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\view.js"],"names":[],"mappings":"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","sourcesContent":["const EventEmitter = require('wolfy87-eventemitter');\nconst assign = require('@antv/util/lib/mix');\nconst clone = require('@antv/util/lib/clone');\nconst cloneDeep = require('@antv/util/lib/clone');\nconst find = require('@antv/util/lib/array/find');\nconst forIn = require('@antv/util/lib/each');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst isPlainObject = require('@antv/util/lib/type/is-plain-object');\nconst isMatch = require('@antv/util/lib/object/is-match');\nconst isObject = require('@antv/util/lib/type/is-object');\nconst isString = require('@antv/util/lib/type/is-string');\nconst keys = require('@antv/util/lib/object/keys');\nconst pick = require('@antv/util/lib/pick');\n\nfunction cloneOptions(options) {\n  const result = {};\n  forIn(options, (value, key) => {\n    if (isObject(value) && value.isView) {\n      result[key] = value;\n    } else if (isArray(value)) {\n      result[key] = value.concat([]);\n    } else if (isPlainObject(value)) {\n      result[key] = clone(value);\n    } else {\n      result[key] = value;\n    }\n  });\n  return result;\n}\n\nclass View extends EventEmitter {\n  // constructor\n  constructor(dataSet, options) {\n    super();\n    const me = this;\n    options = options || {};\n    dataSet = dataSet || {};\n    if (!dataSet.isDataSet) {\n      options = dataSet;\n      dataSet = null;\n    }\n    assign(me, {\n      dataSet,\n      loose: !dataSet,\n      dataType: 'table',\n      isView: true,\n      isDataView: true, // alias\n      origin: [],\n      rows: [],\n      transforms: [],\n      watchingStates: null\n    }, options);\n    if (!me.loose) {\n      const { watchingStates } = me;\n      dataSet.on('statechange', name => {\n        if (isArray(watchingStates)) {\n          if (watchingStates.indexOf(name) > -1) {\n            me._reExecute();\n          }\n        } else {\n          me._reExecute();\n        }\n      });\n    }\n  }\n\n  _parseStateExpression(expr) {\n    const dataSet = this.dataSet;\n    const matched = /^\\$state\\.(\\w+)/.exec(expr);\n    if (matched) {\n      return dataSet.state[matched[1]];\n    }\n    return expr;\n  }\n\n  _preparseOptions(options) {\n    const me = this;\n    const optionsCloned = cloneOptions(options);\n    if (me.loose) {\n      return optionsCloned;\n    }\n    forIn(optionsCloned, (value, key) => {\n      if (isString(value) && /^\\$state\\./.test(value)) {\n        optionsCloned[key] = me._parseStateExpression(value);\n      }\n    });\n    return optionsCloned;\n  }\n\n  // connectors\n  _prepareSource(source, options) {\n    const me = this;\n    const DataSet = View.DataSet;\n    // warning me.origin is protected\n    me._source = {\n      source,\n      options\n    };\n    if (!options) {\n      if (source instanceof View || isString(source)) {\n        me.origin = DataSet.getConnector('default')(source, me.dataSet);\n      } else if (isArray(source)) {\n        // TODO branch: if source is like ['dataview1', 'dataview2']\n        me.origin = source;\n      } else if (isObject(source) && source.type) {\n        options = me._preparseOptions(source); // connector without source\n        me.origin = DataSet.getConnector(options.type)(options, me);\n      } else {\n        throw new TypeError('Invalid source');\n      }\n    } else {\n      options = me._preparseOptions(options);\n      me.origin = DataSet.getConnector(options.type)(source, options, me);\n    }\n    me.rows = cloneDeep(me.origin);\n    return me;\n  }\n\n  source(source, options) {\n    const me = this;\n    me._prepareSource(source, options);\n    me._reExecuteTransforms();\n    me.trigger('change');\n    return me;\n  }\n\n  // transforms\n  transform(options = {}) {\n    const me = this;\n    me.transforms.push(options);\n    me._executeTransform(options);\n    return me;\n  }\n  _executeTransform(options) {\n    const me = this;\n    options = me._preparseOptions(options);\n    const transform = View.DataSet.getTransform(options.type);\n    transform(me, options);\n  }\n  _reExecuteTransforms() {\n    const me = this;\n    me.transforms.forEach(options => {\n      me._executeTransform(options);\n    });\n  }\n\n  // rows\n  addRow(row) {\n    this.rows.push(row);\n  }\n  removeRow(index) {\n    this.rows.splice(index, 1);\n  }\n  updateRow(index, newRow) {\n    assign(this.rows[index], newRow);\n  }\n  findRows(query) {\n    return this.rows.filter(row => isMatch(row, query));\n  }\n  findRow(query) {\n    return find(this.rows, query);\n  }\n\n  // columns\n  getColumnNames() {\n    const firstRow = this.rows[0];\n    if (firstRow) {\n      return keys(firstRow);\n    }\n    return [];\n  }\n  getColumnName(index) {\n    return this.getColumnNames()[index];\n  }\n  getColumnIndex(columnName) {\n    const columnNames = this.getColumnNames();\n    return columnNames.indexOf(columnName);\n  }\n  getColumn(columnName) {\n    return this.rows.map(row => row[columnName]);\n  }\n  getColumnData(columnName) {\n    return this.getColumn(columnName);\n  }\n\n  // data process\n  getSubset(startRowIndex, endRowIndex, columnNames) {\n    const subset = [];\n    for (let i = startRowIndex; i <= endRowIndex; i++) {\n      subset.push(pick(this.rows[i], columnNames));\n    }\n    return subset;\n  }\n  toString(prettyPrint) {\n    const me = this;\n    if (prettyPrint) {\n      return JSON.stringify(me.rows, null, 2);\n    }\n    return JSON.stringify(me.rows);\n  }\n  _reExecute() {\n    const me = this;\n    const {\n      source,\n      options\n    } = me._source;\n    me._prepareSource(source, options);\n    me._reExecuteTransforms();\n    me.trigger('change');\n  }\n}\n\nmodule.exports = View;\n"]}]}