{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\baker.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\baker.js","mtime":1467599198000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\r\nimport { abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan } from \"./math\";\r\nvar sqrt8 = sqrt(8), phi0 = log(1 + sqrt2);\r\nexport function bakerRaw(lambda, phi) {\r\n    var phi0 = abs(phi);\r\n    return phi0 < quarterPi\r\n        ? [lambda, log(tan(quarterPi + phi / 2))]\r\n        : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\r\n}\r\nbakerRaw.invert = function (x, y) {\r\n    if ((y0 = abs(y)) < phi0)\r\n        return [x, 2 * atan(exp(y)) - halfPi];\r\n    var phi = quarterPi, i = 25, delta, y0;\r\n    do {\r\n        var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\r\n        phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\r\n    } while (abs(delta) > epsilon2 && --i > 0);\r\n    return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\r\n};\r\nexport default function () {\r\n    return projection(bakerRaw)\r\n        .scale(112.314);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\baker.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\baker.js"],"names":[],"mappings":"AAAA,OAAO,EAAC,aAAa,IAAI,UAAU,EAAC,MAAM,QAAQ,CAAC;AACnD,OAAO,EAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAC,MAAM,QAAQ,CAAC;AAE1G,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,EACf,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AAE1B,MAAM,UAAU,QAAQ,CAAC,MAAM,EAAE,GAAG;IAClC,IAAI,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;IACpB,OAAO,IAAI,GAAG,SAAS;QACnB,CAAC,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9H,CAAC;AAED,QAAQ,CAAC,MAAM,GAAG,UAAS,CAAC,EAAE,CAAC;IAC7B,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;QAAE,OAAO,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IAChE,IAAI,GAAG,GAAG,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC;IACvC,GAAG;QACD,IAAI,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,QAAQ,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACrD,GAAG,IAAI,KAAK,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,GAAG,QAAQ,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;KAClH,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,IAAI,EAAE,CAAC,GAAG,CAAC,EAAE;IAC3C,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO;IACZ,OAAO,UAAU,CAAC,QAAQ,CAAC;SACtB,KAAK,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n"]}]}