{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/projection.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/projection.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar assign = require('@antv/util/lib/mix');\nvar d3Geo = require('d3-geo');\nvar getPointAtLength = require('point-at-length');\nvar isArray = require('@antv/util/lib/type/is-array');\nvar registerTransform = require('../../data-set').registerTransform;\nvar getGeoProjection = require('../../util/get-geo-projection');\nvar geoPath = d3Geo.geoPath;\nvar DEFAULT_OPTIONS = {\n    as: ['_x', '_y', '_centroid_x', '_centroid_y']\n};\nfunction transform(dataView, options) {\n    if (dataView.dataType !== 'geo' && dataView.dataType !== 'geo-graticule') {\n        throw new TypeError('Invalid dataView: this transform is for Geo data only!');\n    }\n    options = assign({}, DEFAULT_OPTIONS, options);\n    var projection = options.projection;\n    if (!projection) {\n        throw new TypeError('Invalid projection!');\n    }\n    projection = getGeoProjection(projection);\n    var geoPathGenerator = geoPath(projection);\n    var as = options.as;\n    if (!isArray(as) || as.length !== 4) {\n        throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ \"x\", \"y\", \"cX\", \"cY\" ])!');\n    }\n    dataView._projectedAs = as;\n    var _a = __read(as, 4), lonField = _a[0], latField = _a[1], centroidX = _a[2], centroidY = _a[3];\n    dataView.rows.forEach(function (row) {\n        row[lonField] = [];\n        row[latField] = [];\n        var pathData = geoPathGenerator(row);\n        if (pathData) {\n            var points = getPointAtLength(pathData);\n            points._path.forEach(function (point) {\n                row[lonField].push(point[1]);\n                row[latField].push(point[2]);\n            });\n            var centroid = geoPathGenerator.centroid(row);\n            row[centroidX] = centroid[0];\n            row[centroidY] = centroid[1];\n        }\n    });\n    dataView.rows = dataView.rows.filter(function (row) { return row[lonField].length !== 0; });\n}\nregisterTransform('geo.projection', transform);\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/projection.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/@antv/data-set/src/transform/geo/projection.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAC7C,IAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAChC,IAAM,gBAAgB,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACpD,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAEtD,IAAA,iBAAiB,GACf,OAAO,CAAC,gBAAgB,CAAC,kBADV,CACW;AAC9B,IAAM,gBAAgB,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAGhE,IAAA,OAAO,GACL,KAAK,QADA,CACC;AACV,IAAM,eAAe,GAAG;IAEtB,EAAE,EAAE,CAAE,IAAI,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,CAAE;CACjD,CAAC;AAEF,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAO;IAClC,IAAI,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,QAAQ,CAAC,QAAQ,KAAK,eAAe,EAAE;QACxE,MAAM,IAAI,SAAS,CAAC,wDAAwD,CAAC,CAAC;KAC/E;IACD,OAAO,GAAG,MAAM,CAAC,EAAE,EAAE,eAAe,EAAE,OAAO,CAAC,CAAC;IAC/C,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACpC,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,SAAS,CAAC,qBAAqB,CAAC,CAAC;KAC5C;IACD,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAM,gBAAgB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;IAC7C,IAAM,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;QACnC,MAAM,IAAI,SAAS,CAAC,iFAAiF,CAAC,CAAC;KACxG;IACD,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC;IACrB,IAAA,KAAA,OAA+C,EAAE,IAAA,EAA/C,QAAQ,QAAA,EAAE,QAAQ,QAAA,EAAE,SAAS,QAAA,EAAE,SAAS,QAAO,CAAC;IACxD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACvB,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnB,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;QACnB,IAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QACvC,IAAI,QAAQ,EAAE;YAEZ,IAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,KAAK;gBACxB,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YACH,IAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YAChD,GAAG,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7B,GAAG,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;SAC9B;IACH,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,KAAK,CAAC,EAA1B,CAA0B,CAAC,CAAC;AAC1E,CAAC;AAED,iBAAiB,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const assign = require('@antv/util/lib/mix');\nconst d3Geo = require('d3-geo');\nconst getPointAtLength = require('point-at-length');\nconst isArray = require('@antv/util/lib/type/is-array');\nconst {\n  registerTransform\n} = require('../../data-set');\nconst getGeoProjection = require('../../util/get-geo-projection');\n\nconst {\n  geoPath\n} = d3Geo;\nconst DEFAULT_OPTIONS = {\n  // projection: '', // default to null\n  as: [ '_x', '_y', '_centroid_x', '_centroid_y' ]\n};\n\nfunction transform(dataView, options) {\n  if (dataView.dataType !== 'geo' && dataView.dataType !== 'geo-graticule') {\n    throw new TypeError('Invalid dataView: this transform is for Geo data only!');\n  }\n  options = assign({}, DEFAULT_OPTIONS, options);\n  let projection = options.projection;\n  if (!projection) {\n    throw new TypeError('Invalid projection!');\n  }\n  projection = getGeoProjection(projection);\n  const geoPathGenerator = geoPath(projection);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 4) {\n    throw new TypeError('Invalid as: it must be an array with 4 strings (e.g. [ \"x\", \"y\", \"cX\", \"cY\" ])!');\n  }\n  dataView._projectedAs = as;\n  const [ lonField, latField, centroidX, centroidY ] = as;\n  dataView.rows.forEach(row => {\n    row[lonField] = [];\n    row[latField] = [];\n    const pathData = geoPathGenerator(row);\n    if (pathData) {\n      // TODO projection returns null\n      const points = getPointAtLength(pathData);\n      points._path.forEach(point => {\n        row[lonField].push(point[1]);\n        row[latField].push(point[2]);\n      });\n      const centroid = geoPathGenerator.centroid(row);\n      row[centroidX] = centroid[0];\n      row[centroidY] = centroid[1];\n    }\n  });\n  dataView.rows = dataView.rows.filter(row => row[lonField].length !== 0);\n}\n\nregisterTransform('geo.projection', transform);\n"]}]}