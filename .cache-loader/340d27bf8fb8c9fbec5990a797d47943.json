{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\guide.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\guide.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { each, uniq, keys, isFunction, isString, isArray, has, get, isObject } from '@antv/util';\r\nimport ElementParser from '../base';\r\nfunction getValuesByField(field, data) {\r\n    var values = [];\r\n    each(data, function (d) {\r\n        var v = d[field];\r\n        values.push(v);\r\n    });\r\n    return uniq(values);\r\n}\r\nvar COLOR_MAPPER = ['seriesField', 'stackField'];\r\nvar GuidePointParser = (function (_super) {\r\n    __extends(GuidePointParser, _super);\r\n    function GuidePointParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    GuidePointParser.prototype.init = function () {\r\n        var props = this.plot.options;\r\n        this.style = props.point.style;\r\n        if (!props.xField || !props.yField) {\r\n            return;\r\n        }\r\n        this.config = {\r\n            type: 'point',\r\n            position: {\r\n                fields: [props.xField, props.yField],\r\n            },\r\n            tooltip: false,\r\n        };\r\n        this.parseColor();\r\n        if (this._needParseAttribute('size')) {\r\n            this.parseSize();\r\n        }\r\n        if (props.point.shape) {\r\n            this.parseShape(props.point.shape);\r\n        }\r\n        if (props.point.style) {\r\n            this.parseStyle();\r\n        }\r\n    };\r\n    GuidePointParser.prototype.parseColor = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        var mappingField = this._getColorMappingField(props);\r\n        if (mappingField) {\r\n            this._parseColorByField(props, config, mappingField);\r\n        }\r\n        else {\r\n            if (props.point && props.point.color) {\r\n                config.values = [props.point.color];\r\n            }\r\n            else if (props.color) {\r\n                this._parseColor(props, config);\r\n            }\r\n            else {\r\n                var theme = this.plot.getTheme();\r\n                config.values = [theme.defaultColor];\r\n            }\r\n        }\r\n        if (keys(config).length > 0) {\r\n            this.config.color = config;\r\n        }\r\n    };\r\n    GuidePointParser.prototype.parseSize = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        config.values = [props.point.size];\r\n        this.config.size = config;\r\n    };\r\n    GuidePointParser.prototype.parseShape = function (shapeCfg) {\r\n        var config = {};\r\n        if (isString(shapeCfg)) {\r\n            config.values = [shapeCfg];\r\n        }\r\n        else if (isObject(shapeCfg)) {\r\n            config.fields = shapeCfg.fields;\r\n            config.callback = shapeCfg.callback;\r\n        }\r\n        this.config.shape = config;\r\n    };\r\n    GuidePointParser.prototype.parseStyle = function () {\r\n        var props = this.plot.options;\r\n        var styleProps = props.point && props.point.style;\r\n        var config = {\r\n            fields: null,\r\n            callback: null,\r\n            cfg: null,\r\n        };\r\n        var field = this._getColorMappingField(props);\r\n        if (isFunction(styleProps)) {\r\n            config.fields = [props.xField, props.yField];\r\n            config.callback = styleProps;\r\n            if (field) {\r\n                config.fields.unshift(field);\r\n            }\r\n        }\r\n        else {\r\n            config.cfg = styleProps;\r\n        }\r\n        this.config.style = config;\r\n    };\r\n    GuidePointParser.prototype._parseColorByField = function (props, config, field) {\r\n        config.fields = [field];\r\n        if (props.point.color) {\r\n            var count = getValuesByField(field, props.data).length;\r\n            var values = [];\r\n            for (var i = 0; i < count; i++) {\r\n                values.push(props.point.color);\r\n            }\r\n            config.values = values;\r\n        }\r\n        else if (props.color) {\r\n            this._parseColor(props, config);\r\n        }\r\n    };\r\n    GuidePointParser.prototype._parseColor = function (props, config) {\r\n        var field = this._getColorMappingField(props);\r\n        if (isString(props.color)) {\r\n            config.values = [props.color];\r\n        }\r\n        else if (isFunction(props.color)) {\r\n            config.callback = props.color;\r\n        }\r\n        else if (isArray(props.color)) {\r\n            if (field) {\r\n                config.values = props.color;\r\n            }\r\n            else {\r\n                if (props.color.length > 0) {\r\n                    config.values = [props.color[0]];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    GuidePointParser.prototype._needParseAttribute = function (attr) {\r\n        var props = this.plot.options;\r\n        var condition = props.point && has(props.point, attr);\r\n        return condition;\r\n    };\r\n    GuidePointParser.prototype._getColorMappingField = function (props) {\r\n        for (var _i = 0, COLOR_MAPPER_1 = COLOR_MAPPER; _i < COLOR_MAPPER_1.length; _i++) {\r\n            var m = COLOR_MAPPER_1[_i];\r\n            if (get(props, m)) {\r\n                return [props[m]];\r\n            }\r\n        }\r\n    };\r\n    return GuidePointParser;\r\n}(ElementParser));\r\nexport default GuidePointParser;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\guide.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\guide.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { each, uniq, keys, isFunction, isString, isArray, has, get, isObject } from '@antv/util';\nimport ElementParser from '../base';\nfunction getValuesByField(field, data) {\n    var values = [];\n    each(data, function (d) {\n        var v = d[field];\n        values.push(v);\n    });\n    return uniq(values);\n}\nvar COLOR_MAPPER = ['seriesField', 'stackField'];\nvar GuidePointParser = /** @class */ (function (_super) {\n    __extends(GuidePointParser, _super);\n    function GuidePointParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GuidePointParser.prototype.init = function () {\n        var props = this.plot.options;\n        this.style = props.point.style;\n        if (!props.xField || !props.yField) {\n            return;\n        }\n        this.config = {\n            type: 'point',\n            position: {\n                fields: [props.xField, props.yField],\n            },\n            tooltip: false,\n        };\n        // if (this._needParseAttribute('color')) {\n        this.parseColor();\n        // }\n        if (this._needParseAttribute('size')) {\n            this.parseSize();\n        }\n        if (props.point.shape) {\n            this.parseShape(props.point.shape);\n        }\n        if (props.point.style) {\n            this.parseStyle();\n        }\n    };\n    GuidePointParser.prototype.parseColor = function () {\n        var props = this.plot.options;\n        var config = {};\n        var mappingField = this._getColorMappingField(props);\n        if (mappingField) {\n            this._parseColorByField(props, config, mappingField);\n        }\n        else {\n            if (props.point && props.point.color) {\n                config.values = [props.point.color];\n            }\n            else if (props.color) {\n                this._parseColor(props, config);\n            }\n            else {\n                var theme = this.plot.getTheme();\n                config.values = [theme.defaultColor];\n            }\n        }\n        if (keys(config).length > 0) {\n            this.config.color = config;\n        }\n    };\n    GuidePointParser.prototype.parseSize = function () {\n        var props = this.plot.options;\n        var config = {};\n        config.values = [props.point.size];\n        this.config.size = config;\n    };\n    GuidePointParser.prototype.parseShape = function (shapeCfg) {\n        var config = {};\n        if (isString(shapeCfg)) {\n            config.values = [shapeCfg];\n        }\n        else if (isObject(shapeCfg)) {\n            config.fields = shapeCfg.fields;\n            config.callback = shapeCfg.callback;\n        }\n        this.config.shape = config;\n    };\n    GuidePointParser.prototype.parseStyle = function () {\n        var props = this.plot.options;\n        var styleProps = props.point && props.point.style;\n        var config = {\n            fields: null,\n            callback: null,\n            cfg: null,\n        };\n        var field = this._getColorMappingField(props);\n        if (isFunction(styleProps)) {\n            config.fields = [props.xField, props.yField];\n            config.callback = styleProps;\n            if (field) {\n                config.fields.unshift(field);\n            }\n        }\n        else {\n            config.cfg = styleProps;\n        }\n        this.config.style = config;\n    };\n    GuidePointParser.prototype._parseColorByField = function (props, config, field) {\n        config.fields = [field];\n        if (props.point.color) {\n            var count = getValuesByField(field, props.data).length;\n            var values = [];\n            for (var i = 0; i < count; i++) {\n                values.push(props.point.color);\n            }\n            config.values = values;\n        }\n        else if (props.color) {\n            this._parseColor(props, config);\n        }\n    };\n    GuidePointParser.prototype._parseColor = function (props, config) {\n        var field = this._getColorMappingField(props);\n        if (isString(props.color)) {\n            config.values = [props.color];\n        }\n        else if (isFunction(props.color)) {\n            config.callback = props.color;\n        }\n        else if (isArray(props.color)) {\n            if (field) {\n                config.values = props.color;\n            }\n            else {\n                if (props.color.length > 0) {\n                    config.values = [props.color[0]];\n                }\n            }\n        }\n    };\n    GuidePointParser.prototype._needParseAttribute = function (attr) {\n        var props = this.plot.options;\n        var condition = props.point && has(props.point, attr);\n        return condition;\n        // const condition = !this.style || this.style[attr];\n        // return condition;\n    };\n    GuidePointParser.prototype._getColorMappingField = function (props) {\n        for (var _i = 0, COLOR_MAPPER_1 = COLOR_MAPPER; _i < COLOR_MAPPER_1.length; _i++) {\n            var m = COLOR_MAPPER_1[_i];\n            if (get(props, m)) {\n                return [props[m]];\n            }\n        }\n    };\n    return GuidePointParser;\n}(ElementParser));\nexport default GuidePointParser;\n//# sourceMappingURL=guide.js.map"]}]}