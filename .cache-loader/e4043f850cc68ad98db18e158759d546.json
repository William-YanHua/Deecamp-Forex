{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\circle.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\circle.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\r\nimport { isArray, isFunction, isString, isEmpty, isNil } from '@antv/util';\r\nimport ElementParser from '../base';\r\nvar CircleParser = (function (_super) {\r\n    __extends(CircleParser, _super);\r\n    function CircleParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    CircleParser.prototype.init = function () {\r\n        var props = this.plot.options;\r\n        this.style = props.pointStyle;\r\n        if (!props.xField || !props.yField) {\r\n            return;\r\n        }\r\n        this.config = {\r\n            type: 'point',\r\n            position: {\r\n                fields: [props.xField, props.yField],\r\n            },\r\n        };\r\n        this.parseColor();\r\n        this.parseSize();\r\n        if (props.shape) {\r\n            this.parseShape(props.shape);\r\n        }\r\n        if (props.pointStyle) {\r\n            this.parseStyle();\r\n        }\r\n    };\r\n    CircleParser.prototype.parseColor = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        var colorField = props.colorField;\r\n        if (colorField) {\r\n            config.fields = isArray(colorField) ? colorField : [colorField];\r\n        }\r\n        if (props.color) {\r\n            this._parseColor(props, config);\r\n        }\r\n        if (!isEmpty(config)) {\r\n            this.config.color = config;\r\n        }\r\n    };\r\n    CircleParser.prototype.parseSize = function () {\r\n        var props = this.plot.options;\r\n        var config = {};\r\n        if (props.sizeField) {\r\n            config.fields = [props.sizeField];\r\n        }\r\n        if (props.pointSize) {\r\n            config.values = isArray(props.pointSize) ? props.pointSize : [props.pointSize];\r\n        }\r\n        this.config.size = config;\r\n    };\r\n    CircleParser.prototype.parseShape = function (shapeName) {\r\n        this.config.shape = shapeName;\r\n    };\r\n    CircleParser.prototype.parseStyle = function () {\r\n        var props = this.plot.options;\r\n        var styleProps = props.pointStyle;\r\n        var config = {\r\n            fields: null,\r\n            callback: null,\r\n            cfg: null,\r\n        };\r\n        var xField = props.xField, yField = props.yField, colorField = props.colorField;\r\n        if (isFunction(styleProps)) {\r\n            if (colorField) {\r\n                config.fields = isArray(colorField)\r\n                    ? [xField, yField, colorField].concat(colorField)\r\n                    : [xField, yField, colorField];\r\n            }\r\n            else {\r\n                config.fields = [xField, yField];\r\n            }\r\n            config.callback = styleProps;\r\n        }\r\n        else {\r\n            config.cfg = styleProps;\r\n            if (!isNil(styleProps.opacity)) {\r\n                config.cfg.fillOpacity = styleProps.opacity;\r\n            }\r\n        }\r\n        this.config.style = config;\r\n    };\r\n    CircleParser.prototype._parseColor = function (props, config) {\r\n        if (isString(props.color)) {\r\n            config.values = [props.color];\r\n        }\r\n        else if (isFunction(props.color)) {\r\n            config.callback = props.color;\r\n        }\r\n        else if (isArray(props.color)) {\r\n            config.values = props.color;\r\n        }\r\n    };\r\n    return CircleParser;\r\n}(ElementParser));\r\nexport default CircleParser;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\circle.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\geoms\\point\\circle.js"],"names":[],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { isArray, isFunction, isString, isEmpty, isNil } from '@antv/util';\nimport ElementParser from '../base';\nvar CircleParser = /** @class */ (function (_super) {\n    __extends(CircleParser, _super);\n    function CircleParser() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CircleParser.prototype.init = function () {\n        var props = this.plot.options;\n        this.style = props.pointStyle;\n        if (!props.xField || !props.yField) {\n            return;\n        }\n        this.config = {\n            type: 'point',\n            position: {\n                fields: [props.xField, props.yField],\n            },\n        };\n        this.parseColor();\n        this.parseSize();\n        if (props.shape) {\n            this.parseShape(props.shape);\n        }\n        if (props.pointStyle) {\n            this.parseStyle();\n        }\n    };\n    CircleParser.prototype.parseColor = function () {\n        var props = this.plot.options;\n        var config = {};\n        var colorField = props.colorField;\n        if (colorField) {\n            config.fields = isArray(colorField) ? colorField : [colorField];\n        }\n        if (props.color) {\n            this._parseColor(props, config);\n        }\n        if (!isEmpty(config)) {\n            this.config.color = config;\n        }\n    };\n    CircleParser.prototype.parseSize = function () {\n        var props = this.plot.options;\n        var config = {};\n        if (props.sizeField) {\n            config.fields = [props.sizeField];\n        }\n        if (props.pointSize) {\n            config.values = isArray(props.pointSize) ? props.pointSize : [props.pointSize];\n        }\n        this.config.size = config;\n    };\n    CircleParser.prototype.parseShape = function (shapeName) {\n        this.config.shape = shapeName;\n    };\n    CircleParser.prototype.parseStyle = function () {\n        var props = this.plot.options;\n        var styleProps = props.pointStyle;\n        var config = {\n            fields: null,\n            callback: null,\n            cfg: null,\n        };\n        var xField = props.xField, yField = props.yField, colorField = props.colorField;\n        if (isFunction(styleProps)) {\n            if (colorField) {\n                config.fields = isArray(colorField)\n                    ? [xField, yField, colorField].concat(colorField)\n                    : [xField, yField, colorField];\n            }\n            else {\n                config.fields = [xField, yField];\n            }\n            config.callback = styleProps;\n        }\n        else {\n            config.cfg = styleProps;\n            // opacity 与 fillOpacity 兼容\n            if (!isNil(styleProps.opacity)) {\n                config.cfg.fillOpacity = styleProps.opacity;\n            }\n        }\n        this.config.style = config;\n    };\n    CircleParser.prototype._parseColor = function (props, config) {\n        if (isString(props.color)) {\n            config.values = [props.color];\n        }\n        else if (isFunction(props.color)) {\n            config.callback = props.color;\n        }\n        else if (isArray(props.color)) {\n            config.values = props.color;\n        }\n    };\n    return CircleParser;\n}(ElementParser));\nexport default CircleParser;\n//# sourceMappingURL=circle.js.map"]}]}