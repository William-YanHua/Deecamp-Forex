{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\sort-by.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\sort-by.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var isArray = require('@antv/util/lib/type/is-array');\r\nvar sortBy = require('@antv/util/lib/array/sort-by');\r\nvar registerTransform = require('../data-set').registerTransform;\r\nvar getFields = require('../util/option-parser').getFields;\r\nvar VALID_ORDERS = ['ASC', 'DESC'];\r\nfunction transform(dataView, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var fields = getFields(options, [dataView.getColumnName(0)]);\r\n    if (!isArray(fields)) {\r\n        throw new TypeError('Invalid fields: must be an array with strings!');\r\n    }\r\n    dataView.rows = sortBy(dataView.rows, fields);\r\n    var order = options.order;\r\n    if (order && VALID_ORDERS.indexOf(order) === -1) {\r\n        throw new TypeError(\"Invalid order: \" + order + \" must be one of \" + VALID_ORDERS.join(', '));\r\n    }\r\n    else if (order === 'DESC') {\r\n        dataView.rows.reverse();\r\n    }\r\n}\r\nregisterTransform('sort-by', transform);\r\nregisterTransform('sortBy', transform);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\sort-by.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\data-set\\src\\transform\\sort-by.js"],"names":[],"mappings":"AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AACxD,IAAM,MAAM,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;AAErD,IAAA,4DAAiB,CACQ;AAEzB,IAAA,sDAAS,CAC0B;AAUrC,IAAM,YAAY,GAAG,CAAE,KAAK,EAAE,MAAM,CAAE,CAAC;AAEvC,SAAS,SAAS,CAAC,QAAQ,EAAE,OAAY;IAAZ,wBAAA,EAAA,YAAY;IACvC,IAAM,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,CAAE,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAE,CAAC,CAAC;IACjE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACpB,MAAM,IAAI,SAAS,CAAC,gDAAgD,CAAC,CAAC;KACvE;IACD,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9C,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC5B,IAAI,KAAK,IAAI,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/C,MAAM,IAAI,SAAS,CAAC,oBAAkB,KAAK,wBAAmB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAG,CAAC,CAAC;KAC1F;SAAM,IAAI,KAAK,KAAK,MAAM,EAAE;QAC3B,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;KACzB;AACH,CAAC;AACD,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACxC,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC","sourcesContent":["const isArray = require('@antv/util/lib/type/is-array');\nconst sortBy = require('@antv/util/lib/array/sort-by');\nconst {\n  registerTransform\n} = require('../data-set');\nconst {\n  getFields\n} = require('../util/option-parser');\n\n/*\n * options: {\n *   type: 'sort-by',\n *   fields: [],\n *   order: 'ASC' // 'DESC'\n * }\n */\n\nconst VALID_ORDERS = [ 'ASC', 'DESC' ];\n\nfunction transform(dataView, options = {}) {\n  const fields = getFields(options, [ dataView.getColumnName(0) ]);\n  if (!isArray(fields)) {\n    throw new TypeError('Invalid fields: must be an array with strings!');\n  }\n  dataView.rows = sortBy(dataView.rows, fields);\n  const order = options.order;\n  if (order && VALID_ORDERS.indexOf(order) === -1) {\n    throw new TypeError(`Invalid order: ${order} must be one of ${VALID_ORDERS.join(', ')}`);\n  } else if (order === 'DESC') {\n    dataView.rows.reverse();\n  }\n}\nregisterTransform('sort-by', transform);\nregisterTransform('sortBy', transform);\n"]}]}