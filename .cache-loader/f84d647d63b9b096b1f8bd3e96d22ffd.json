{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\src\\app\\internationalization\\definitions\\index.ts","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\src\\app\\internationalization\\definitions\\index.ts","mtime":1596379644479},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport config from \"../../../assets/i18n/index.json\";\r\nexport var LANGUAGE_CONFIG_TOKEN = Symbol(\"LanguageConfig\");\r\nexport var languageConfig = {\r\n    languages: config.map(function (x) { return (__assign({}, x, { getDefinition: import(\"../../../assets/i18n/\" + x.definitionFileName) })); }),\r\n};\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\src\\app\\internationalization\\definitions\\index.ts","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\src\\app\\internationalization\\definitions\\index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,MAAM,MAAM,iCAAiC,CAAC;AAMrD,MAAM,CAAC,IAAM,qBAAqB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAY9D,MAAM,CAAC,IAAM,cAAc,GAAG;IAC5B,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,cACxB,CAAC,IACJ,aAAa,EAAE,MAAM,CAAC,0BAAwB,CAAC,CAAC,kBAAoB,CAAC,IACrE,EAH2B,CAG3B,CAAe;CACA,CAAC","sourcesContent":["import config from \"../../../assets/i18n/index.json\";\r\n\r\nexport type DeepPartial<T> = {\r\n  [key in keyof T]: DeepPartial<T[key]>\r\n};\r\n\r\nexport const LANGUAGE_CONFIG_TOKEN = Symbol(\"LanguageConfig\");\r\n\r\nexport interface Language<T = Definition> {\r\n  id: string;\r\n  name: string;\r\n  acceptedNavigatorLanguages: string[];\r\n  getDefinition: Promise<T>;\r\n  fallback?: boolean;\r\n}\r\n\r\nexport interface KnownLanguages { languages: Language[]; }\r\n\r\nexport const languageConfig = {\r\n  languages: config.map((x) => ({\r\n    ...x,\r\n    getDefinition: import(`../../../assets/i18n/${x.definitionFileName}`),\r\n  })) as Language[],\r\n} as KnownLanguages;\r\n\r\nexport type Definition = typeof import (\"../../../assets/i18n/cn\").default;\r\n"]}]}