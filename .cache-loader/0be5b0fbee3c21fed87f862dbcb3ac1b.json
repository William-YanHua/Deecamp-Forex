{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\attr\\lib\\base.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\attr\\lib\\base.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["var isString = require('@antv/util/lib/type/is-string');\r\nvar isArray = require('@antv/util/lib/type/is-array');\r\nvar mix = require('@antv/util/lib/mix');\r\nvar each = require('@antv/util/lib/each');\r\nfunction toScaleString(scale, value) {\r\n    if (isString(value)) {\r\n        return value;\r\n    }\r\n    return scale.invert(scale.scale(value));\r\n}\r\nvar AttributeBase = function () {\r\n    function AttributeBase(cfg) {\r\n        this.type = 'base';\r\n        this.name = null;\r\n        this.method = null;\r\n        this.values = [];\r\n        this.scales = [];\r\n        this.linear = null;\r\n        mix(this, cfg);\r\n    }\r\n    var _proto = AttributeBase.prototype;\r\n    _proto._getAttrValue = function _getAttrValue(scale, value) {\r\n        var values = this.values;\r\n        if (scale.isCategory && !this.linear) {\r\n            var index = scale.translate(value);\r\n            return values[index % values.length];\r\n        }\r\n        var percent = scale.scale(value);\r\n        return this.getLinearValue(percent);\r\n    };\r\n    _proto.getLinearValue = function getLinearValue(percent) {\r\n        var values = this.values;\r\n        var steps = values.length - 1;\r\n        var step = Math.floor(steps * percent);\r\n        var leftPercent = steps * percent - step;\r\n        var start = values[step];\r\n        var end = step === steps ? start : values[step + 1];\r\n        var rstValue = start + (end - start) * leftPercent;\r\n        return rstValue;\r\n    };\r\n    _proto.callback = function callback(value) {\r\n        var self = this;\r\n        var scale = self.scales[0];\r\n        var rstValue = null;\r\n        if (scale.type === 'identity') {\r\n            rstValue = scale.value;\r\n        }\r\n        else {\r\n            rstValue = self._getAttrValue(scale, value);\r\n        }\r\n        return rstValue;\r\n    };\r\n    _proto.getNames = function getNames() {\r\n        var scales = this.scales;\r\n        var names = this.names;\r\n        var length = Math.min(scales.length, names.length);\r\n        var rst = [];\r\n        for (var i = 0; i < length; i++) {\r\n            rst.push(names[i]);\r\n        }\r\n        return rst;\r\n    };\r\n    _proto.getFields = function getFields() {\r\n        var scales = this.scales;\r\n        var rst = [];\r\n        each(scales, function (scale) {\r\n            rst.push(scale.field);\r\n        });\r\n        return rst;\r\n    };\r\n    _proto.getScale = function getScale(name) {\r\n        var scales = this.scales;\r\n        var names = this.names;\r\n        var index = names.indexOf(name);\r\n        return scales[index];\r\n    };\r\n    _proto.mapping = function mapping() {\r\n        var scales = this.scales;\r\n        var callback = this.callback;\r\n        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\r\n            params[_key] = arguments[_key];\r\n        }\r\n        var values = params;\r\n        if (callback) {\r\n            for (var i = 0, len = params.length; i < len; i++) {\r\n                params[i] = this._toOriginParam(params[i], scales[i]);\r\n            }\r\n            values = callback.apply(this, params);\r\n        }\r\n        values = [].concat(values);\r\n        return values;\r\n    };\r\n    _proto._toOriginParam = function _toOriginParam(param, scale) {\r\n        var rst = param;\r\n        if (!scale.isLinear) {\r\n            if (isArray(param)) {\r\n                rst = [];\r\n                for (var i = 0, len = param.length; i < len; i++) {\r\n                    rst.push(toScaleString(scale, param[i]));\r\n                }\r\n            }\r\n            else {\r\n                rst = toScaleString(scale, param);\r\n            }\r\n        }\r\n        return rst;\r\n    };\r\n    return AttributeBase;\r\n}();\r\nmodule.exports = AttributeBase;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\attr\\lib\\base.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2\\node_modules\\@antv\\attr\\lib\\base.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview the Attribute base class\n */\nvar isString = require('@antv/util/lib/type/is-string');\n\nvar isArray = require('@antv/util/lib/type/is-array');\n\nvar mix = require('@antv/util/lib/mix');\n\nvar each = require('@antv/util/lib/each');\n\nfunction toScaleString(scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n\n  return scale.invert(scale.scale(value));\n}\n/**\n * 所有视觉通道属性的基类\n * @class Attr\n */\n\n\nvar AttributeBase =\n/*#__PURE__*/\nfunction () {\n  function AttributeBase(cfg) {\n    /**\n     * 属性的类型\n     * @type {String}\n     */\n    this.type = 'base';\n    /**\n     * 属性的名称\n     * @type {String}\n     */\n\n    this.name = null;\n    /**\n     * 回调函数\n     * @type {Function}\n     */\n\n    this.method = null;\n    /**\n     * 备选的值数组\n     * @type {Array}\n     */\n\n    this.values = [];\n    /**\n     * 属性内部的度量\n     * @type {Array}\n     */\n\n    this.scales = [];\n    /**\n     * 是否通过线性取值, 如果未指定，则根据数值的类型判定\n     * @type {Boolean}\n     */\n\n    this.linear = null;\n    mix(this, cfg);\n  } // 获取属性值，将值映射到视觉通道\n\n\n  var _proto = AttributeBase.prototype;\n\n  _proto._getAttrValue = function _getAttrValue(scale, value) {\n    var values = this.values;\n\n    if (scale.isCategory && !this.linear) {\n      var index = scale.translate(value);\n      return values[index % values.length];\n    }\n\n    var percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  };\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @protected\n   * @param  {Number} percent 百分比\n   * @return {*}  颜色值、形状、大小等\n   */\n\n\n  _proto.getLinearValue = function getLinearValue(percent) {\n    var values = this.values;\n    var steps = values.length - 1;\n    var step = Math.floor(steps * percent);\n    var leftPercent = steps * percent - step;\n    var start = values[step];\n    var end = step === steps ? start : values[step + 1];\n    var rstValue = start + (end - start) * leftPercent;\n    return rstValue;\n  };\n  /**\n   * 默认的回调函数\n   * @param {*} value 回调函数的值\n   * @type {Function}\n   * @return {Array} 返回映射后的值\n   */\n\n\n  _proto.callback = function callback(value) {\n    var self = this;\n    var scale = self.scales[0];\n    var rstValue = null;\n\n    if (scale.type === 'identity') {\n      rstValue = scale.value;\n    } else {\n      rstValue = self._getAttrValue(scale, value);\n    }\n\n    return rstValue;\n  };\n  /**\n   * 根据度量获取属性名\n   * @return {Array} dims of this Attribute\n   */\n\n\n  _proto.getNames = function getNames() {\n    var scales = this.scales;\n    var names = this.names;\n    var length = Math.min(scales.length, names.length);\n    var rst = [];\n\n    for (var i = 0; i < length; i++) {\n      rst.push(names[i]);\n    }\n\n    return rst;\n  };\n  /**\n   * 根据度量获取维度名\n   * @return {Array} dims of this Attribute\n   */\n\n\n  _proto.getFields = function getFields() {\n    var scales = this.scales;\n    var rst = [];\n    each(scales, function (scale) {\n      rst.push(scale.field);\n    });\n    return rst;\n  };\n  /**\n   * 根据名称获取度量\n   * @param  {String} name the name of scale\n   * @return {Scale} scale\n   */\n\n\n  _proto.getScale = function getScale(name) {\n    var scales = this.scales;\n    var names = this.names;\n    var index = names.indexOf(name);\n    return scales[index];\n  };\n  /**\n   * 映射数据\n   * @param {*} param1...paramn 多个数值\n   * @return {Array} 映射的值组成的数组\n   */\n\n\n  _proto.mapping = function mapping() {\n    var scales = this.scales;\n    var callback = this.callback;\n\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    var values = params;\n\n    if (callback) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        params[i] = this._toOriginParam(params[i], scales[i]);\n      }\n\n      values = callback.apply(this, params);\n    }\n\n    values = [].concat(values);\n    return values;\n  }; // 原始的参数\n\n\n  _proto._toOriginParam = function _toOriginParam(param, scale) {\n    var rst = param;\n\n    if (!scale.isLinear) {\n      if (isArray(param)) {\n        rst = [];\n\n        for (var i = 0, len = param.length; i < len; i++) {\n          rst.push(toScaleString(scale, param[i]));\n        }\n      } else {\n        rst = toScaleString(scale, param);\n      }\n    }\n\n    return rst;\n  };\n\n  return AttributeBase;\n}();\n\nmodule.exports = AttributeBase;"]}]}