{"remainingRequest":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js??ref--4-1!/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/interaction/brush.js","dependencies":[{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/interaction/brush.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _assertThisInitialized(self) { if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n} return self; }\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\nvar Util = require('../util');\nvar Interaction = require('./base');\nvar BRUSH_TYPES = ['X', 'Y', 'XY', 'POLYGON'];\nvar DEFAULT_TYPE = 'XY';\nvar Brush = function (_Interaction) {\n    _inheritsLoose(Brush, _Interaction);\n    var _proto = Brush.prototype;\n    _proto.getDefaultCfg = function getDefaultCfg() {\n        var cfg = _Interaction.prototype.getDefaultCfg.call(this);\n        return Util.mix({}, cfg, {\n            type: DEFAULT_TYPE,\n            startPoint: null,\n            brushing: false,\n            dragging: false,\n            brushShape: null,\n            container: null,\n            polygonPath: null,\n            style: {\n                fill: '#C5D4EB',\n                opacity: 0.3,\n                lineWidth: 1,\n                stroke: '#82A6DD'\n            },\n            draggable: false,\n            dragOffX: 0,\n            dragOffY: 0,\n            inPlot: true,\n            xField: null,\n            yField: null\n        });\n    };\n    function Brush(cfg, view) {\n        var _this;\n        _this = _Interaction.call(this, cfg, view) || this;\n        var me = _assertThisInitialized(_this);\n        me.filter = !me.draggable;\n        me.type = me.type.toUpperCase();\n        me.chart = view;\n        if (!BRUSH_TYPES.includes(me.type)) {\n            me.type = DEFAULT_TYPE;\n        }\n        var canvas = me.canvas;\n        if (canvas) {\n            var plotRange;\n            canvas.get('children').map(function (child) {\n                if (child.get('type') === 'plotBack') {\n                    plotRange = child.get('plotRange');\n                    return false;\n                }\n                return child;\n            });\n            me.plot = {\n                start: plotRange.bl,\n                end: plotRange.tr\n            };\n        }\n        if (view) {\n            var coord = view.get('coord');\n            me.plot = {\n                start: coord.start,\n                end: coord.end\n            };\n            view.on('afterrender', function () {\n                me.plot = {\n                    start: coord.start,\n                    end: coord.end\n                };\n            });\n            me.isTransposed = coord.isTransposed;\n            var xScales = view._getScales('x');\n            var yScales = view._getScales('y');\n            me.xScale = me.xField ? xScales[me.xField] : view.getXScale();\n            me.yScale = me.yField ? yScales[me.yField] : view.getYScales()[0];\n        }\n        return _this;\n    }\n    _proto.start = function start(ev) {\n        var me = this;\n        var canvas = me.canvas, type = me.type, brushShape = me.brushShape;\n        if (!type)\n            return;\n        if (me.brushing) {\n            me.end(ev);\n        }\n        var startPoint = {\n            x: ev.offsetX,\n            y: ev.offsetY\n        };\n        if (!startPoint.x)\n            return;\n        var isInPlot = me.plot && me.inPlot;\n        var canvasDOM = canvas.get('canvasDOM');\n        var pixelRatio = canvas.get('pixelRatio');\n        if (me.selection)\n            me.selection = null;\n        if (me.draggable && brushShape && !brushShape.get('destroyed')) {\n            if (brushShape.isHit(startPoint.x * pixelRatio, startPoint.y * pixelRatio)) {\n                canvasDOM.style.cursor = 'move';\n                me.selection = brushShape;\n                me.dragging = true;\n                if (type === 'X') {\n                    me.dragoffX = startPoint.x - brushShape.attr('x');\n                    me.dragoffY = 0;\n                }\n                else if (type === 'Y') {\n                    me.dragoffX = 0;\n                    me.dragoffY = startPoint.y - brushShape.attr('y');\n                }\n                else if (type === 'XY') {\n                    me.dragoffX = startPoint.x - brushShape.attr('x');\n                    me.dragoffY = startPoint.y - brushShape.attr('y');\n                }\n                else if (type === 'POLYGON') {\n                    var box = brushShape.getBBox();\n                    me.dragoffX = startPoint.x - box.minX;\n                    me.dragoffY = startPoint.y - box.minY;\n                }\n                if (isInPlot) {\n                }\n                me.onDragstart && me.onDragstart(ev);\n            }\n            me.prePoint = startPoint;\n        }\n        if (!me.dragging) {\n            me.onBrushstart && me.onBrushstart(startPoint);\n            var container = me.container;\n            if (isInPlot) {\n                var _me$plot = me.plot, start = _me$plot.start, end = _me$plot.end;\n                if (startPoint.x < start.x || startPoint.x > end.x || startPoint.y < end.y || startPoint.y > start.y)\n                    return;\n            }\n            canvasDOM.style.cursor = 'crosshair';\n            me.startPoint = startPoint;\n            me.brushShape = null;\n            me.brushing = true;\n            if (!container) {\n                container = canvas.addGroup({\n                    zIndex: 5\n                });\n                container.initTransform();\n            }\n            else {\n                container.clear();\n            }\n            me.container = container;\n            if (type === 'POLYGON')\n                me.polygonPath = \"M \" + startPoint.x + \" \" + startPoint.y;\n        }\n    };\n    _proto.process = function process(ev) {\n        var me = this;\n        var brushing = me.brushing, dragging = me.dragging, type = me.type, plot = me.plot, startPoint = me.startPoint, xScale = me.xScale, yScale = me.yScale, canvas = me.canvas;\n        if (!brushing && !dragging) {\n            return;\n        }\n        var currentPoint = {\n            x: ev.offsetX,\n            y: ev.offsetY\n        };\n        var canvasDOM = canvas.get('canvasDOM');\n        if (brushing) {\n            canvasDOM.style.cursor = 'crosshair';\n            var start = plot.start, end = plot.end;\n            var polygonPath = me.polygonPath;\n            var brushShape = me.brushShape;\n            var container = me.container;\n            if (me.plot && me.inPlot) {\n                currentPoint = me._limitCoordScope(currentPoint);\n            }\n            var rectStartX;\n            var rectStartY;\n            var rectWidth;\n            var rectHeight;\n            if (type === 'Y') {\n                rectStartX = start.x;\n                rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n                rectWidth = Math.abs(start.x - end.x);\n                rectHeight = Math.abs(startPoint.y - currentPoint.y);\n            }\n            else if (type === 'X') {\n                rectStartX = currentPoint.x >= startPoint.x ? startPoint.x : currentPoint.x;\n                rectStartY = end.y;\n                rectWidth = Math.abs(startPoint.x - currentPoint.x);\n                rectHeight = Math.abs(end.y - start.y);\n            }\n            else if (type === 'XY') {\n                if (currentPoint.x >= startPoint.x) {\n                    rectStartX = startPoint.x;\n                    rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n                }\n                else {\n                    rectStartX = currentPoint.x;\n                    rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n                }\n                rectWidth = Math.abs(startPoint.x - currentPoint.x);\n                rectHeight = Math.abs(startPoint.y - currentPoint.y);\n            }\n            else if (type === 'POLYGON') {\n                polygonPath += \"L \" + currentPoint.x + \" \" + currentPoint.y;\n                me.polygonPath = polygonPath;\n                if (!brushShape) {\n                    brushShape = container.addShape('path', {\n                        attrs: Util.mix(me.style, {\n                            path: polygonPath\n                        })\n                    });\n                }\n                else {\n                    !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n                        path: polygonPath\n                    }));\n                }\n            }\n            if (type !== 'POLYGON') {\n                if (!brushShape) {\n                    brushShape = container.addShape('rect', {\n                        attrs: Util.mix(me.style, {\n                            x: rectStartX,\n                            y: rectStartY,\n                            width: rectWidth,\n                            height: rectHeight\n                        })\n                    });\n                }\n                else {\n                    !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n                        x: rectStartX,\n                        y: rectStartY,\n                        width: rectWidth,\n                        height: rectHeight\n                    }));\n                }\n            }\n            me.brushShape = brushShape;\n        }\n        else if (dragging) {\n            canvasDOM.style.cursor = 'move';\n            var selection = me.selection;\n            if (selection && !selection.get('destroyed')) {\n                if (type === 'POLYGON') {\n                    var prePoint = me.prePoint;\n                    me.selection.translate(currentPoint.x - prePoint.x, currentPoint.y - prePoint.y);\n                }\n                else {\n                    me.dragoffX && selection.attr('x', currentPoint.x - me.dragoffX);\n                    me.dragoffY && selection.attr('y', currentPoint.y - me.dragoffY);\n                }\n            }\n        }\n        me.prePoint = currentPoint;\n        canvas.draw();\n        var _me$_getSelected = me._getSelected(), data = _me$_getSelected.data, shapes = _me$_getSelected.shapes, xValues = _me$_getSelected.xValues, yValues = _me$_getSelected.yValues;\n        var eventObj = {\n            data: data,\n            shapes: shapes\n        };\n        if (xScale) {\n            eventObj[xScale.field] = xValues;\n        }\n        if (yScale) {\n            eventObj[yScale.field] = yValues;\n        }\n        Util.mix(ev, eventObj);\n        eventObj.x = currentPoint.x;\n        eventObj.y = currentPoint.y;\n        me.onDragmove && me.onDragmove(eventObj);\n        me.onBrushmove && me.onBrushmove(eventObj);\n    };\n    _proto.end = function end(ev) {\n        var me = this;\n        if (!me.brushing && !me.dragging) {\n            return;\n        }\n        var data = me.data, shapes = me.shapes, xValues = me.xValues, yValues = me.yValues, canvas = me.canvas, type = me.type, startPoint = me.startPoint, chart = me.chart, container = me.container, xScale = me.xScale, yScale = me.yScale;\n        var offsetX = ev.offsetX, offsetY = ev.offsetY;\n        var canvasDOM = canvas.get('canvasDOM');\n        canvasDOM.style.cursor = 'default';\n        if (startPoint === null) {\n            return;\n        }\n        if (Math.abs(startPoint.x - offsetX) <= 1 && Math.abs(startPoint.y - offsetY) <= 1) {\n            me.brushing = false;\n            me.dragging = false;\n            container.clear();\n            canvas.draw();\n            return;\n        }\n        var eventObj = {\n            data: data,\n            shapes: shapes\n        };\n        if (xScale) {\n            eventObj[xScale.field] = xValues;\n        }\n        if (yScale) {\n            eventObj[yScale.field] = yValues;\n        }\n        Util.mix(ev, eventObj);\n        eventObj.x = offsetX;\n        eventObj.y = offsetY;\n        if (me.dragging) {\n            me.dragging = false;\n            me.onDragend && me.onDragend(eventObj);\n        }\n        else if (me.brushing) {\n            me.brushing = false;\n            var brushShape = me.brushShape;\n            var polygonPath = me.polygonPath;\n            if (type === 'POLYGON') {\n                polygonPath += 'z';\n                brushShape && !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n                    path: polygonPath\n                }));\n                me.polygonPath = polygonPath;\n                canvas.draw();\n            }\n            if (me.onBrushend) {\n                me.onBrushend(eventObj);\n            }\n            else if (chart && me.filter) {\n                container.clear();\n                if (!me.isTransposed && type === 'X' || me.isTransposed && type === 'Y') {\n                    xScale && chart.filter(xScale.field, function (val) {\n                        return xValues.indexOf(val) > -1;\n                    });\n                }\n                else if (!me.isTransposed && type === 'Y' || me.isTransposed && type === 'X') {\n                    yScale && chart.filter(yScale.field, function (val) {\n                        return yValues.indexOf(val) > -1;\n                    });\n                }\n                else {\n                    xScale && chart.filter(xScale.field, function (val) {\n                        return xValues.indexOf(val) > -1;\n                    });\n                    yScale && chart.filter(yScale.field, function (val) {\n                        return yValues.indexOf(val) > -1;\n                    });\n                }\n                chart.repaint();\n            }\n        }\n    };\n    _proto.reset = function reset() {\n        var me = this;\n        var chart = me.chart, filter = me.filter, brushShape = me.brushShape, canvas = me.canvas;\n        this._init();\n        if (chart && filter) {\n            chart.get('options').filters = {};\n            chart.repaint();\n        }\n        if (brushShape) {\n            brushShape.destroy();\n            canvas.draw();\n        }\n    };\n    _proto._limitCoordScope = function _limitCoordScope(point) {\n        var plot = this.plot;\n        var start = plot.start, end = plot.end;\n        if (point.x < start.x) {\n            point.x = start.x;\n        }\n        if (point.x > end.x) {\n            point.x = end.x;\n        }\n        if (point.y < end.y) {\n            point.y = end.y;\n        }\n        if (point.y > start.y) {\n            point.y = start.y;\n        }\n        return point;\n    };\n    _proto._getSelected = function _getSelected() {\n        var me = this;\n        var chart = me.chart, xScale = me.xScale, yScale = me.yScale, brushShape = me.brushShape, canvas = me.canvas;\n        var pixelRatio = canvas.get('pixelRatio');\n        var selectedShapes = [];\n        var xValues = [];\n        var yValues = [];\n        var selectedData = [];\n        if (chart) {\n            var geoms = chart.get('geoms');\n            geoms.map(function (geom) {\n                var shapes = geom.getShapes();\n                shapes.map(function (shape) {\n                    var shapeData = shape.get('origin');\n                    if (!Array.isArray(shapeData)) {\n                        shapeData = [shapeData];\n                    }\n                    shapeData.map(function (each) {\n                        if (brushShape.isHit(each.x * pixelRatio, each.y * pixelRatio)) {\n                            selectedShapes.push(shape);\n                            var origin = each._origin;\n                            selectedData.push(origin);\n                            xScale && xValues.push(origin[xScale.field]);\n                            yScale && yValues.push(origin[yScale.field]);\n                        }\n                        return each;\n                    });\n                    return shape;\n                });\n                return geom;\n            });\n        }\n        me.shapes = selectedShapes;\n        me.xValues = xValues;\n        me.yValues = yValues;\n        me.data = selectedData;\n        canvas.draw();\n        return {\n            data: selectedData,\n            xValues: xValues,\n            yValues: yValues,\n            shapes: selectedShapes\n        };\n    };\n    return Brush;\n}(Interaction);\nmodule.exports = Brush;\n",{"version":3,"file":"/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/interaction/brush.js","sourceRoot":"","sources":["/run/media/williamyh/新加卷/project/Deecamp-project/system/Web/node_modules/bizcharts/node_modules/@antv/g2/lib/interaction/brush.js"],"names":[],"mappings":"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","sourcesContent":["function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar Util = require('../util');\n\nvar Interaction = require('./base'); // const G2 = require('../core.js');\n\n\nvar BRUSH_TYPES = ['X', 'Y', 'XY', 'POLYGON'];\nvar DEFAULT_TYPE = 'XY';\n\nvar Brush = /*#__PURE__*/function (_Interaction) {\n  _inheritsLoose(Brush, _Interaction);\n\n  var _proto = Brush.prototype;\n\n  _proto.getDefaultCfg = function getDefaultCfg() {\n    var cfg = _Interaction.prototype.getDefaultCfg.call(this);\n\n    return Util.mix({}, cfg, {\n      type: DEFAULT_TYPE,\n      startPoint: null,\n      brushing: false,\n      dragging: false,\n      brushShape: null,\n      container: null,\n      polygonPath: null,\n      style: {\n        fill: '#C5D4EB',\n        opacity: 0.3,\n        lineWidth: 1,\n        stroke: '#82A6DD'\n      },\n      draggable: false,\n      dragOffX: 0,\n      dragOffY: 0,\n      inPlot: true,\n      xField: null,\n      yField: null\n    });\n  };\n\n  function Brush(cfg, view) {\n    var _this;\n\n    _this = _Interaction.call(this, cfg, view) || this;\n\n    var me = _assertThisInitialized(_this);\n\n    me.filter = !me.draggable;\n    me.type = me.type.toUpperCase();\n    me.chart = view;\n\n    if (!BRUSH_TYPES.includes(me.type)) {\n      me.type = DEFAULT_TYPE;\n    }\n\n    var canvas = me.canvas;\n\n    if (canvas) {\n      var plotRange;\n      canvas.get('children').map(function (child) {\n        if (child.get('type') === 'plotBack') {\n          plotRange = child.get('plotRange');\n          return false;\n        }\n\n        return child;\n      });\n      me.plot = {\n        start: plotRange.bl,\n        end: plotRange.tr\n      };\n    }\n\n    if (view) {\n      var coord = view.get('coord');\n      me.plot = {\n        start: coord.start,\n        end: coord.end\n      };\n      view.on('afterrender', function () {\n        me.plot = {\n          start: coord.start,\n          end: coord.end\n        };\n      });\n      me.isTransposed = coord.isTransposed;\n\n      var xScales = view._getScales('x');\n\n      var yScales = view._getScales('y');\n\n      me.xScale = me.xField ? xScales[me.xField] : view.getXScale();\n      me.yScale = me.yField ? yScales[me.yField] : view.getYScales()[0];\n    }\n\n    return _this;\n  } // onBurshstart() { }\n  // onBrushmove() { }\n  // onBrushend() {}\n  // onDragstart() {}\n  // onDragmove() {}\n  // onDragend() {}\n\n\n  _proto.start = function start(ev) {\n    var me = this;\n    var canvas = me.canvas,\n        type = me.type,\n        brushShape = me.brushShape;\n    if (!type) return;\n\n    if (me.brushing) {\n      // 鼠标移动到图表外up, 回到图表内点击即结束绘制，mousedown的时候却正在绘制中\n      me.end(ev);\n    }\n\n    var startPoint = {\n      x: ev.offsetX,\n      y: ev.offsetY\n    };\n    if (!startPoint.x) return;\n    var isInPlot = me.plot && me.inPlot;\n    var canvasDOM = canvas.get('canvasDOM');\n    var pixelRatio = canvas.get('pixelRatio');\n    if (me.selection) me.selection = null;\n\n    if (me.draggable && brushShape && !brushShape.get('destroyed')) {\n      // allow drag the brushShape\n      if (brushShape.isHit(startPoint.x * pixelRatio, startPoint.y * pixelRatio)) {\n        canvasDOM.style.cursor = 'move';\n        me.selection = brushShape;\n        me.dragging = true;\n\n        if (type === 'X') {\n          me.dragoffX = startPoint.x - brushShape.attr('x');\n          me.dragoffY = 0;\n        } else if (type === 'Y') {\n          me.dragoffX = 0;\n          me.dragoffY = startPoint.y - brushShape.attr('y');\n        } else if (type === 'XY') {\n          me.dragoffX = startPoint.x - brushShape.attr('x');\n          me.dragoffY = startPoint.y - brushShape.attr('y');\n        } else if (type === 'POLYGON') {\n          var box = brushShape.getBBox();\n          me.dragoffX = startPoint.x - box.minX;\n          me.dragoffY = startPoint.y - box.minY;\n        }\n\n        if (isInPlot) {// me.selection.attr('clip', canvas.addShape('rect', {\n          //   attrs: {\n          //     x: this.plot.start.x,\n          //     y: this.plot.end.y,\n          //     width: this.plot.end.x - this.plot.start.x,\n          //     height: this.plot.start.y - this.plot.end.y,\n          //     fill: '#fff',\n          //     fillOpacity: 0\n          //   }\n          // }));\n        }\n\n        me.onDragstart && me.onDragstart(ev);\n      }\n\n      me.prePoint = startPoint;\n    }\n\n    if (!me.dragging) {\n      // brush start\n      me.onBrushstart && me.onBrushstart(startPoint);\n      var container = me.container;\n\n      if (isInPlot) {\n        var _me$plot = me.plot,\n            start = _me$plot.start,\n            end = _me$plot.end;\n        if (startPoint.x < start.x || startPoint.x > end.x || startPoint.y < end.y || startPoint.y > start.y) return;\n      }\n\n      canvasDOM.style.cursor = 'crosshair';\n      me.startPoint = startPoint;\n      me.brushShape = null;\n      me.brushing = true;\n\n      if (!container) {\n        container = canvas.addGroup({\n          zIndex: 5 // upper\n\n        });\n        container.initTransform();\n      } else {\n        container.clear();\n      }\n\n      me.container = container;\n      if (type === 'POLYGON') me.polygonPath = \"M \" + startPoint.x + \" \" + startPoint.y;\n    }\n  };\n\n  _proto.process = function process(ev) {\n    var me = this;\n    var brushing = me.brushing,\n        dragging = me.dragging,\n        type = me.type,\n        plot = me.plot,\n        startPoint = me.startPoint,\n        xScale = me.xScale,\n        yScale = me.yScale,\n        canvas = me.canvas;\n\n    if (!brushing && !dragging) {\n      return;\n    }\n\n    var currentPoint = {\n      x: ev.offsetX,\n      y: ev.offsetY\n    };\n    var canvasDOM = canvas.get('canvasDOM');\n\n    if (brushing) {\n      canvasDOM.style.cursor = 'crosshair';\n      var start = plot.start,\n          end = plot.end;\n      var polygonPath = me.polygonPath;\n      var brushShape = me.brushShape;\n      var container = me.container;\n\n      if (me.plot && me.inPlot) {\n        currentPoint = me._limitCoordScope(currentPoint);\n      }\n\n      var rectStartX;\n      var rectStartY;\n      var rectWidth;\n      var rectHeight;\n\n      if (type === 'Y') {\n        rectStartX = start.x;\n        rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n        rectWidth = Math.abs(start.x - end.x);\n        rectHeight = Math.abs(startPoint.y - currentPoint.y);\n      } else if (type === 'X') {\n        rectStartX = currentPoint.x >= startPoint.x ? startPoint.x : currentPoint.x;\n        rectStartY = end.y;\n        rectWidth = Math.abs(startPoint.x - currentPoint.x);\n        rectHeight = Math.abs(end.y - start.y);\n      } else if (type === 'XY') {\n        if (currentPoint.x >= startPoint.x) {\n          rectStartX = startPoint.x;\n          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n        } else {\n          rectStartX = currentPoint.x;\n          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;\n        }\n\n        rectWidth = Math.abs(startPoint.x - currentPoint.x);\n        rectHeight = Math.abs(startPoint.y - currentPoint.y);\n      } else if (type === 'POLYGON') {\n        polygonPath += \"L \" + currentPoint.x + \" \" + currentPoint.y;\n        me.polygonPath = polygonPath;\n\n        if (!brushShape) {\n          brushShape = container.addShape('path', {\n            attrs: Util.mix(me.style, {\n              path: polygonPath\n            })\n          });\n        } else {\n          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n            path: polygonPath\n          }));\n        }\n      }\n\n      if (type !== 'POLYGON') {\n        if (!brushShape) {\n          brushShape = container.addShape('rect', {\n            attrs: Util.mix(me.style, {\n              x: rectStartX,\n              y: rectStartY,\n              width: rectWidth,\n              height: rectHeight\n            })\n          });\n        } else {\n          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n            x: rectStartX,\n            y: rectStartY,\n            width: rectWidth,\n            height: rectHeight\n          }));\n        }\n      }\n\n      me.brushShape = brushShape;\n    } else if (dragging) {\n      canvasDOM.style.cursor = 'move';\n      var selection = me.selection;\n\n      if (selection && !selection.get('destroyed')) {\n        if (type === 'POLYGON') {\n          var prePoint = me.prePoint;\n          me.selection.translate(currentPoint.x - prePoint.x, currentPoint.y - prePoint.y);\n        } else {\n          me.dragoffX && selection.attr('x', currentPoint.x - me.dragoffX);\n          me.dragoffY && selection.attr('y', currentPoint.y - me.dragoffY);\n        }\n      }\n    }\n\n    me.prePoint = currentPoint;\n    canvas.draw();\n\n    var _me$_getSelected = me._getSelected(),\n        data = _me$_getSelected.data,\n        shapes = _me$_getSelected.shapes,\n        xValues = _me$_getSelected.xValues,\n        yValues = _me$_getSelected.yValues;\n\n    var eventObj = {\n      data: data,\n      shapes: shapes\n    };\n\n    if (xScale) {\n      eventObj[xScale.field] = xValues;\n    }\n\n    if (yScale) {\n      eventObj[yScale.field] = yValues;\n    } // 将框选的数据传递给 ev，供 onEnd 钩子使用\n\n\n    Util.mix(ev, eventObj);\n    eventObj.x = currentPoint.x;\n    eventObj.y = currentPoint.y;\n    me.onDragmove && me.onDragmove(eventObj);\n    me.onBrushmove && me.onBrushmove(eventObj);\n  };\n\n  _proto.end = function end(ev) {\n    var me = this;\n\n    if (!me.brushing && !me.dragging) {\n      return;\n    }\n\n    var data = me.data,\n        shapes = me.shapes,\n        xValues = me.xValues,\n        yValues = me.yValues,\n        canvas = me.canvas,\n        type = me.type,\n        startPoint = me.startPoint,\n        chart = me.chart,\n        container = me.container,\n        xScale = me.xScale,\n        yScale = me.yScale;\n    var offsetX = ev.offsetX,\n        offsetY = ev.offsetY;\n    var canvasDOM = canvas.get('canvasDOM');\n    canvasDOM.style.cursor = 'default';\n\n    if (startPoint === null) {\n      return;\n    }\n\n    if (Math.abs(startPoint.x - offsetX) <= 1 && Math.abs(startPoint.y - offsetY) <= 1) {\n      // 防止点击事件\n      me.brushing = false;\n      me.dragging = false;\n      container.clear();\n      canvas.draw();\n      return;\n    }\n\n    var eventObj = {\n      data: data,\n      shapes: shapes\n    };\n\n    if (xScale) {\n      eventObj[xScale.field] = xValues;\n    }\n\n    if (yScale) {\n      eventObj[yScale.field] = yValues;\n    } // 将框选的数据传递给 ev，供 onEnd 钩子使用\n\n\n    Util.mix(ev, eventObj);\n    eventObj.x = offsetX;\n    eventObj.y = offsetY;\n\n    if (me.dragging) {\n      me.dragging = false;\n      me.onDragend && me.onDragend(eventObj);\n    } else if (me.brushing) {\n      me.brushing = false;\n      var brushShape = me.brushShape;\n      var polygonPath = me.polygonPath;\n\n      if (type === 'POLYGON') {\n        polygonPath += 'z';\n        brushShape && !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape._attrs, {\n          path: polygonPath\n        }));\n        me.polygonPath = polygonPath;\n        canvas.draw();\n      }\n\n      if (me.onBrushend) {\n        me.onBrushend(eventObj);\n      } else if (chart && me.filter) {\n        container.clear(); // clear the brush\n        // filter data\n\n        if (!me.isTransposed && type === 'X' || me.isTransposed && type === 'Y') {\n          xScale && chart.filter(xScale.field, function (val) {\n            return xValues.indexOf(val) > -1;\n          });\n        } else if (!me.isTransposed && type === 'Y' || me.isTransposed && type === 'X') {\n          yScale && chart.filter(yScale.field, function (val) {\n            return yValues.indexOf(val) > -1;\n          });\n        } else {\n          xScale && chart.filter(xScale.field, function (val) {\n            return xValues.indexOf(val) > -1;\n          });\n          yScale && chart.filter(yScale.field, function (val) {\n            return yValues.indexOf(val) > -1;\n          });\n        }\n\n        chart.repaint();\n      }\n    }\n  };\n\n  _proto.reset = function reset() {\n    var me = this;\n    var chart = me.chart,\n        filter = me.filter,\n        brushShape = me.brushShape,\n        canvas = me.canvas;\n\n    this._init(); // 重置各种参考值\n\n\n    if (chart && filter) {\n      chart.get('options').filters = {};\n      chart.repaint();\n    }\n\n    if (brushShape) {\n      brushShape.destroy();\n      canvas.draw();\n    }\n  };\n\n  _proto._limitCoordScope = function _limitCoordScope(point) {\n    var plot = this.plot;\n    var start = plot.start,\n        end = plot.end;\n\n    if (point.x < start.x) {\n      point.x = start.x;\n    }\n\n    if (point.x > end.x) {\n      point.x = end.x;\n    }\n\n    if (point.y < end.y) {\n      point.y = end.y;\n    }\n\n    if (point.y > start.y) {\n      point.y = start.y;\n    }\n\n    return point;\n  };\n\n  _proto._getSelected = function _getSelected() {\n    var me = this;\n    var chart = me.chart,\n        xScale = me.xScale,\n        yScale = me.yScale,\n        brushShape = me.brushShape,\n        canvas = me.canvas;\n    var pixelRatio = canvas.get('pixelRatio');\n    var selectedShapes = [];\n    var xValues = [];\n    var yValues = [];\n    var selectedData = [];\n\n    if (chart) {\n      var geoms = chart.get('geoms');\n      geoms.map(function (geom) {\n        var shapes = geom.getShapes();\n        shapes.map(function (shape) {\n          var shapeData = shape.get('origin');\n\n          if (!Array.isArray(shapeData)) {\n            // 线图、区域图等\n            shapeData = [shapeData];\n          }\n\n          shapeData.map(function (each) {\n            if (brushShape.isHit(each.x * pixelRatio, each.y * pixelRatio)) {\n              selectedShapes.push(shape);\n              var origin = each._origin;\n              selectedData.push(origin);\n              xScale && xValues.push(origin[xScale.field]);\n              yScale && yValues.push(origin[yScale.field]);\n            }\n\n            return each;\n          });\n          return shape;\n        });\n        return geom;\n      });\n    }\n\n    me.shapes = selectedShapes;\n    me.xValues = xValues;\n    me.yValues = yValues;\n    me.data = selectedData;\n    canvas.draw();\n    return {\n      data: selectedData,\n      xValues: xValues,\n      yValues: yValues,\n      shapes: selectedShapes\n    };\n  };\n\n  return Brush;\n}(Interaction); // G2.registerInteraction('brush', Brush);\n// G2.registerInteraction('Brush', Brush);\n\n\nmodule.exports = Brush;"]}]}