{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\axis\\circle.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\axis\\circle.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { vec2 } from '@antv/matrix-util';\r\nimport AxisBase from './base';\r\nvar Circle = (function (_super) {\r\n    __extends(Circle, _super);\r\n    function Circle() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    Circle.prototype.getDefaultCfg = function () {\r\n        var cfg = _super.prototype.getDefaultCfg.call(this);\r\n        return __assign(__assign({}, cfg), { type: 'circle', locationType: 'circle', center: null, radius: null, startAngle: -Math.PI / 2, endAngle: (Math.PI * 3) / 2 });\r\n    };\r\n    Circle.prototype.getLinePath = function () {\r\n        var center = this.get('center');\r\n        var x = center.x;\r\n        var y = center.y;\r\n        var rx = this.get('radius');\r\n        var ry = rx;\r\n        var startAngle = this.get('startAngle');\r\n        var endAngle = this.get('endAngle');\r\n        var path = [];\r\n        if (Math.abs(endAngle - startAngle) === Math.PI * 2) {\r\n            path = [['M', x, y - ry], ['A', rx, ry, 0, 1, 1, x, y + ry], ['A', rx, ry, 0, 1, 1, x, y - ry], ['Z']];\r\n        }\r\n        else {\r\n            var startPoint = this.getCirclePoint(startAngle);\r\n            var endPoint = this.getCirclePoint(endAngle);\r\n            var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;\r\n            var sweep = startAngle > endAngle ? 0 : 1;\r\n            path = [\r\n                ['M', x, y],\r\n                ['L', startPoint.x, startPoint.y],\r\n                ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],\r\n                ['L', x, y],\r\n            ];\r\n        }\r\n        return path;\r\n    };\r\n    Circle.prototype.getTickPoint = function (tickValue) {\r\n        var startAngle = this.get('startAngle');\r\n        var endAngle = this.get('endAngle');\r\n        var angle = startAngle + (endAngle - startAngle) * tickValue;\r\n        return this.getCirclePoint(angle);\r\n    };\r\n    Circle.prototype.getSideVector = function (offset, point) {\r\n        var center = this.get('center');\r\n        var vector = [point.x - center.x, point.y - center.y];\r\n        var factor = this.get('verticalFactor');\r\n        var vecLen = vec2.length(vector);\r\n        vec2.scale(vector, vector, (factor * offset) / vecLen);\r\n        return vector;\r\n    };\r\n    Circle.prototype.getAxisVector = function (point) {\r\n        var center = this.get('center');\r\n        var vector = [point.x - center.x, point.y - center.y];\r\n        return [vector[1], -1 * vector[0]];\r\n    };\r\n    Circle.prototype.getCirclePoint = function (angle, radius) {\r\n        var center = this.get('center');\r\n        radius = radius || this.get('radius');\r\n        return {\r\n            x: center.x + Math.cos(angle) * radius,\r\n            y: center.y + Math.sin(angle) * radius,\r\n        };\r\n    };\r\n    return Circle;\r\n}(AxisBase));\r\nexport default Circle;\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\axis\\circle.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\node_modules\\@antv\\component\\esm\\axis\\circle.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { vec2 } from '@antv/matrix-util';\nimport AxisBase from './base';\nvar Circle = /** @class */ (function (_super) {\n    __extends(Circle, _super);\n    function Circle() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Circle.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { type: 'circle', locationType: 'circle', center: null, radius: null, startAngle: -Math.PI / 2, endAngle: (Math.PI * 3) / 2 });\n    };\n    Circle.prototype.getLinePath = function () {\n        var center = this.get('center');\n        var x = center.x;\n        var y = center.y;\n        var rx = this.get('radius');\n        var ry = rx;\n        var startAngle = this.get('startAngle');\n        var endAngle = this.get('endAngle');\n        var path = [];\n        if (Math.abs(endAngle - startAngle) === Math.PI * 2) {\n            path = [['M', x, y - ry], ['A', rx, ry, 0, 1, 1, x, y + ry], ['A', rx, ry, 0, 1, 1, x, y - ry], ['Z']];\n        }\n        else {\n            var startPoint = this.getCirclePoint(startAngle);\n            var endPoint = this.getCirclePoint(endAngle);\n            var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;\n            var sweep = startAngle > endAngle ? 0 : 1;\n            path = [\n                ['M', x, y],\n                ['L', startPoint.x, startPoint.y],\n                ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],\n                ['L', x, y],\n            ];\n        }\n        return path;\n    };\n    Circle.prototype.getTickPoint = function (tickValue) {\n        var startAngle = this.get('startAngle');\n        var endAngle = this.get('endAngle');\n        var angle = startAngle + (endAngle - startAngle) * tickValue;\n        return this.getCirclePoint(angle);\n    };\n    // 获取垂直于坐标轴的向量\n    Circle.prototype.getSideVector = function (offset, point) {\n        var center = this.get('center');\n        var vector = [point.x - center.x, point.y - center.y];\n        var factor = this.get('verticalFactor');\n        var vecLen = vec2.length(vector);\n        vec2.scale(vector, vector, (factor * offset) / vecLen);\n        return vector;\n    };\n    // 获取沿坐标轴方向的向量\n    Circle.prototype.getAxisVector = function (point) {\n        var center = this.get('center');\n        var vector = [point.x - center.x, point.y - center.y];\n        return [vector[1], -1 * vector[0]]; // 获取顺时针方向的向量\n    };\n    // 根据圆心和半径获取点\n    Circle.prototype.getCirclePoint = function (angle, radius) {\n        var center = this.get('center');\n        radius = radius || this.get('radius');\n        return {\n            x: center.x + Math.cos(angle) * radius,\n            y: center.y + Math.sin(angle) * radius,\n        };\n    };\n    return Circle;\n}(AxisBase));\nexport default Circle;\n//# sourceMappingURL=circle.js.map"]}]}