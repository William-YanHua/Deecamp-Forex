{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\combo\\column-line\\layer.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\combo\\column-line\\layer.js","mtime":499162500000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { __assign, __extends } from \"tslib\";\r\nimport { Legend } from '@antv/component';\r\nimport { registerPlotType } from '../../base/global';\r\nimport ComboViewLayer from '../base';\r\nimport LineLayer from '../../plots/line/layer';\r\nimport ColumnLayer from '../../plots/column/layer';\r\nimport { deepMix, clone, each, contains, pull, isArray } from '@antv/util';\r\nimport { getGlobalTheme } from '../../theme';\r\nvar defaultLineConfig = {\r\n    color: '#f5bc32',\r\n    lineSize: 4,\r\n    connectNull: true,\r\n    point: {\r\n        visible: false,\r\n        size: 3,\r\n        shape: 'circle',\r\n        style: {\r\n            stroke: '#fff',\r\n        },\r\n    },\r\n    label: {\r\n        visible: false,\r\n    },\r\n};\r\nvar defaultColumnConfig = {\r\n    color: '#5B8FF9',\r\n};\r\nvar defaultYAxisConfig = {\r\n    visible: true,\r\n    colorMapping: true,\r\n    grid: {\r\n        visible: true,\r\n    },\r\n    line: {\r\n        visible: false,\r\n    },\r\n    tickLine: {\r\n        visible: false,\r\n    },\r\n    label: {\r\n        visible: true,\r\n        autoHide: true,\r\n        autoRotate: false,\r\n    },\r\n    title: {\r\n        autoRotate: true,\r\n        visible: false,\r\n        spacing: 12,\r\n    },\r\n};\r\nvar ColumnLineLayer = (function (_super) {\r\n    __extends(ColumnLineLayer, _super);\r\n    function ColumnLineLayer() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.type = 'columnLine';\r\n        _this.legends = [];\r\n        return _this;\r\n    }\r\n    ColumnLineLayer.getDefaultOptions = function () {\r\n        return deepMix({}, _super.getDefaultOptions.call(this), {\r\n            yAxis: {\r\n                leftConfig: defaultYAxisConfig,\r\n                rightConfig: defaultYAxisConfig,\r\n            },\r\n            lineConfig: defaultLineConfig,\r\n            columnConfig: defaultColumnConfig,\r\n            legend: {\r\n                visible: true,\r\n            },\r\n        });\r\n    };\r\n    ColumnLineLayer.prototype.beforeInit = function () {\r\n        var _a, _b;\r\n        var _c = this, options = _c.options, initialOptions = _c.initialOptions;\r\n        if (options.lineSeriesField) {\r\n            options.yAxis.rightConfig.colorMapping = false;\r\n            if (!((_a = initialOptions.lineConfig) === null || _a === void 0 ? void 0 : _a.lineSize)) {\r\n                options.lineConfig.lineSize = 3;\r\n            }\r\n            if (!((_b = initialOptions.lineConfig) === null || _b === void 0 ? void 0 : _b.color)) {\r\n                var _d = getGlobalTheme(), colors = _d.colors, colors_20 = _d.colors_20;\r\n                var seriesValue = this.getValueBySeriesField();\r\n                var colorSeries_1 = seriesValue.length > colors.length ? colors_20 : colors;\r\n                var colorPlates_1 = [];\r\n                each(seriesValue, function (v, index) {\r\n                    colorPlates_1.push(colorSeries_1[index + 1]);\r\n                });\r\n                options.lineConfig.color = colorPlates_1;\r\n            }\r\n        }\r\n    };\r\n    ColumnLineLayer.prototype.init = function () {\r\n        _super.prototype.init.call(this);\r\n        if (!this.checkData()) {\r\n            return;\r\n        }\r\n        var _a = this.options, data = _a.data, meta = _a.meta, xField = _a.xField, yField = _a.yField, lineSeriesField = _a.lineSeriesField, legend = _a.legend, lineConfig = _a.lineConfig, columnConfig = _a.columnConfig, events = _a.events;\r\n        this.colors = [columnConfig.color, lineConfig.color];\r\n        this.drawColumn();\r\n        var metaInfo = {};\r\n        metaInfo[yField[1]] = { ticks: this.getTicks() };\r\n        var line = this.createLayer(LineLayer, data[1], __assign({ xField: xField, yField: yField[1], seriesField: lineSeriesField, meta: deepMix({}, meta, metaInfo), xAxis: {\r\n                visible: false,\r\n            }, yAxis: deepMix({}, this.yAxis(1), {\r\n                position: 'right',\r\n                grid: {\r\n                    visible: false,\r\n                },\r\n                nice: true,\r\n            }), tooltip: {\r\n                visible: false,\r\n            }, legend: {\r\n                visible: false,\r\n            }, events: events }, lineConfig));\r\n        line.render();\r\n        if (legend.visible) {\r\n            this.customLegend();\r\n        }\r\n        this.adjustLayout();\r\n    };\r\n    ColumnLineLayer.prototype.drawColumn = function () {\r\n        var _this = this;\r\n        var _a = this.options, data = _a.data, xField = _a.xField, yField = _a.yField, xAxis = _a.xAxis, tooltip = _a.tooltip, columnConfig = _a.columnConfig, meta = _a.meta, events = _a.events;\r\n        var column = this.createLayer(ColumnLayer, data[0], __assign({ xField: xField, yField: yField[0], meta: meta,\r\n            xAxis: xAxis, yAxis: deepMix({}, this.yAxis(0), {\r\n                grid: {\r\n                    visible: true,\r\n                },\r\n                nice: true,\r\n            }), tooltip: deepMix({}, tooltip, {\r\n                showMarkers: false,\r\n                custom: {\r\n                    onChange: function (containerDom, ev) {\r\n                        _this.tooltip(containerDom, ev);\r\n                    },\r\n                },\r\n            }), events: events }, columnConfig));\r\n        column.render();\r\n    };\r\n    ColumnLineLayer.prototype.tooltip = function (dom, ev) {\r\n        var _this = this;\r\n        var yField = this.options.yField;\r\n        var originItem = clone(ev.items[0]);\r\n        var dataItemsA = this.getDataByXField(ev.title, 1);\r\n        if (dataItemsA) {\r\n            each(dataItemsA, function (d, index) {\r\n                var seriesField = _this.geomLayers[1].options.seriesField;\r\n                var name = seriesField ? d[seriesField] : yField[1];\r\n                ev.items.push(__assign(__assign({}, originItem), { mappingData: deepMix({}, originItem.mappingData, { _origin: dataItemsA }), data: d, name: name, value: d[yField[1]], color: isArray(_this.colors[1]) ? _this.colors[1][index] : _this.colors[1] }));\r\n            });\r\n        }\r\n        if (this.options.legend.visible) {\r\n            var unCheckedValue_1 = this.getUnCheckedValue();\r\n            var totalItems = this.legends[0].get('items').length + this.legends[1].get('items').length;\r\n            if (unCheckedValue_1.length === totalItems) {\r\n                dom.style.display = 'none';\r\n                return;\r\n            }\r\n            else {\r\n                dom.style.display = 'block';\r\n            }\r\n            var uniqKeys_1 = [];\r\n            var uniqItems_1 = [];\r\n            each(ev.items, function (item) {\r\n                var name = item.name;\r\n                if (!contains(uniqKeys_1, name) && !contains(unCheckedValue_1, name)) {\r\n                    uniqKeys_1.push(name);\r\n                    uniqItems_1.push(item);\r\n                }\r\n            });\r\n            each(ev.items, function (item, index) {\r\n                if (index < uniqItems_1.length) {\r\n                    ev.items[index] = uniqItems_1[index];\r\n                }\r\n                else {\r\n                    ev.items.pop();\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ColumnLineLayer.prototype.customLegend = function () {\r\n        var _this = this;\r\n        var _a = this.options, yField = _a.yField, legend = _a.legend;\r\n        var colors = this.colors;\r\n        var container = this.container.addGroup();\r\n        var legendCfg = legend;\r\n        var symbols = ['square', 'circle'];\r\n        each(this.geomLayers, function (geom, index) {\r\n            var legend;\r\n            if (geom.options.seriesField) {\r\n                var values = _this.getValueBySeriesField();\r\n                legend = _this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\r\n            }\r\n            else {\r\n                legend = _this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\r\n            }\r\n            _this.legends.push(legend);\r\n        });\r\n        each(this.geomLayers, function (geom, index) {\r\n            if (geom.options.seriesField) {\r\n                _this.multipleLegendFilter(index, geom.options.seriesField);\r\n            }\r\n            else {\r\n                _this.legendFilter(index);\r\n            }\r\n        });\r\n    };\r\n    ColumnLineLayer.prototype.createSingleLegend = function (name, symbol, color, cfg, container) {\r\n        var markerCfg = deepMix({}, {\r\n            symbol: symbol,\r\n            style: {\r\n                r: 4,\r\n                fill: color,\r\n            },\r\n        }, cfg.marker);\r\n        var items = [\r\n            {\r\n                name: name,\r\n                unchecked: false,\r\n                marker: markerCfg,\r\n            },\r\n        ];\r\n        var legend = new Legend.Category({\r\n            id: this.type,\r\n            container: container,\r\n            x: 0,\r\n            y: 0,\r\n            items: items,\r\n            updateAutoRender: true,\r\n            itemBackground: null,\r\n            itemName: cfg.text,\r\n        });\r\n        legend.init();\r\n        legend.render();\r\n        return legend;\r\n    };\r\n    ColumnLineLayer.prototype.createNormalLegend = function (values, symbol, color, cfg, container) {\r\n        var legendItems = [];\r\n        each(values, function (v, index) {\r\n            legendItems.push({\r\n                name: v,\r\n                unchecked: false,\r\n                marker: {\r\n                    symbol: symbol,\r\n                    style: {\r\n                        r: 4,\r\n                        fill: color[index],\r\n                    },\r\n                },\r\n            });\r\n        });\r\n        var legend = new Legend.Category({\r\n            id: this.type,\r\n            container: container,\r\n            x: 0,\r\n            y: 0,\r\n            items: legendItems,\r\n            updateAutoRender: true,\r\n            itemBackground: null,\r\n            itemName: cfg.text,\r\n            offsetX: 0,\r\n        });\r\n        legend.init();\r\n        legend.render();\r\n        return legend;\r\n    };\r\n    ColumnLineLayer.prototype.multipleLegendFilter = function (index, field) {\r\n        var _this = this;\r\n        var legend = this.legends[index];\r\n        var filteredValue = [];\r\n        var legend_group = legend.get('group');\r\n        var layerHide = false;\r\n        legend_group.on('click', function (ev) {\r\n            var view = _this.geomLayers[index].view;\r\n            var item = ev.target.get('delegateObject').item;\r\n            if (item.unchecked) {\r\n                if (layerHide === true) {\r\n                    _this.showLayer(index);\r\n                    layerHide = false;\r\n                }\r\n                pull(filteredValue, item.name);\r\n                view.filter(item.value, function (f) {\r\n                    return !contains(filteredValue, f);\r\n                });\r\n                view.render();\r\n                legend.setItemState(item, 'unchecked', false);\r\n            }\r\n            else {\r\n                legend.setItemState(item, 'unchecked', true);\r\n                filteredValue.push(item.name);\r\n                if (filteredValue.length === _this.legends[index].get('items').length) {\r\n                    _this.hideLayer(index);\r\n                    layerHide = true;\r\n                }\r\n                else {\r\n                    view.filter(field, function (f) {\r\n                        return !contains(filteredValue, f);\r\n                    });\r\n                    view.render();\r\n                }\r\n            }\r\n            _this.canvas.draw();\r\n        });\r\n    };\r\n    ColumnLineLayer.prototype.getValueBySeriesField = function () {\r\n        var _a = this.options, lineSeriesField = _a.lineSeriesField, data = _a.data;\r\n        var lineData = data[1];\r\n        var values = [];\r\n        each(lineData, function (d) {\r\n            var v = d[lineSeriesField];\r\n            if (!contains(values, v)) {\r\n                values.push(v);\r\n            }\r\n        });\r\n        return values;\r\n    };\r\n    return ColumnLineLayer;\r\n}(ComboViewLayer));\r\nexport default ColumnLineLayer;\r\nregisterPlotType('columnLine', ColumnLineLayer);\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\combo\\column-line\\layer.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\@antv\\g2plot\\esm\\combo\\column-line\\layer.js"],"names":[],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport LineLayer from '../../plots/line/layer';\nimport ColumnLayer from '../../plots/column/layer';\nimport { deepMix, clone, each, contains, pull, isArray } from '@antv/util';\nimport { getGlobalTheme } from '../../theme';\nvar defaultLineConfig = {\n    color: '#f5bc32',\n    lineSize: 4,\n    connectNull: true,\n    point: {\n        visible: false,\n        size: 3,\n        shape: 'circle',\n        style: {\n            stroke: '#fff',\n        },\n    },\n    label: {\n        visible: false,\n    },\n};\nvar defaultColumnConfig = {\n    color: '#5B8FF9',\n};\nvar defaultYAxisConfig = {\n    visible: true,\n    colorMapping: true,\n    grid: {\n        visible: true,\n    },\n    line: {\n        visible: false,\n    },\n    tickLine: {\n        visible: false,\n    },\n    label: {\n        visible: true,\n        autoHide: true,\n        autoRotate: false,\n    },\n    title: {\n        autoRotate: true,\n        visible: false,\n        spacing: 12,\n    },\n};\nvar ColumnLineLayer = /** @class */ (function (_super) {\n    __extends(ColumnLineLayer, _super);\n    function ColumnLineLayer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'columnLine';\n        _this.legends = [];\n        return _this;\n    }\n    ColumnLineLayer.getDefaultOptions = function () {\n        return deepMix({}, _super.getDefaultOptions.call(this), {\n            yAxis: {\n                leftConfig: defaultYAxisConfig,\n                rightConfig: defaultYAxisConfig,\n            },\n            lineConfig: defaultLineConfig,\n            columnConfig: defaultColumnConfig,\n            legend: {\n                visible: true,\n            },\n        });\n    };\n    ColumnLineLayer.prototype.beforeInit = function () {\n        var _a, _b;\n        var _c = this, options = _c.options, initialOptions = _c.initialOptions;\n        if (options.lineSeriesField) {\n            options.yAxis.rightConfig.colorMapping = false;\n            if (!((_a = initialOptions.lineConfig) === null || _a === void 0 ? void 0 : _a.lineSize)) {\n                options.lineConfig.lineSize = 3;\n            }\n            if (!((_b = initialOptions.lineConfig) === null || _b === void 0 ? void 0 : _b.color)) {\n                var _d = getGlobalTheme(), colors = _d.colors, colors_20 = _d.colors_20;\n                var seriesValue = this.getValueBySeriesField();\n                var colorSeries_1 = seriesValue.length > colors.length ? colors_20 : colors;\n                var colorPlates_1 = [];\n                each(seriesValue, function (v, index) {\n                    colorPlates_1.push(colorSeries_1[index + 1]);\n                });\n                options.lineConfig.color = colorPlates_1;\n            }\n        }\n    };\n    ColumnLineLayer.prototype.init = function () {\n        _super.prototype.init.call(this);\n        if (!this.checkData()) {\n            return;\n        }\n        var _a = this.options, data = _a.data, meta = _a.meta, xField = _a.xField, yField = _a.yField, lineSeriesField = _a.lineSeriesField, legend = _a.legend, lineConfig = _a.lineConfig, columnConfig = _a.columnConfig, events = _a.events;\n        this.colors = [columnConfig.color, lineConfig.color];\n        // draw column\n        this.drawColumn();\n        //draw line\n        var metaInfo = {};\n        metaInfo[yField[1]] = { ticks: this.getTicks() };\n        var line = this.createLayer(LineLayer, data[1], __assign({ xField: xField, yField: yField[1], seriesField: lineSeriesField, meta: deepMix({}, meta, metaInfo), xAxis: {\n                visible: false,\n            }, yAxis: deepMix({}, this.yAxis(1), {\n                position: 'right',\n                grid: {\n                    visible: false,\n                },\n                nice: true,\n            }), tooltip: {\n                visible: false,\n            }, legend: {\n                visible: false,\n            }, events: events }, lineConfig));\n        line.render();\n        if (legend.visible) {\n            this.customLegend();\n        }\n        this.adjustLayout();\n    };\n    ColumnLineLayer.prototype.drawColumn = function () {\n        var _this = this;\n        var _a = this.options, data = _a.data, xField = _a.xField, yField = _a.yField, xAxis = _a.xAxis, tooltip = _a.tooltip, columnConfig = _a.columnConfig, meta = _a.meta, events = _a.events;\n        var column = this.createLayer(ColumnLayer, data[0], __assign({ xField: xField, yField: yField[0], meta: meta,\n            xAxis: xAxis, yAxis: deepMix({}, this.yAxis(0), {\n                grid: {\n                    visible: true,\n                },\n                nice: true,\n            }), tooltip: deepMix({}, tooltip, {\n                showMarkers: false,\n                custom: {\n                    onChange: function (containerDom, ev) {\n                        _this.tooltip(containerDom, ev);\n                    },\n                },\n            }), events: events }, columnConfig));\n        column.render();\n    };\n    ColumnLineLayer.prototype.tooltip = function (dom, ev) {\n        var _this = this;\n        var yField = this.options.yField;\n        var originItem = clone(ev.items[0]);\n        var dataItemsA = this.getDataByXField(ev.title, 1);\n        if (dataItemsA) {\n            each(dataItemsA, function (d, index) {\n                var seriesField = _this.geomLayers[1].options.seriesField;\n                var name = seriesField ? d[seriesField] : yField[1];\n                ev.items.push(__assign(__assign({}, originItem), { mappingData: deepMix({}, originItem.mappingData, { _origin: dataItemsA }), data: d, name: name, value: d[yField[1]], color: isArray(_this.colors[1]) ? _this.colors[1][index] : _this.colors[1] }));\n            });\n        }\n        if (this.options.legend.visible) {\n            var unCheckedValue_1 = this.getUnCheckedValue();\n            var totalItems = this.legends[0].get('items').length + this.legends[1].get('items').length;\n            // 如果legend全部是unchecked的状态，tooltip不显示\n            if (unCheckedValue_1.length === totalItems) {\n                dom.style.display = 'none';\n                return;\n            }\n            else {\n                dom.style.display = 'block';\n            }\n            // legend部分checked的时候，根据checked状态filter items\n            var uniqKeys_1 = [];\n            var uniqItems_1 = [];\n            each(ev.items, function (item) {\n                var name = item.name;\n                if (!contains(uniqKeys_1, name) && !contains(unCheckedValue_1, name)) {\n                    uniqKeys_1.push(name);\n                    uniqItems_1.push(item);\n                }\n            });\n            each(ev.items, function (item, index) {\n                if (index < uniqItems_1.length) {\n                    ev.items[index] = uniqItems_1[index];\n                }\n                else {\n                    ev.items.pop();\n                }\n            });\n        }\n    };\n    ColumnLineLayer.prototype.customLegend = function () {\n        var _this = this;\n        var _a = this.options, yField = _a.yField, legend = _a.legend;\n        var colors = this.colors;\n        var container = this.container.addGroup();\n        var legendCfg = legend;\n        var symbols = ['square', 'circle'];\n        each(this.geomLayers, function (geom, index) {\n            var legend;\n            if (geom.options.seriesField) {\n                var values = _this.getValueBySeriesField();\n                legend = _this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n            }\n            else {\n                legend = _this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n            }\n            _this.legends.push(legend);\n        });\n        // 使用legend做图层筛选\n        each(this.geomLayers, function (geom, index) {\n            if (geom.options.seriesField) {\n                _this.multipleLegendFilter(index, geom.options.seriesField);\n            }\n            else {\n                _this.legendFilter(index);\n            }\n        });\n    };\n    ColumnLineLayer.prototype.createSingleLegend = function (name, symbol, color, cfg, container) {\n        var markerCfg = deepMix({}, {\n            symbol: symbol,\n            style: {\n                r: 4,\n                fill: color,\n            },\n        }, cfg.marker);\n        var items = [\n            {\n                name: name,\n                unchecked: false,\n                marker: markerCfg,\n            },\n        ];\n        var legend = new Legend.Category({\n            id: this.type,\n            container: container,\n            x: 0,\n            y: 0,\n            items: items,\n            updateAutoRender: true,\n            itemBackground: null,\n            itemName: cfg.text,\n        });\n        legend.init();\n        legend.render();\n        return legend;\n    };\n    ColumnLineLayer.prototype.createNormalLegend = function (values, symbol, color, cfg, container) {\n        var legendItems = [];\n        each(values, function (v, index) {\n            legendItems.push({\n                name: v,\n                unchecked: false,\n                marker: {\n                    symbol: symbol,\n                    style: {\n                        r: 4,\n                        fill: color[index],\n                    },\n                },\n            });\n        });\n        var legend = new Legend.Category({\n            id: this.type,\n            container: container,\n            x: 0,\n            y: 0,\n            items: legendItems,\n            updateAutoRender: true,\n            itemBackground: null,\n            itemName: cfg.text,\n            offsetX: 0,\n        });\n        legend.init();\n        legend.render();\n        return legend;\n    };\n    ColumnLineLayer.prototype.multipleLegendFilter = function (index, field) {\n        var _this = this;\n        var legend = this.legends[index];\n        var filteredValue = [];\n        var legend_group = legend.get('group');\n        var layerHide = false;\n        legend_group.on('click', function (ev) {\n            var view = _this.geomLayers[index].view;\n            var item = ev.target.get('delegateObject').item;\n            if (item.unchecked) {\n                if (layerHide === true) {\n                    _this.showLayer(index);\n                    layerHide = false;\n                }\n                pull(filteredValue, item.name);\n                view.filter(item.value, function (f) {\n                    return !contains(filteredValue, f);\n                });\n                view.render();\n                legend.setItemState(item, 'unchecked', false);\n            }\n            else {\n                legend.setItemState(item, 'unchecked', true);\n                filteredValue.push(item.name);\n                if (filteredValue.length === _this.legends[index].get('items').length) {\n                    // 如果分组分类全部被uncheck了，直接隐藏图层，这样仍然可以trigger tooltip\n                    _this.hideLayer(index);\n                    layerHide = true;\n                }\n                else {\n                    view.filter(field, function (f) {\n                        return !contains(filteredValue, f);\n                    });\n                    view.render();\n                }\n            }\n            _this.canvas.draw();\n        });\n    };\n    ColumnLineLayer.prototype.getValueBySeriesField = function () {\n        var _a = this.options, lineSeriesField = _a.lineSeriesField, data = _a.data;\n        var lineData = data[1];\n        var values = [];\n        each(lineData, function (d) {\n            var v = d[lineSeriesField];\n            if (!contains(values, v)) {\n                values.push(v);\n            }\n        });\n        return values;\n    };\n    return ColumnLineLayer;\n}(ComboViewLayer));\nexport default ColumnLineLayer;\nregisterPlotType('columnLine', ColumnLineLayer);\n//# sourceMappingURL=layer.js.map"]}]}