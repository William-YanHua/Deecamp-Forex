{"remainingRequest":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js??ref--4-1!D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gringorten.js","dependencies":[{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gringorten.js","mtime":1494943454000},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1595520254649},{"path":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\ts-loader\\index.js","mtime":1537906253000}],"contextDependencies":[],"result":["import { geoProjection as projection } from \"d3-geo\";\r\nimport { abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt } from \"./math\";\r\nimport squareRaw from \"./square\";\r\nexport function gringortenRaw(lambda, phi) {\r\n    var sLambda = sign(lambda), sPhi = sign(phi), cosPhi = cos(phi), x = cos(lambda) * cosPhi, y = sin(lambda) * cosPhi, z = sin(sPhi * phi);\r\n    lambda = abs(atan2(y, z));\r\n    phi = asin(x);\r\n    if (abs(lambda - halfPi) > epsilon)\r\n        lambda %= halfPi;\r\n    var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\r\n    if (lambda > pi / 4)\r\n        z = point[0], point[0] = -point[1], point[1] = -z;\r\n    return (point[0] *= sLambda, point[1] *= -sPhi, point);\r\n}\r\ngringortenRaw.invert = function (x, y) {\r\n    if (abs(x) > 1)\r\n        x = sign(x) * 2 - x;\r\n    if (abs(y) > 1)\r\n        y = sign(y) * 2 - y;\r\n    var sx = sign(x), sy = sign(y), x0 = -sx * x, y0 = -sy * y, t = y0 / x0 < 1, p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0), lambda = p[0], phi = p[1], cosPhi = cos(phi);\r\n    if (t)\r\n        lambda = -halfPi - lambda;\r\n    return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\r\n};\r\nfunction gringortenHexadecant(lambda, phi) {\r\n    if (phi === halfPi)\r\n        return [0, 0];\r\n    var sinPhi = sin(phi), r = sinPhi * sinPhi, r2 = r * r, j = 1 + r2, k = 1 + 3 * r2, q = 1 - r2, z = asin(1 / sqrt(j)), v = q + r * j * z, p2 = (1 - sinPhi) / v, p = sqrt(p2), a2 = p2 * j, a = sqrt(a2), h = p * q, x, i;\r\n    if (lambda === 0)\r\n        return [0, -(h + r * a)];\r\n    var cosPhi = cos(phi), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * k) * drdPhi, dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v), dpdPhi = (0.5 * dp2dPhi) / p, dhdPhi = q * dpdPhi - 2 * r * p * drdPhi, dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi, mu = -secPhi * drdPhi, nu = -secPhi * dra2dPhi, zeta = -2 * secPhi * dhdPhi, lambda1 = 4 * lambda / pi, delta;\r\n    if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\r\n        x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\r\n        if (lambda > pi / 4)\r\n            return [x, x];\r\n        var x1 = x, x0 = 0.5 * x;\r\n        x = 0.5 * (x0 + x1), i = 50;\r\n        do {\r\n            var g = sqrt(a2 - x * x), f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\r\n            if (!f)\r\n                break;\r\n            if (f < 0)\r\n                x0 = x;\r\n            else\r\n                x1 = x;\r\n            x = 0.5 * (x0 + x1);\r\n        } while (abs(x1 - x0) > epsilon && --i > 0);\r\n    }\r\n    else {\r\n        x = epsilon, i = 25;\r\n        do {\r\n            var x2 = x * x, g2 = sqrt(a2 - x2), zetaMug = zeta + mu * g2, f2 = x * zetaMug + nu * asin(x / a) - lambda1, df = zetaMug + (nu - mu * x2) / g2;\r\n            x -= delta = g2 ? f2 / df : 0;\r\n        } while (abs(delta) > epsilon && --i > 0);\r\n    }\r\n    return [x, -h - r * sqrt(a2 - x * x)];\r\n}\r\nfunction gringortenHexadecantInvert(x, y) {\r\n    var x0 = 0, x1 = 1, r = 0.5, i = 50;\r\n    while (true) {\r\n        var r2 = r * r, sinPhi = sqrt(r), z = asin(1 / sqrt(1 + r2)), v = (1 - r2) + r * (1 + r2) * z, p2 = (1 - sinPhi) / v, p = sqrt(p2), a2 = p2 * (1 + r2), h = p * (1 - r2), g2 = a2 - x * x, g = sqrt(g2), y0 = y + h + r * g;\r\n        if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0)\r\n            break;\r\n        if (y0 > 0)\r\n            x0 = r;\r\n        else\r\n            x1 = r;\r\n        r = 0.5 * (x0 + x1);\r\n    }\r\n    if (!i)\r\n        return null;\r\n    var phi = asin(sinPhi), cosPhi = cos(phi), secPhi = 1 / cosPhi, drdPhi = 2 * sinPhi * cosPhi, dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi, dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v), dpdPhi = 0.5 * dp2dPhi / p, dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi, zeta = -2 * secPhi * dhdPhi, mu = -secPhi * drdPhi, nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\r\n    return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\r\n}\r\nexport default function () {\r\n    return projection(squareRaw(gringortenRaw))\r\n        .scale(239.75);\r\n}\r\n",{"version":3,"file":"D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gringorten.js","sourceRoot":"","sources":["D:\\project\\Deecamp-project\\system\\Web\\node_modules\\d3-geo-projection\\src\\gringorten.js"],"names":[],"mappings":"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","sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math\";\nimport squareRaw from \"./square\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n"]}]}